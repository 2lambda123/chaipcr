<% environment.context_class.instance_eval { include ActionView::Helpers::JavaScriptHelper } %>
<% environment.context_class.instance_eval { include ActionView::Helpers::FormTagHelper } %>
<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>
<% environment.context_class.instance_eval { include AssetHelper } %>

jQuery.fn.hint = function (blurClass) {
  if (!blurClass) { 
    blurClass = 'blur';
  }

  return this.each(function () {
    // get jQuery version of 'this'
    var $input = jQuery(this),

    // capture the rest of the variable to allow for reuse
      title = $input.attr('title'),
      $form = jQuery(this.form),
      $win = jQuery(window);

    function remove() {
      if ($input.val() === title && $input.hasClass(blurClass)) {
        $input.val('').removeClass(blurClass);
      }
    }

    // only apply logic if the element has the attribute
    if (title) { 
      // on blur, set value to title attr if text is blank
      $input.blur(function () {
        if (this.value === '') {
          $input.val(title).addClass(blurClass);
        }
      }).focus(remove).blur(); // now change all inputs to title

      // clear the pre-defined text when form is submitted
      $form.submit(remove);
      $win.unload(remove); // handles Firefox's autocomplete
    }
  });
};

function initDraggable($elements)
{
	$elements.draggable({
		cursor: 'pointer',
    	scope:  'step',
		helper: 'clone',
		revert: 'invalid',
		zIndex: 10,
		start: function(event, ui){
			detachDraggable($(this));
			$(ui.helper).addClass('move');
		},
		stop: function(event, ui){
			$(ui.helper).removeClass('move');
			reattachDraggable($(this));
		},
        drag: function(event, ui) {
            var $droppable = $(this).data("current-droppable");
            if ($droppable) {
                updateHighlight(ui, $droppable[0]);
            }
        }
    });
}

function initDraggableCycle($elements)
{
	$elements.draggable({
		cursor: 'pointer',
    	scope:  'cycle',
		helper: 'clone',
		revert: 'invalid',
		zIndex: 10,
		start: function(event, ui){
			$(ui.helper).addClass('move');
			$(this).hide();
		},
		stop: function(event, ui){
			$(ui.helper).removeClass('move');
			$(this).show();
		},
    });
}

function initDroppable($elements)
{
    $elements.droppable({
		tolerance: "touch",
		scope: "step",
        over: function(event, ui) {
			var $droppable = ui.draggable.data("current-droppable");
			if ($droppable){
				if ($.inArray(this, $droppable) == -1){
					if ($(this).offset().top < $($droppable[0]).offset().top){
						cleanupHighlight(ui, $droppable[0]);
						$droppable.unshift(this);
					}
					else{
						$droppable.push(this);
					}
				}
			}
			else{
            	updateHighlight(ui, this);
            	ui.draggable.data("current-droppable", new Array(this));
			}
        },
        out: function(event, ui) {
			var $droppable = ui.draggable.data("current-droppable");
			var index = $.inArray(this,$droppable);
			if (index != -1)
				$droppable.splice(index, 1);
			if ($droppable.length == 0)
				ui.draggable.removeData("current-droppable");
           	cleanupHighlight(ui, this);
        },
        drop: function(event, ui) {
            var $this = $(this);
            cleanupHighlight(ui, this);
			var $droppable = ui.draggable.data("current-droppable");

			if ($droppable && $droppable[0] == this){
				/* if drop is called on two different droppable, only first one will be executed */
				var $parent = ui.draggable.data("detached-parent");
				var $li = ui.draggable;
				var newstep = false;

				ui.draggable.removeData("current-droppable");
				ui.draggable.removeData("detached-prev-sibling");
				ui.draggable.removeData("detached-parent");
			
				if ($li.hasClass("button")){
					$li =  $('<li>').addClass("draggable droppable");
					newstep = true;
				}

				var $protocol = $this.parents(".protocol");
				if ($protocol.hasClass("cycle"))
					$li.addClass("droppable");
				else
					$li.removeClass("droppable");
					
				if ($this.hasClass("placeholder")){
					$li.insertAfter(this);
					$this.remove();
					$protocol.removeClass("droppable-cycle hide");
					$protocol.droppable('destroy');
					addPlaceHolders($protocol, "both");
				}
				else if (isInUpperHalf(ui, $(this))) {
					$li.insertBefore(this);
				} 
				else {
					$li.insertAfter(this);
				}
				
				if ($parent && $parent.hasClass("hide")){
					$parent.next(".droppable-cycle").remove();
					$parent.remove();
				}
				
				if (newstep){
					editStep($li, null, function(){
						var $protocol = $li.parents(".protocol");
						if ($protocol.hasClass("cycle")){
							$li.remove();
						}
						else{
							$li.addClass("placeholder droppable").removeClass("draggable").html("");
							$protocol.addClass("droppable-cycle hide");
							if ($li.is('.ui-draggable')) 
								$li.draggable('destroy');
							initDroppable($li);
							initDroppableCycle($protocol);
							removePlaceHolders($protocol);
						}
					});
				}
				else{
					var id = extractID($li.attr("id"));
					if (id){
						$.post("/steps/"+id+"/move", {parent_id: extractID($protocol.attr("id")), next_component: nextStepID($li)})
					}
				}
				
				if ($li.hasClass("draggable"))
					initDraggable($li);
				else if ($li.is('.ui-draggable'))
					$li.draggable('destroy');

				if ($li.hasClass("droppable"))
					initDroppable($li);
				else if ($li.is('.ui-droppable'))
					$li.droppable('destroy');
			}
        }
    });
}

function initDroppableCycle($elements)
{
    $elements.droppable({
		tolerance: "touch",
		scope: "cycle",
		accept: function(draggable){
			return !draggable.hasClass("cycle") || draggable.next().get(0) != this;
		},
        over: function(event, ui) {
			var $droppable = ui.draggable.data("current-droppable");
			if ($droppable){
				if ($.inArray(this, $droppable) == -1){
					if ($(this).offset().top < $($droppable[0]).offset().top){
						$($droppable[0]).removeClass("highlight").addClass("hide");
						$(this).removeClass("hide").addClass("highlight");
						$droppable.unshift(this);
					}
					else{
						$droppable.push(this);
					}
				}
			}
			else{
                $(this).removeClass("hide").addClass("highlight");
                ui.draggable.data("current-droppable", new Array(this));
			}	
        },
        out: function(event, ui) {
			var $droppable = ui.draggable.data("current-droppable");
			var index = $.inArray(this,$droppable);
			if (index != -1)
				$droppable.splice(index, 1);
			if ($droppable.length == 0)
				ui.draggable.removeData("current-droppable");
			else if (index == 0)
				$($droppable[0]).removeClass("hide").addClass("highlight");
				
			$(this).removeClass("highlight").addClass("hide");
        },
        drop: function(event, ui) {
			var $this = $(this);
			$this.removeClass("highlight").addClass("hide");
			
			var $droppable = ui.draggable.data("current-droppable");

			if ($droppable && $droppable[0] == this){
				ui.draggable.removeData("current-droppable");
					
				if (ui.draggable.hasClass("button")){
					newCycle($this);
				}
				else{
					var $obj = ui.draggable;
					$obj.next(".droppable-cycle").remove();
					$obj.insertAfter(this);
					
					var id = extractID($obj.attr("id"));
					if (id){
						$.post("/cycles/"+id+"/move", {next_component: nextCycleID($obj)})
					}
					addPlaceHolders($obj, "after");
				}
			}
        }
    });
}

function isInUpperHalf(ui, $droppable)
{
	var $draggable = ui.helper || ui.draggable;
    return ($draggable.offset().top
            <= $droppable.offset().top + $droppable.outerHeight() / 2);
}

function updateHighlight(ui, droppable)
{
	if (droppable == null) return;
	
	var $droppable = $(droppable);
	var $prevsibling = $droppable.prev();
	if ($droppable.hasClass("placeholder")){
		$droppable.addClass("highlight");
	}
    else if (isInUpperHalf(ui, $droppable)) {
		$droppable.removeClass("droppable-highlight-bottom");
		if ($prevsibling.length == 0)
			$droppable.addClass("droppable-highlight-top");
		else
			$prevsibling.addClass("droppable-highlight-bottom");
    } else {
		if ($prevsibling.length > 0){
			$prevsibling.removeClass("droppable-highlight-top droppable-highlight-bottom");
		}
		$droppable.removeClass("droppable-highlight-top")
				  .addClass("droppable-highlight-bottom");
    }
}

function cleanupHighlight(ui, droppable)
{
	if (droppable == null) return;
	
	var $droppable = $(droppable);
	if ($droppable.hasClass("placeholder")){
		$droppable.removeClass("highlight");
	}
	else{
    	$droppable.removeClass("droppable-highlight-top droppable-highlight-bottom");
		$droppable.prev().removeClass("droppable-highlight-top droppable-highlight-bottom");
	}
}

function detachDraggable($draggable)
{
	if ($draggable.siblings('.draggable[position!="absolute"]').length == 1){
		var $protocol = $draggable.parents(".protocol");
		$protocol.addClass("hide");
	}
	$draggable.data("detached-prev-sibling", $draggable.prev());
	$draggable.data("detached-parent", $draggable.parents(".protocol"));
	$draggable.detach();
}

function reattachDraggable($draggable)
{
	/* revert back if drop is not called */
	var $sibling = $draggable.data("detached-prev-sibling");
	var $parent = $draggable.data("detached-parent");
	$draggable.removeData("detached-prev-sibling");
	$draggable.removeData("detached-parent");
	
	if ($sibling && $sibling.length > 0)
		$draggable.insertAfter($sibling);
	if ($parent){
		$parent.removeClass("hide");
		if ($sibling == null || $sibling.length == 0){
			$parent.children("ul").prepend($draggable);
		}
	}
}

function initEditable($elements, elementType)
{
	$elements.hover(
	function(event){
		$(this).children(".icon-del").css("display", "inline-block");
	},
	function(event){
		$(this).children(".icon-del").hide();
	}
	);
	
	$elements.children("span").click(function(event){
		var $parent = $(this).parent();
		var $values = new Array();
		$parent.children("span").unbind('click');
		$parent.unbind('mouseenter mouseleave');
		$parent.children(".icon-del").hide();
		$parent.children("span").each(function(){
			$values.push($(this).html());
		});
		if (elementType == "step"){
			editStep($parent, $values, function(){
				initStep($parent, $values);
			});
		}
		else{
			editCycle($parent, $values);
		}
	});
}

function extractID(id_name)
{
	var arr = null;
	if (id_name)
		arr = id_name.split("_");
	return (arr && arr.length >= 1)? arr[arr.length-1] : null;
}

function initStep($obj, values){
	var id = extractID($obj.attr("id"));
	$obj.html("<span class='step-name'>"+values[0]+"</span><span class='step-temperature'>"+values[1]+"</span><span class='step-hold-time'>"+values[2]+"</span><a class='icon-del' data-confirm='<%=step_delete_confirm_msg%>' data-method='delete' data-remote='true' href='/steps/"+ extractID($obj.attr("id"))+"'></a>");
	initEditable($obj, "step");
	initDeletableStep($obj);
}

function editStep($obj, values, cancelHandler){
	var id, stepform = null;
	if (values == null){
		stepform = "<%=escape_javascript(stepform("newstep"))%>";
	}
	else{
		id = $obj.attr('id');
		stepform = "<%=escape_javascript(stepform("updatestep"))%>";
		stepform = stepform.replace("URL_PH", "/steps/"+extractID(id));
		stepform = stepform.replace("NAME_PH", values[0]);
		stepform = stepform.replace("TEMPERATURE_PH", values[1]);
		stepform = stepform.replace("HOLDTIME_PH", values[2]);
	}

	$obj.html(stepform);
	stepform_ajax_register($obj);
//	$obj.find(".textinput").hint();
	$obj.find(".cancel").click(function(event){
		cancelHandler();
	});
}

function nextStepID($obj)
{
	var $nextsibling = $obj.next();
	if ($nextsibling.length > 0)
		return extractID($nextsibling.attr("id"));
	else{
		var $cycle = $obj.parents(".protocol");
		if ($cycle.attr("id") == null)
			return nextCycleID($cycle);
	}
	return null;
}
function stepform_ajax_register($obj){
	$obj.find('.stepform')
		  .bind("ajax:beforeSend",  function(evt, xhr, settings) {
		   })	
		  .bind('ajax:success', function(evt, data, status, xhr) {
			var step = jQuery.parseJSON(xhr.responseText);
			$obj.attr("id", "step_"+step.id);
			initStep($obj, [step.name, step.temperature, step.hold_time]);
		  })
		  .bind('ajax:error', function(evt, xhr, status, error) {
			alert(xhr.responseText);
			var errors = jQuery.parseJSON(xhr.responseText);
		  });
	
	$obj.find('.stepform').submit(function(event){
		var theForm = event.target;
	    var validform=true;

		jQuery(theForm.next_component).val(nextStepID($obj));
		if (jQuery(theForm).attr("action") == "URL_PH")
			jQuery(theForm).attr("action", "/cycles/"+curCycleID($obj)+"/steps");
	    return validform;
	});	
}

function initDeletableStep($obj){
	if ($obj == null)
		$obj = jQuery('li .icon-del');
	else
		$obj = $obj.children(".icon-del");
	$obj
		  .bind("ajax:beforeSend",  function(evt, xhr, settings) {
		  })	
		  .bind('ajax:success', function(evt, data, status, xhr) {
			var cycle = jQuery(evt.target).parents(".protocol");
			var li = jQuery(evt.target).parent("li");
			li.remove();
			if (cycle.children("ul").children("li").length == 0)
				cycle.remove();
		  })
		  .bind('ajax:error', function(evt, xhr, status, error) {
			errors = jQuery.parseJSON(xhr.responseText);
			alert(errors.base);
		  });
}

function initCycle($obj, values){
	var id = extractID($obj.attr("id"));
	var $cycle = $obj.find(".title");
	$cycle.html("<span class='cycle-name'>"+values[0]+"</span><span class='cycle-repeat'>Repeat "+values[1]+" times</span><a class='icon-del' data-confirm='<%=cycle_delete_confirm_msg%>' data-method='delete' data-remote='true' href='/cycles/"+ extractID($obj.attr("id"))+"'></a>");
	initEditable($cycle, "cycle");
	initDeletableCycle($cycle);
}

function newCycle($obj){
	$obj.removeClass("hide droppable-cycle").addClass("cycle");
	$obj.droppable('destroy');
	initDraggableCycle($obj);
	
	var id = $obj.parents(".main-panel").attr('id');
	var arr = id.split("_");
	id = arr[1];
	var cycleform = "<%=escape_javascript(newcycleform())%>";
	cycleform = cycleform.replace("URL_PH", "/experiments/"+id+"/cycles");			
	$obj.html(cycleform);
//	$obj.find(".textinput").hint();
	cycleform_ajax_register($obj, "new");
	
	$obj.find(".cancel").click(function(event){
		$obj.addClass("droppable-cycle hide").removeClass("cycle");
		$obj.html("<%=escape_javascript(cycle_placeholder_body)%>");
		$obj.draggable('destroy');						
		initDroppable($obj.find("li"));
		initDroppableCycle($obj);
		removePlaceHolders($obj);
	});
	
	addPlaceHolders($obj, "both");
}

function editCycle($obj, values){
	var $parent = $obj.parent();
	var id = $parent.attr('id');
	var cycleform = "<%=escape_javascript(cycleform("editcycle"))%>";
	cycleform = cycleform.replace("URL_PH", "/cycles/"+extractID(id));
	cycleform = cycleform.replace("NAME_PH", values[0]);
	var strarr = values[1].split(" ");
	values[1] = parseInt(strarr[1], 10);
	cycleform = cycleform.replace("REPEAT_PH", values[1]);
	$obj.html(cycleform);
//	$obj.find(".textinput").hint();
	
	cycleform_ajax_register($parent, "edit");
	$obj.find(".cancel").click(function(event){
		initCycle($parent, values);
	});
}

function curCycleID($obj){
	var parent = $obj.parents(".protocol");
	id = parent.attr('id');
	if (id == null){
		id = $obj.parents(".main-panel").attr('id');
	}
	return extractID(id);
}
function nextCycleID($obj){
	var $nextsibling = $obj.next();
	while ($nextsibling.length > 0){
		var id = $nextsibling.attr("id");
		if (id)
			return extractID(id);
		else if ($nextsibling.hasClass("hide") || $nextsibling.hasClass("ui-draggable-dragging move")){ //placeholder
			$nextsibling = $nextsibling.next();
		}
		else{
			var $li = $nextsibling.find("li");
			return ($li)? extractID($li.attr("id")) : null;
		}
	}
	return null;
}

function cycleform_ajax_register($obj, action){
	$obj.find('.cycleform')
		  .bind("ajax:beforeSend",  function(evt, xhr, settings) {
		   })	
		  .bind('ajax:success', function(evt, data, status, xhr) {
			var cycle = null, step = null;
			if (action == "new"){
				objs = jQuery.parseJSON(xhr.responseText);
				cycle = objs.cycle;
				step = objs.step;
				jQuery(evt.target).remove();
				jQuery($obj).html("<%=escape_javascript(cycle_placeholder_body)%>");
			}
			else{
				cycle = jQuery.parseJSON(xhr.responseText);
			}
			$obj.attr("id", "cycle_"+cycle.id)
			initCycle($obj, [cycle.name, cycle.repeat]);
			if (step){
				var $li = $obj.find("li");
				$li.removeClass("placeholder").addClass("draggable");
				$li.attr("id", "step_"+step.id);
				initStep($li, [step.name, step.temperature, step.hold_time]);
				initDraggable($li);
				initDroppable($li);
			}
		  })
		  .bind('ajax:error', function(evt, xhr, status, error) {
			alert(xhr.responseText);
			errors = jQuery.parseJSON(xhr.responseText);
		  });
	
	$obj.find('.cycleform').submit(function(event){
		var theForm = event.target;
	    var validform=true;
	
		jQuery(theForm.next_component).val(nextCycleID($obj));
	    return validform;
	});	
}

function initDeletableCycle($obj){
	if ($obj == null)
		$obj = jQuery('div.title .icon-del');
	else
		$obj = $obj.children(".icon-del");	
	$obj
		  .bind("ajax:beforeSend",  function(evt, xhr, settings) {
		  })	
		  .bind('ajax:success', function(evt, data, status, xhr) {
			var cycle = jQuery(evt.target).parents(".protocol");
			cycle.remove();
		  })
		  .bind('ajax:error', function(evt, xhr, status, error) {
			errors = jQuery.parseJSON(xhr.responseText);
			alert(errors.base);
		  });
}

function addPlaceHolders($protocol, position){
	if (position == "both" || position == "after"){
		$protocol.after("<%=escape_javascript(cycle_placeholder)%>");
		initDroppable($protocol.next().find(".droppable"));
		initDroppableCycle($protocol.next());
	}
	if (position == "both" || position == "before"){
		$protocol.before("<%=escape_javascript(cycle_placeholder)%>");
		initDroppable($protocol.prev().find(".droppable"));
		initDroppableCycle($protocol.prev());
	}
}

function removePlaceHolders($protocol){
	$protocol.next(".droppable-cycle").remove();
	$protocol.prev(".droppable-cycle").remove();
}

function getBrowserWindowSize() {
	var viewportwidth;
	var viewportheight;

	// the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight

	if (typeof window.innerWidth != 'undefined'){
		viewportwidth = window.innerWidth,
		viewportheight = window.innerHeight
	}

	// IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
	else if (typeof document.documentElement != 'undefined'
	&& typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth != 0){
		viewportwidth = document.documentElement.clientWidth,
		viewportheight = document.documentElement.clientHeight
	}
	// older versions of IE
	else {
		viewportwidth = document.getElementsByTagName('body')[0].clientWidth,
		viewportheight = document.getElementsByTagName('body')[0].clientHeight
	}
	var rval = {
		width: viewportwidth,
		height: viewportheight
	};

	return rval;
}

function getElementPosition(elem){
	var posX = null;
	var posY = null;
	if(elem.offsetParent) {
		for( posX = 0, posY = 0; elem.offsetParent; elem = elem.offsetParent ) {
			posX += elem.offsetLeft;
			posY += elem.offsetTop;
		}
		return [ posX, posY ];
	} else {
		posX = elem.x;
		posY = elem.y;
		return [ posX, posY ];
	}
}
function popupbox(varname, dynbox, width, center, relpos_id){
    var title = null;
    var content = null;
	var js_func = null
    var elem = null;
    var opened = false;
    return{
     open:function(idstr){ 
	    var top = 10;
	    var left = 10;
	    if (relpos_id){
			pos = getElementPosition(document.getElementById(relpos_id));
			left = pos[0]+'px';
			top = (pos[1]+30)+'px';
	    }
	    else if (center){
			var wDim = getBrowserWindowSize();
			left = (wDim.width-width)/2;
			left = (((left < 10)? 10 : left)+jQuery(document).scrollLeft())+'px';
			top = (jQuery(document).scrollTop()+150)+'px';
	    }
	    if (opened == false){
			if (dynbox){
				elem = document.createElement('div');
				jQuery(elem).addClass('popupBox');
				elem.setAttribute('id',idstr);
				elem.innerHTML = "";
				if (title)
					elem.innerHTML += "<div class='popup-handle clearfix'><h2>"+title+"</h2><a href='javascript:"+varname+".close();' class='close close_black'>[X]</a></div>";
				elem.innerHTML += content;
			}
			else{ /*load existing hidden box*/
				elem = document.getElementById(idstr);
			}
			elem.style.top = top;
			elem.style.left = left;
			elem.style.width = width+'px';
			if (dynbox){
		    	document.body.appendChild(elem);
			}
			else{
		    	elem.style.display = "block";
			}
			opened = true;
			if (js_func)
				js_func(this);
			jQuery("#"+idstr).draggable({ handle: '.popup-handle' });
	    }
	    else{ /*reset popupbox position*/
			elem.style.top = top;
			elem.style.left = left;
	    }
     },
     close:function(){
	    if (opened == true){
			if (dynbox)
		    	document.body.removeChild(elem);
			else
		    	elem.style.display = "none";
			opened = false;
	    }
     },
     setTitleContent:function(in_title, in_content){
	    title = in_title
	    content = in_content;
     },
	 setJS:function(in_js_func){
		js_func = in_js_func;
	 }
    }
}
