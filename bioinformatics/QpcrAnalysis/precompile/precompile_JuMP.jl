function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(JuMP._to_cartesian), Type{Int}, Type{T} where T <: Tuple, Tuple{DataType}, Tuple{DataType}})
    precompile(Tuple{typeof(JuMP.variable_range_to_cone!), Array{Any, 1}, JuMP.Model})
    precompile(Tuple{typeof(JuMP.getNumBndRows), JuMP.Model})
    precompile(Tuple{typeof(JuMP.offdiagsdpvars), JuMP.Model})
    precompile(Tuple{getfield(JuMP, Symbol("##solvenlp#165")), Bool, typeof(identity), JuMP.Model, JuMP.ProblemTraits})
    precompile(Tuple{typeof(JuMP.reinterpret_unsafe), Type{ForwardDiff.Partials{4, Float64}}, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.assert_isfinite), JuMP.GenericAffExpr{Float64, JuMP.Variable}})
    precompile(Tuple{typeof(JuMP.prepConstrMatrix), JuMP.Model})
    precompile(Tuple{getfield(JuMP, Symbol("##Model#13")), Ipopt.IpoptSolver, Bool, Type{Int}})
    precompile(Tuple{typeof(JuMP.fillConicRedCosts), JuMP.Model})
    precompile(Tuple{typeof(JuMP.size), Base.SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
    precompile(Tuple{typeof(JuMP.hessian_slice), JuMP.NLPEvaluator, JuMP.FunctionStorage, Array{Float64, 1}, Array{Float64, 1}, Float64, Int64, Array{Float64, 1}, Type{Base.Val{4}}})
    precompile(Tuple{getfield(JuMP, Symbol("#kw##build")), Array{Any, 1}, typeof(JuMP.build), JuMP.Model})
    precompile(Tuple{typeof(JuMP.getSDrowsinfo), JuMP.Model})
    precompile(Tuple{typeof(JuMP.getvalue), JuMP.Variable})
    precompile(Tuple{getfield(JuMP, Symbol("##114#115")), Tuple{Symbol, Symbol}})
    precompile(Tuple{typeof(JuMP.variable_error), Tuple{Symbol, Symbol, Expr}, String})
    precompile(Tuple{typeof(JuMP.registercallbacks), JuMP.Model})
    precompile(Tuple{typeof(JuMP.vartypes_without_fixed), JuMP.Model})
    precompile(Tuple{getfield(JuMP, Symbol("##112#113")), Symbol})
    precompile(Tuple{typeof(JuMP.assert_isfinite), JuMP.GenericQuadExpr{Float64, JuMP.Variable}})
    precompile(Tuple{typeof(JuMP.parseNLExpr_runtime), JuMP.Model, JuMP.Variable, Array{ReverseDiffSparse.NodeData, 1}, Int64, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.parseNLExpr_runtime), JuMP.Model, Float64, Array{ReverseDiffSparse.NodeData, 1}, Int64, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.hessian_slice_inner), JuMP.NLPEvaluator, JuMP.FunctionStorage, Array{Float64, 2}, JuMP.VectorView{ForwardDiff.Partials{1, Float64}}, JuMP.VectorView{ForwardDiff.Partials{1, Float64}}, Type{Base.Val{1}}})
    precompile(Tuple{typeof(JuMP.addSOS), JuMP.Model})
    precompile(Tuple{typeof(JuMP.hessian_slice_inner), JuMP.NLPEvaluator, JuMP.FunctionStorage, Array{Float64, 2}, JuMP.VectorView{ForwardDiff.Partials{4, Float64}}, JuMP.VectorView{ForwardDiff.Partials{4, Float64}}, Type{Base.Val{4}}})
    precompile(Tuple{getfield(JuMP, Symbol("#kw##solvenlp")), Array{Any, 1}, typeof(JuMP.solvenlp), JuMP.Model, JuMP.ProblemTraits})
    precompile(Tuple{typeof(JuMP.prepConstrBounds), JuMP.Model})
    precompile(Tuple{typeof(JuMP.prepAffObjective), JuMP.Model})
    precompile(Tuple{typeof(JuMP.reinterpret_unsafe), Type{ForwardDiff.Partials{1, Float64}}, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.forward_eval_all), JuMP.NLPEvaluator, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.rescaleSDcols!), Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}, JuMP.Model})
    precompile(Tuple{getfield(JuMP, Symbol("##ProblemTraits#111")), Bool, Type{Int}, JuMP.Model})
    precompile(Tuple{typeof(JuMP.constructvariable!), JuMP.Model, typeof(identity), Float64, Float64, Symbol, String, Float64})
    precompile(Tuple{typeof(JuMP.no_solver_error), JuMP.ProblemTraits})
    precompile(Tuple{typeof(JuMP.verify_ownership), JuMP.Model, Array{JuMP.Variable, 1}})
    precompile(Tuple{typeof(JuMP.addQuadratics), JuMP.Model})
    precompile(Tuple{typeof(JuMP._hesslag_structure), JuMP.NLPEvaluator})
    precompile(Tuple{typeof(JuMP.conicdata), JuMP.Model})
    precompile(Tuple{typeof(JuMP.setobjectivesense), JuMP.Model, Symbol})
    precompile(Tuple{getfield(JuMP, Symbol("##solve#116")), Bool, Bool, Bool, Array{Any, 1}, typeof(identity), JuMP.Model})
    precompile(Tuple{typeof(JuMP.simplify_expression), Array{ReverseDiffSparse.NodeData, 1}, Array{Float64, 1}, Array{ReverseDiffSparse.Linearity, 1}, Base.BitArray{1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.tidy_warmstart), JuMP.Model})
    precompile(Tuple{typeof(JuMP.fillConicDuals), JuMP.Model})
    precompile(Tuple{typeof(JuMP.parseNLExpr_runtime), JuMP.Model, Int64, Array{ReverseDiffSparse.NodeData, 1}, Int64, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.constraintbounds), JuMP.Model, JuMP.ProblemTraits})
    precompile(Tuple{typeof(JuMP.hessian_slice), JuMP.NLPEvaluator, JuMP.FunctionStorage, Array{Float64, 1}, Array{Float64, 1}, Float64, Int64, Array{Float64, 1}, Type{Base.Val{1}}})
    precompile(Tuple{typeof(JuMP._buildInternalModel_nlp), JuMP.Model, JuMP.ProblemTraits})
    precompile(Tuple{getfield(JuMP, Symbol("##constructvariable!#96")), Array{Any, 1}, typeof(identity), JuMP.Model, (getfield(JuMP, Symbol("#_error#103"))){Tuple{Symbol, Symbol, Expr}}, Float64, Float64, Symbol, String, Float64})
    precompile(Tuple{getfield(JuMP, Symbol("##build#119")), Bool, Bool, JuMP.ProblemTraits, typeof(identity), JuMP.Model})
    precompile(Tuple{typeof(JuMP.reverse_eval_all), JuMP.NLPEvaluator, Array{Float64, 1}})
    precompile(Tuple{typeof(JuMP.initNLP), JuMP.Model})
    precompile(Tuple{typeof(JuMP.registerobject), JuMP.Model, Symbol, JuMP.Variable, String})
end
