function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##848#962")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##60#94")){Array{Any, 1}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##552#586")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##492#518")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##308#348")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1200#1234")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Array{Any, 2}, Base.LinAlg.RowVector{Any, Array{Any, 1}}}, Tuple{Tuple{Bool, Bool}, Tuple{Bool, Bool}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Base.IteratorsMD.CartesianIndex{2}}, Int64})
    precompile(Tuple{Type{Core.Inference.InferenceState}, Core.MethodInstance, CodeInfo, Bool, Bool, Core.Inference.InferenceParams})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##388#402")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##416#438")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##204#256")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##460#476")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(DataFrames, Symbol("##8#9")){DataFrames.Index}, Symbol})
    precompile(Tuple{Type{JuMP.Variable}, JuMP.Model, Float64, Float64, Symbol, String, Float64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##328#368")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##327#367"))}})
    precompile(Tuple{getfield(DataArrays, Symbol("##104#111")){Tuple{DataType, DataType}, Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##322#362")){getfield(QpcrAnalysis, Symbol("##321#361")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##320#360")){getfield(QpcrAnalysis, Symbol("##319#359")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##332#372")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##331#371"))}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Array{DataStructures.OrderedDict{K, V} where V where K, 1}}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1634#1653")){Array{Int64, 1}, Array{Int64, 2}}, Int64})
    precompile(Tuple{Type{DataArrays.DataArray{Any, 1}}, Array{Any, 1}, Base.BitArray{1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1646#1665")){Array{Int64, 2}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1647#1666")){Array{Int64, 2}}, Int64})
    precompile(Tuple{Type{QpcrAnalysis.AmpStepRampOutput}, Array{Any, 3}, Array{Int64, 3}, QpcrAnalysis.K4Deconv, Array{Float64, 3}, DataStructures.OrderedDict{String, DataStructures.OrderedDict{UInt8, Any}}, Array{AbstractFloat, 3}, Array{Int64, 1}, Base.UnitRange{Int64}, String, Array{QpcrAnalysis.SfcFitted, 2}, Array{Array{String, 1}, 2}, Array{AbstractFloat, 3}, Array{QpcrAnalysis.SfcFitted, 2}, Array{Symbol, 2}, Array{Float64, 3}, Array{Float64, 2}, Array{AbstractFloat, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 2}, Array{Float64, 2}, Array{DataStructures.OrderedDict{String, AbstractFloat}, 2}, Array{DataStructures.OrderedDict{String, AbstractFloat}, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Float64, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{String, 2}, Array{Any, 1}, DataStructures.OrderedDict{String, Array{String, 1}}, DataStructures.OrderedDict{String, QpcrAnalysis.AssignGenosResult}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1648#1667")){Array{Int64, 2}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##324#364")){getfield(QpcrAnalysis, Symbol("##323#363")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Array{AbstractFloat, 1}, Float64}, Tuple{Tuple{Bool}, Tuple{}}, Tuple{Tuple{Int64}, Tuple{}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Float64, Array{AbstractFloat, 1}}, Tuple{Tuple{}, Tuple{Bool}}, Tuple{Tuple{}, Tuple{Int64}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##544#548")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Int64, Array{AbstractFloat, 1}}, Tuple{Tuple{}, Tuple{Bool}}, Tuple{Tuple{}, Tuple{Int64}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1829#1830")){DataStructures.OrderedDict{String, Any}}, Int64})
    precompile(Tuple{getfield(DataArrays, Symbol("##101#108")){Tuple{DataType, DataType}, Int64}, Int64})
    precompile(Tuple{getfield(DataArrays, Symbol("##101#108")){Tuple{DataType, DataType, DataType, DataType}, Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##39#41")){Int64}, Array{Float64, 1}})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Array{AbstractFloat, 1}, Array{Float64, 1}}, Tuple{Tuple{Bool}, Tuple{Bool}}, Tuple{Tuple{Int64}, Tuple{Int64}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Array{Any, 1}, Int64}, Tuple{Tuple{Bool}, Tuple{}}, Tuple{Tuple{Int64}, Tuple{}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1833#1849")){Int64, DataStructures.OrderedDict{String, Any}}, Int64})
    precompile(Tuple{Type{Base.Dict{String, Any}}, Tuple{Base.Pair{String, Bool}, Base.Pair{String, String}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1811#1820")){Int64, DataStructures.OrderedDict{String, Any}}, String})
    precompile(Tuple{getfield(DataArrays, Symbol("##102#109")){Tuple{DataType, DataType, DataType, DataType}}, Int64})
    precompile(Tuple{Type{Core.Inference.InferenceState}, Core.MethodInstance, Bool, Bool, Core.Inference.InferenceParams})
    precompile(Tuple{Type{DataArrays.DataArray{Float64, 1}}, Array{Float64, 1}, Base.BitArray{1}})
    precompile(Tuple{Type{Base.DataFmt.DLMOffsets}, String})
    precompile(Tuple{getfield(DataArrays, Symbol("##104#111")){Tuple{DataType, DataType, DataType, DataType}, Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1643#1662")){Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{getfield(DataArrays, Symbol("##102#109")){Tuple{DataType, DataType}}, Int64})
    precompile(Tuple{Type{Base.BitArray{2}}, Int64, Int64})
    precompile(Tuple{getfield(Base, Symbol("##61#62")){Any, Tuple{Array{Any, 1}, Array{Any, 1}}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(!=))}}}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(DataArrays, Symbol("##105#112")){Tuple{DataType, DataType}, Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1378#1379")){Array{Int64, 1}, DataArrays.DataArray{Any, 3}}, Int64})
    precompile(Tuple{Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1604#1614")){Int64}, Symbol})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1387#1394")){DataType, DataStructures.OrderedDict{String, Array{Int64, 2}}}, String})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1637#1656")){Array{Int64, 2}}, Int64})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Base.BitArray{1}, Array{Any, 1}, Int64}, Tuple{Tuple{Bool}, Tuple{Bool}, Tuple{}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{Type{ReverseDiffSparse.UserOperatorRegistry}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, DataArrays.DataArray{Float64, 1}}, Base.Pair{String, Array{Float64, 1}}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##398#412")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1744#1753")){Int64}, Int64})
    precompile(Tuple{Type{DataArrays.DataArray{Float64, 1}}, Array{Union{Float64, Missings.Missing}, 1}, Base.BitArray{1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##318#358")){getfield(QpcrAnalysis, Symbol("##317#357")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Tuple{Float64, Bool}}, Base.Pair{String, Tuple{Int64, Bool}}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##500#526")){getfield(QpcrAnalysis, Symbol("##499#525")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{DataArrays.DataArray{Any, 2}}, Array{Any, 2}, Base.BitArray{2}})
    precompile(Tuple{Type{Base.IOStream}, String, Bool})
    precompile(Tuple{getfield(DataArrays, Symbol("##105#112")){Tuple{DataType, DataType, DataType, DataType}, Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1636#1655")){Array{Int64, 2}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{DataFrames.Index}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, DataStructures.OrderedDict{String, Any}}, Base.Pair{String, DataStructures.OrderedDict{String, Any}}, Base.Pair{String, DataStructures.OrderedDict{String, Any}}, Base.Pair{String, Bool}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##910#1024")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(Main, Symbol("#test_function#8")){Bool, Bool}})
    precompile(Tuple{getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Array{AbstractFloat, 1}, Array{AbstractFloat, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Tuple{Bool}, Tuple{Bool}, Tuple{Bool}, Tuple{Bool}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}, Base.IteratorsMD.CartesianIndex{1}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1222#1256")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1384#1391")){DataStructures.OrderedDict{String, Any}, Array{String, 1}, Array{Int64, 2}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##234#286")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Array{DataStructures.OrderedDict{String, Any}, 1}}, Base.Pair{String, Bool}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1224#1258")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##138#164")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Tuple{Float64, Bool}}, Base.Pair{String, Tuple{Int64, Bool}}, Base.Pair{String, Tuple{Float64, Bool}}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##344#384")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Bool}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1675#1687")){DataFrames.SubDataFrame{Array{Int64, 1}}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##61#62")){Any, Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.SparseArrays.SparseMatrixCSC{Bool, Int64}}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Bool, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1603#1613")){Float64}, Tuple{Int64, Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1218#1252")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##334#374")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##333#373"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1764#1772")){DataStructures.OrderedDict{Any, Any}, Array{Float64, 1}}, Symbol})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##938#1052")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##936#1050")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##228#280")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Base.Timer}, Float64, Float64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##890#1004")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##514#540")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{ReverseDiffSparse.Coloring.RecoveryInfo}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##424#446")){getfield(QpcrAnalysis, Symbol("##423#445")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{Base.Regex}, String, UInt32, UInt32})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##556#590")){getfield(QpcrAnalysis, Symbol("##555#589")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##330#370")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##329#369"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##314#354")){getfield(QpcrAnalysis, Symbol("##313#353")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##516#542")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##400#414")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##340#380")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##396#410")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##512#538")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##888#1002")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##912#1026")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##862#976")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##504#530")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##432#454")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##431#453"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##436#458")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##435#457"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##338#378")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##342#382")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##928#1042")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##506#532")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##140#166")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##942#1056")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##932#1046")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1226#1260")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##954#1068")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##510#536")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##886#1000")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##918#1032")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##430#452")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##429#451"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1230#1264")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##130#156")){DataStructures.OrderedDict{String, Any}, Array{String, 1}, getfield(QpcrAnalysis, Symbol("##129#155"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##940#1054")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##316#356")){getfield(QpcrAnalysis, Symbol("##315#355")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Float64}}, Array{Base.Pair{String, Float64}, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##934#1048")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1220#1254")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1674#1686")){Int64, Int64, QpcrAnalysis.TargetResultEle}, DataFrames.SubDataFrame{Array{Int64, 1}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1396#1399")){DataStructures.OrderedDict{String, DataStructures.OrderedDict{UInt8, Any}}, Array{Int64, 1}, Int64}, String})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##930#1044")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##906#1020")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##880#994")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##916#1030")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##952#1066")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##956#1070")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1228#1262")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##946#1060")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##496#522")){getfield(QpcrAnalysis, Symbol("##495#521")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##142#168")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##898#1012")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##134#160")){DataStructures.OrderedDict{String, Any}, Array{String, 1}, getfield(QpcrAnalysis, Symbol("##133#159"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##950#1064")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##210#262")){getfield(QpcrAnalysis, Symbol("##209#261")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##944#1058")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##908#1022")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##882#996")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##336#376")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##190#202")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##914#1028")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##146#172")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##434#456")){DataStructures.OrderedDict{String, Any}, getfield(QpcrAnalysis, Symbol("##433#455"))}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##392#406")){getfield(QpcrAnalysis, Symbol("##391#405")){Array{String, 1}}, DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##892#1006")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##872#986")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##904#1018")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1232#1266")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##498#524")){getfield(QpcrAnalysis, Symbol("##497#523")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##422#444")){getfield(QpcrAnalysis, Symbol("##421#443")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##508#534")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##152#178")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##150#176")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##186#198")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##870#984")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("##21#22")), Base.UnitRange{Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##144#170")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##902#1016")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##948#1062")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##960#1074")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##926#1040")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Base.DataFmt.DLMStore{T} where T}, Type{Any}, Tuple{Int64, Int64}, Bool, String, Bool, Char})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##148#174")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##920#1034")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##958#1072")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1216#1250")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##878#992")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##232#284")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##226#278")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##188#200")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##900#1014")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##236#288")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##874#988")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##884#998")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##184#196")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##426#448")){getfield(QpcrAnalysis, Symbol("##425#447")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(ReverseDiffSparse, Symbol("##10#13")){Int64, Base.BitArray{1}}, Int64})
    precompile(Tuple{Type{DataArrays.DataArray{Float64, 3}}, Array{Float64, 3}, Base.BitArray{3}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##896#1010")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##924#1038")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Ipopt.IpoptProblem}, Ptr{Void}, Int64, Int64, typeof(identity), typeof(identity), typeof(identity), typeof(identity), typeof(identity)})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##894#1008")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1212#1246")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##464#480")){getfield(QpcrAnalysis, Symbol("##463#479")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##312#352")){getfield(QpcrAnalysis, Symbol("##311#351")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##132#158")){DataStructures.OrderedDict{String, Any}, Array{String, 1}, getfield(QpcrAnalysis, Symbol("##131#157"))}})
    precompile(Tuple{Type{QpcrAnalysis.MbqOutput}, QpcrAnalysis.SfcFitted, Array{String, 1}, Array{Float64, 1}, QpcrAnalysis.SfcFitted, Symbol, Array{Float64, 1}, Float64, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Float64, Float64, DataStructures.OrderedDict{String, Float64}, DataStructures.OrderedDict{String, Float64}, Float64, Float64, Float64, Float64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##876#990")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##922#1036")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(FactCheck, Symbol("#delayed_handler#5")){FactCheck.TestSuite}, FactCheck.Failure})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##852#966")){getfield(QpcrAnalysis, Symbol("##851#965")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Dict{Symbol, Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##214#266")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##230#282")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1204#1238")){getfield(QpcrAnalysis, Symbol("##1203#1237")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##216#268")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Type{Base.BitArray{3}}, Int64, Int64, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##208#260")){getfield(QpcrAnalysis, Symbol("##207#259")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##218#270")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##238#290")){DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##420#442")){getfield(QpcrAnalysis, Symbol("##419#441")), DataStructures.OrderedDict{String, Any}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1760#1768")){DataStructures.OrderedDict{String, Array{Any, 1}}, Array{Symbol, 1}}, Int64})
    precompile(Tuple{getfield(Ipopt, Symbol("#eval_h_cb#8")){JuMP.NLPEvaluator}, Array{Float64, 1}, Symbol, Array{Int32, 1}, Array{Int32, 1}, Float64, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{DataArrays.DataArray{Any, 3}}, Array{Any, 3}, Base.BitArray{3}})
    precompile(Tuple{Type{QpcrAnalysis.ClusterAnalysisResult}, Array{Float64, 2}, Array{Float64, 2}, Clustering.KmedoidsResult{Float64}, Array{Float64, 2}, Array{Float64, 1}, Float64, Array{Int64, 2}, Bool})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{JuMP.Model}, JuMP.GenericQuadExpr{Float64, JuMP.Variable}, Symbol, Array{JuMP.GenericRangeConstraint{JuMP.GenericAffExpr{Float64, JuMP.Variable}}, 1}, Array{JuMP.GenericQuadConstraint{JuMP.GenericQuadExpr{Float64, JuMP.Variable}}, 1}, Array{JuMP.SOSConstraint, 1}, Array{JuMP.GenericSOCConstraint{JuMP.GenericNormExpr{2, Float64, JuMP.Variable}}, 1}, Array{JuMP.SDConstraint, 1}, Int64, Array{String, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Symbol, 1}, Array{JuMP.Variable, 1}, Array{Array{Tuple{Symbol, Any}, 1}, 1}, Int64, Int64, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Array{Int64, 1}, 1}, Array{Array{Tuple{Int64, Int64}, 1}, 1}, Void, Ipopt.IpoptSolver, Bool, Array{Any, 1}, Void, Void, Array{Any, 1}, JuMP.IndexedVector{Float64}, Void, Bool, Base.Dict{Symbol, Any}, Base.ObjectIdDict, Int64, Int64, Base.Dict{Symbol, Any}})
    precompile(Tuple{getfield(Base, Symbol("##61#62")){Float32, Tuple{Array{Float32, 1}, Array{Float32, 1}}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.next), typeof(Base.done)}})
    precompile(Tuple{getfield(Base, Symbol("##61#62")){Float64, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{(DataArrays.DataArray{T, N} where N) where T}, Type{Int}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.IteratorsMD.CartesianRange{I} where I<:(Base.IteratorsMD.CartesianIndex{N} where N)}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
    precompile(Tuple{Type{QpcrAnalysis.MeltCurveTF}, Array{Array{Any, 1}, 1}, Array{Float64, 2}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Int64, typeof(JSON.Writer.print)}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("##61#62")){Any, Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}, Base.Iterators.Prod2{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##104#111")){Tuple{DataType, DataType}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{Int64, typeof(JSON.Writer.print)}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.start), typeof(Base.next), typeof(Base.done)}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, GlobalRef})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{DataType, Union}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("##13#14")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{JuMP.NLPEvaluator}, JuMP.Model})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Base.BitArray{1}, Array{Any, 1}, Int64}, Tuple{Tuple{Bool}, Tuple{Bool}, Tuple{}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{}}, Base.IteratorsMD.CartesianIndex{1}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{Int64, typeof(Base.print)}})
    precompile(Tuple{Type{QpcrAnalysis.SfcFitted}, Array{String, 1}, Array{Float64, 1}, Symbol, Float64, JuMP.Model, DataStructures.OrderedDict{String, Float64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(!=))}}}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(*))}}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{DataFrames.GroupApplied{T} where T<:DataFrames.AbstractDataFrame}, DataFrames.GroupedDataFrame, Array{DataFrames.DataFrame, 1}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(!=))}}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.transpose)}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, DataArrays.DataArray{Any, 2}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1405#1410")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1636#1655")){Array{Int64, 2}}, Base.Iterators.Prod2{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1602#1612")), Base.Iterators.Prod2{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1760#1768")){DataStructures.OrderedDict{String, Array{Any, 1}}, Array{Symbol, 1}}, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base.Broadcast, Symbol("##1#2")){Tuple{Array{AbstractFloat, 1}, Array{AbstractFloat, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Tuple{Bool}, Tuple{Bool}, Tuple{Bool}, Tuple{Bool}}, Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}, Base.IteratorsMD.CartesianIndex{1}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.start), typeof(Base.next), typeof(Base.done)}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Bool}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(!=))}}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{DataType, DataType}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1603#1613")){Float64}, Base.Iterators.Prod2{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.maximum), typeof(Base.minimum)}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.maximum), typeof(Base.minimum)}})
    precompile(Tuple{Type{QpcrAnalysis.ClusterAnalysisResult}, Array{Float64, 2}, Array{Float64, 2}, Clustering.KmedoidsResult{Float64}, Array{Float64, 2}, Array{Float64, 1}, Float64, Array{Float64, 2}, Bool})
    precompile(Tuple{Type{Base.SparseArrays.SparseMatrixCSC{Float64, Int64}}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}})
    precompile(Tuple{Type{QpcrAnalysis.TargetResultEle}, Int64, Float64, Float64, Float64, Float64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{Base.Colon}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##149#175")){Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1814#1823")){DataStructures.OrderedDict{String, Any}, Array{Any, 1}}, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Base.Colon}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.ifelse)}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1578#1580")){Int64, Array{Any, 1}, String, Array{Any, 1}, String, Array{Any, 1}, Float64, String, String, Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Int64, DataStructures.OrderedDict{Array{Int64, 1}, Array{Int64, 1}}, String, Int64, Array{Int64, 2}, Array{Tuple{String, Base.Colon}, 1}, Int64, Bool, DataStructures.OrderedDict{String, Any}, DataStructures.OrderedDict{String, Any}, Array{String, 1}}, Array{QpcrAnalysis.AmpStepRampProperties, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Array{DataStructures.OrderedDict{String, Any}, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1743#1752")){Array{Int64, 1}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.done)}})
    precompile(Tuple{getfield(FactCheck, Symbol("#delayed_handler#5")){FactCheck.TestSuite}, FactCheck.Success})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##395#409")){Int64}, Int64})
    precompile(Tuple{Type{Base.SubArray{T, N, P, I, L} where L where I where P where N where T}, Base.IndexCartesian, Array{Float64, 3}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Int64}, Tuple{Bool, Bool}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##101#108")){Tuple{DataType, DataType}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Array{Float64, N} where N}, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##513#539")){Int64}, Int64})
    precompile(Tuple{Type{Array{QpcrAnalysis.SfcFitted, N} where N}, Int64, Int64})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1829#1830")){DataStructures.OrderedDict{String, Any}}, Base.UnitRange{Int64}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##165#166")){Int64, Array{TypeVar, 1}}, Symbol})
    precompile(Tuple{Type{Array{QpcrAnalysis.TargetResultEle, 1}}, Int64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Bool, Bool}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(!=))}}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1766#1774")), Array{DataStructures.OrderedDict{Any, Any}, 1}})
    precompile(Tuple{Type{DataArrays.DataArray{Float64, 2}}, Array{Float64, 2}, Base.BitArray{2}})
    precompile(Tuple{Type{QpcrAnalysis.AssignGenosResult}, Clustering.KmedoidsResult{Float64}, Int64, Array{Array{Int64, 2}, 1}, Array{Int64, 2}, DataStructures.OrderedDict{Base.Set{Array{AbstractFloat, 1}}, QpcrAnalysis.UniqCombinCenters}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Compat.UndefInitializer}})
    precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Base.Nullable{Core.MethodInstance}, Bool, Bool, Ptr{Void}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.done)}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{Bool, Bool}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("##3#4")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Array{QpcrAnalysis.GroupResultEle, 1}}, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1640#1659")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{StaticArrays.Size{()}}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.ifelse)}}}})
    precompile(Tuple{getfield(Ipopt, Symbol("#eval_grad_f_cb#5")){JuMP.NLPEvaluator}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Int64, typeof(Base.print)}})
    precompile(Tuple{Type{QpcrAnalysis.AmpStepRampProperties}, String, Int64, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{QpcrAnalysis.GroupResultEle, 1}, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Float64, Bool}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##105#112")){Tuple{DataType, DataType, DataType, DataType}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.ifelse)}}}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1626#1629")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{QpcrAnalysis.AmpStepRampOutput2Bjson}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 1}, DataStructures.OrderedDict{String, Array{String, 1}}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, Missings.Missing})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, Array{JuMP.IndexPair, 1}})
    precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Array{Int64, 1}}, Base.Pair{Symbol, Array{Real, 1}}, Base.Pair{Symbol, Array{AbstractFloat, 1}}, Base.Pair{Symbol, Array{AbstractFloat, 1}}, Base.Pair{Symbol, Array{Real, 1}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("##5#6")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.AbstractIOBuffer{Array{UInt8, 1}}, Symbol, Base.MethodError})
    precompile(Tuple{getfield(Base, Symbol("##495#497")){Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}}, Base.StackTraces.StackFrame, Int64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Int64, typeof(Base.show)}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1601#1611")){Int64, String, String, Base.Dict{Symbol, Any}, String, Bool, Array{AbstractFloat, 3}}, Base.Iterators.Prod2{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Base.Iterators.Prod2{I1, I2} where I2 where I1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{Array{Any, N} where N}, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.transpose)}})
    precompile(Tuple{Type{Array{Integer, 1}}, Int64})
    precompile(Tuple{Type{Combinatorics.Combinations{T} where T}, Array{Int64, 1}, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("##17#18")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##104#111")){Tuple{DataType, DataType, DataType, DataType}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1742#1751")), Array{QpcrAnalysis.MeltCurveTF, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1763#1771")){Array{Symbol, 1}, Array{DataStructures.OrderedDict{Any, Any}, 1}, Array{Int64, 1}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{Int64, typeof(Base.show)}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1810#1819")){DataStructures.OrderedDict{String, Any}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1387#1394")){DataType, DataStructures.OrderedDict{String, Array{Int64, 2}}}, Array{String, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ForwardDiff, Symbol("##23#24")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##101#108")){Tuple{DataType, DataType, DataType, DataType}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1382#1389")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Array{Array{T, 2} where T, 1}}, Int64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.ifelse)}}}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.next), typeof(Base.done)}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{StaticArrays.Size{()}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1637#1656")){Array{Int64, 2}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.ifelse)}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("##61#62")){Float64, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Base.Iterators.Prod2{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Array{AbstractFloat, N} where N}, Tuple{Int64}})
    precompile(Tuple{Type{Array{Int64, N} where N}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Array{Float64, N} where N}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{typeof(Base.minimum)}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("##46#47")){Array{Int64, 1}}, Array{Any, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, QpcrAnalysis.AmpStepRampOutput2Bjson})
    precompile(Tuple{(getfield(Core.Inference, Symbol("##165#166"))){Int64, Array{TypeVar, 1}}, Type{Int}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1649#1668")){Int64, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.ifelse)}}}}})
    precompile(Tuple{Type{Base.ValueIterator{T} where T<:(Base.Associative{K, V} where V where K)}, DataStructures.OrderedDict{String, QpcrAnalysis.AmpStepRampOutput2Bjson}})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##102#109")){Tuple{DataType, DataType, DataType, DataType}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Expr}, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{typeof(Base.minimum)}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1759#1767")){Int64}, Array{Any, 1}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(!=))}}}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("##62#63")){getfield(QpcrAnalysis, Symbol("##1674#1686")){Int64, Int64, QpcrAnalysis.TargetResultEle}}, DataFrames.GroupedDataFrame})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1683#1695")), Array{QpcrAnalysis.GroupResultEle, 1}})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{Core.Inference.Const}, Tuple{Base.Colon, Base.Colon}})
    precompile(Tuple{Type{Array{Any, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1765#1773")), Array{DataStructures.OrderedDict{Any, Any}, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1585#1589")), Array{Float64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{QpcrAnalysis.TargetResultEle, 1}, 1}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, SSAValue})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{getfield(Base, Symbol("##55#56")){typeof(Base.transpose), typeof(Base.:(*))}}})
    precompile(Tuple{Type{Array{Int64, 3}}, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.AbstractIOBuffer{Array{UInt8, 1}}, Symbol, ErrorException})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##102#109")){Tuple{DataType, DataType}}, Base.UnitRange{Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1777#1793")){Float64}, Float64})
    precompile(Tuple{Type{Array{Array{String, 1}, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, Type{QuoteNode}, Tuple{Base.Colon, Base.Colon}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1384#1391")){DataStructures.OrderedDict{String, Any}, Array{String, 1}, Array{Int64, 2}}, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1676#1688")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##105#112")){Tuple{DataType, DataType}, Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JuMP, Symbol("##62#65")), Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Symbol}, Array{AbstractString, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##103#110")), Array{Int64, 1}})
    precompile(Tuple{Type{JuMP.ProblemTraits}, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Int64, 1}, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("##5#6")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, QpcrAnalysis.GroupResultEle}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1642#1661")), Array{Symbol, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1632#1651")){Int64}, Int64})
    precompile(Tuple{Type{Array{Float64, N} where N}, Int64, Int64, Int64})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, UInt8, Array{Any, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1646#1665")){Array{Int64, 2}}, Array{Int64, 1}})
    precompile(Tuple{Type{Array{Float64, N} where N}, Int64})
    precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1587#1591")), Base.KeyIterator{DataStructures.OrderedDict{String, Float64}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1601#1611")){Int64, String, String, Base.Dict{Symbol, Any}, String, Bool, Array{AbstractFloat, 3}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("##62#63")){getfield(QpcrAnalysis, Symbol("##1678#1690")){Int64, QpcrAnalysis.GroupResultEle}}, DataFrames.GroupedDataFrame})
    precompile(Tuple{Type{DataFrames.DataFrame}, Base.Pair{Symbol, QpcrAnalysis.TargetResultEle}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.MethodError})
    precompile(Tuple{Type{Array{Float64, 2}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.AbstractIOBuffer{Array{UInt8, 1}}, Symbol, Base.KeyError})
    precompile(Tuple{Type{Array{Float64, 3}}, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("##44#45")){Array{Int64, 1}}, Array{Any, 1}})
    precompile(Tuple{Type{Array{Real, 1}}, Int64})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, Int64})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Symbol, QpcrAnalysis.AmpStepRampOutput2Bjson})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataArrays, Symbol("##106#113")), Array{Int64, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1761#1769")){Base.BitArray{1}, DataStructures.OrderedDict{String, Array{Any, 1}}}, Array{Symbol, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1744#1753")){Int64}, Array{Int64, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1762#1770")){Array{Symbol, 1}}, DataStructures.OrderedDict{Any, Any}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##165#166")){Int64, Array{TypeVar, 1}}, Tuple{}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Int64, 2}})
    precompile(Tuple{Type{Array{Real, 2}}, Int64, Int64})
    precompile(Tuple{Type{JuMP.NLPData}})
    precompile(Tuple{Type{Array{DataStructures.OrderedDict{String, AbstractFloat}, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Array{Array{Any, 1}, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1650#1669")){Array{String, 1}}, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1741#1750")){Array{Any, 1}, Int64, DataStructures.OrderedDict{String, Any}}, Array{Int64, 1}})
    precompile(Tuple{Type{Array{String, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1677#1689")), Array{AbstractFloat, 1}})
    precompile(Tuple{Type{DataFrames.SubDataFrame{T} where T<:AbstractArray{Int64, 1}}, DataFrames.DataFrame, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1762#1770")){Array{Symbol, 1}}, Array{DataStructures.OrderedDict{Any, Any}, 1}})
    precompile(Tuple{Type{JuMP.SubexpressionStorage}, Array{ReverseDiffSparse.NodeData, 1}, Array{Float64, 1}, Int64, Base.BitArray{1}, Array{ReverseDiffSparse.Linearity, 1}})
    precompile(Tuple{Type{Array{Symbol, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Array{Float64, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1647#1666")){Array{Int64, 2}}, Array{Int64, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{DataStructures.OrderedDict{String, Any}, 1}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, String})
    precompile(Tuple{Type{DataStructures.OrderedDict{Any, Any}}, Base.Generator{Array{Symbol, 1}, getfield(QpcrAnalysis, Symbol("##1764#1772")){DataStructures.OrderedDict{Any, Any}, Array{Float64, 1}}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1577#1579")), Array{Int64, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(QpcrAnalysis, Symbol("##1746#1755")){Bool, Float64, Float64, Bool, DataStructures.OrderedDict{Symbol, Any}}, Array{Array{DataStructures.OrderedDict{String, Any}, 1}, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Float64, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, DataArrays.DataArray{Float64, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{Symbol, Any}}, Base.Pair{Symbol, Float64}, Base.Pair{Symbol, Float64}})
    precompile(Tuple{Type{Array{Array{Float64, N} where N, 1}}, Int64})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Int64})
    precompile(Tuple{Type{QpcrAnalysis.K4Deconv}, Array{Array{Float64, 2}, 1}, Array{Array{Float64, 2}, 1}, String})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Float64, 2}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##39#41")){Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{DataStructures.OrderedDict{K, V} where V where K, 1}})
    precompile(Tuple{getfield(Core.Inference, Symbol("##189#190")){Array{Any, 1}, Core.Inference.InferenceState}, Expr})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, DataStructures.OrderedDict{String, Any}})
    precompile(Tuple{Type{Base.DataFmt.DLMStore{T} where T}, Type{Float64}, Tuple{Int64, Int64}, Bool, String, Bool, Char})
    precompile(Tuple{Vararg{Any, N} where N})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1678#1690")){Int64, QpcrAnalysis.GroupResultEle}, DataFrames.SubDataFrame{Array{Int64, 1}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1810#1819")){DataStructures.OrderedDict{String, Any}}, Int64})
    precompile(Tuple{Type{JuMP.FunctionStorage}, Array{ReverseDiffSparse.NodeData, 1}, Array{Float64, 1}, Int64, ReverseDiffSparse.Coloring.IndexedSet, Bool, Array{Array{ReverseDiffSparse.NodeData, 1}, 1}, Array{Int64, 1}, Array{ReverseDiffSparse.Linearity, 1}, Array{Base.Set{Tuple{Int64, Int64}}, 1}, Array{Array{Int64, 1}, 1}, Base.BitArray{1}})
    precompile(Tuple{Type{DataArrays.DataArray{T, N} where N where T}, Array{Float64, 1}, Base.BitArray{1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ErrorException})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.KeyError})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Any, 1}})
    precompile(Tuple{Type{QpcrAnalysis.AmpStepRampOutput}, Array{Any, 3}, Array{Int64, 3}, QpcrAnalysis.K4Deconv, Array{Int64, 3}, DataStructures.OrderedDict{String, DataStructures.OrderedDict{UInt8, Any}}, Array{AbstractFloat, 3}, Array{Int64, 1}, Base.UnitRange{Int64}, String, Array{QpcrAnalysis.SfcFitted, 2}, Array{Array{String, 1}, 2}, Array{AbstractFloat, 3}, Array{QpcrAnalysis.SfcFitted, 2}, Array{Symbol, 2}, Array{Float64, 3}, Array{Float64, 2}, Array{AbstractFloat, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 2}, Array{Float64, 2}, Array{DataStructures.OrderedDict{String, AbstractFloat}, 2}, Array{DataStructures.OrderedDict{String, AbstractFloat}, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Float64, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{Float64, 2}, Array{String, 2}, Array{Any, 1}, DataStructures.OrderedDict{String, Array{String, 1}}, DataStructures.OrderedDict{String, QpcrAnalysis.AssignGenosResult}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, QpcrAnalysis.AmpStepRampOutput2Bjson})
    precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.Dict{String, Int64}}, Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Int64}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, Float64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1625#1628")){Int64, Array{Float64, 2}}, Tuple{Int64, Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1761#1769")){Base.BitArray{1}, DataStructures.OrderedDict{String, Array{Any, 1}}}, Symbol})
    precompile(Tuple{getfield(JSON.Parser, Symbol("##4#5")){typeof(Type), DataType, Bool, Int64}, Base.IOStream})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1407#1412")){DataArrays.DataArray{Float64, 3}, DataStructures.OrderedDict{String, DataStructures.OrderedDict{UInt8, Any}}}, Int64})
    precompile(Tuple{Type{Array{Float32, N} where N}, Array{Float64, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Float64}}, Tuple{Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, Float64}, Base.Pair{String, Float64}}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1635#1654")){Array{Int64, 2}}, Int64})
    precompile(Tuple{Type{QpcrAnalysis.AssignGenosResult}, Clustering.KmedoidsResult{Float64}, Int64, Array{Array{Float64, 2}, 1}, Array{Int64, 2}, DataStructures.OrderedDict{Base.Set{Array{AbstractFloat, 1}}, QpcrAnalysis.UniqCombinCenters}})
    precompile(Tuple{getfield(Ipopt, Symbol("#eval_jac_g_cb#7")){JuMP.NLPEvaluator}, Array{Float64, 1}, Symbol, Array{Int32, 1}, Array{Int32, 1}, Array{Float64, 1}})
    precompile(Tuple{getfield(Ipopt, Symbol("#eval_f_cb#4")){JuMP.NLPEvaluator}, Array{Float64, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, Array{DataStructures.OrderedDict{String, Any}, 1}}, Base.Pair{String, Bool}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1635#1654")){Array{Float64, 2}}, Int64})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, Int64}, Base.Pair{String, Int64}, Base.Pair{String, Bool}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, DataStructures.OrderedDict{String, Any}}, Base.Pair{String, DataStructures.OrderedDict{String, Any}}, Base.Pair{String, DataStructures.OrderedDict{String, Any}}, Base.Pair{String, Bool}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1670#1671")){QpcrAnalysis.AmpStepRampOutput}, Int64})
    precompile(Tuple{Type{DataFrames.SubDataFrame{Array{Int64, 1}}}, DataFrames.DataFrame, Array{Int64, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1397#1400")){Float64, DataArrays.DataArray{Any, 2}}, Int64})
    precompile(Tuple{Type{Base.Set{T} where T}, Array{Array{Float64, 1}, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1397#1400")){Float64, Array{Float64, 2}}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1407#1412")){Array{Any, 3}, DataStructures.OrderedDict{String, DataStructures.OrderedDict{UInt8, Any}}}, Int64})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, Tuple{Float64, Bool}}, Base.Pair{String, Tuple{Int64, Bool}}, Base.Pair{String, Tuple{Float64, Bool}}})
    precompile(Tuple{getfield(Base, Symbol("##65#66")){Base.Dict{Int64, Int64}}, Int64})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, DataArrays.DataArray{Float64, 1}}, Base.Pair{String, Array{Float64, 1}}})
    precompile(Tuple{Type{DataFrames.DataFrame}, Array{Array{Any, 1}, 1}, Array{Symbol, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1763#1771")){Array{Symbol, 1}, Array{DataStructures.OrderedDict{Any, Any}, 1}, Array{Int64, 1}, Int64}, Int64})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1378#1379")){Array{String, 1}, Array{Float64, 3}}, Int64})
    precompile(Tuple{Type{QpcrAnalysis.UniqCombinCenters}, Base.Set{Array{Float64, 1}}, QpcrAnalysis.ClusterAnalysisResult, Float64, Array{Array{Int64, 2}, 1}})
    precompile(Tuple{Type{Array{T, 1} where T}, Base.UnitRange{Int64}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1397#1400")){Float64, Array{Int64, 2}}, Int64})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, Tuple{Float64, Bool}}, Base.Pair{String, Tuple{Int64, Bool}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Generator{Array{Symbol, 1}, getfield(QpcrAnalysis, Symbol("##1761#1769")){Base.BitArray{1}, DataStructures.OrderedDict{String, Array{Any, 1}}}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Array{Any, 1}}})
    precompile(Tuple{Type{QpcrAnalysis.MeltCurveTF}, Array{Array{Any, 1}, 1}, Array{Real, 2}})
    precompile(Tuple{Type{Base.Set{Int64}}, Tuple{Int64}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Base.Generator{Array{Symbol, 1}, getfield(QpcrAnalysis, Symbol("##1764#1772")){DataStructures.OrderedDict{Any, Any}, Array{Float64, 1}}}})
    precompile(Tuple{Type{Float64}, Base.Irrational{:π}, Base.Rounding.RoundingMode{:Up}})
    precompile(Tuple{Type{DataStructures.OrderedDict{Symbol, Ipopt.IpoptSolver}}, Tuple{Base.Pair{Symbol, Ipopt.IpoptSolver}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Array{Base.Pair{String, Float64}, 1}})
    precompile(Tuple{Type{Base.Regex}, String})
    precompile(Tuple{Type{DataStructures.OrderedDict{Int64, Array{DataStructures.OrderedDict{String, Any}, 1}}}, Array{Base.Pair{Int64, Array{DataStructures.OrderedDict{String, Any}, 1}}, 1}})
    precompile(Tuple{getfield(QpcrAnalysis, Symbol("##1747#1756")){Bool, Float64, Float64, Bool, DataStructures.OrderedDict{Symbol, Any}}, DataStructures.OrderedDict{String, Any}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Array{Base.Pair{Int64, Array{DataStructures.OrderedDict{String, Any}, 1}}, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{Int64, DataArrays.DataArray{Any, 2}}}, Array{Base.Pair{Int64, DataArrays.DataArray{Any, 2}}, 1}})
    precompile(Tuple{Type{Array{AbstractFloat, N} where N}, Array{Float64, 3}})
    precompile(Tuple{Type{DataStructures.OrderedDict{Any, Any}}, Base.Generator{Array{Symbol, 1}, getfield(QpcrAnalysis, Symbol("##1761#1769")){Base.BitArray{1}, DataStructures.OrderedDict{String, Array{Any, 1}}}}})
    precompile(Tuple{Type{DataArrays.DataArray{T, N} where N where T}, Array{Float64, 3}, Base.BitArray{3}})
    precompile(Tuple{Type{DataArrays.DataArray{T, N} where N where T}, Array{Any, 3}, Base.BitArray{3}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Array{Any, 1}}}, Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Array{Any, 1}}}})
    precompile(Tuple{Type{DataArrays.DataArray{T, N} where N where T}, Array{Any, 2}, Base.BitArray{2}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, QpcrAnalysis.AmpStepRampOutput2Bjson}}, Array{Base.Pair{String, QpcrAnalysis.AmpStepRampOutput2Bjson}, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Array{Base.Pair{String, QpcrAnalysis.AmpStepRampOutput2Bjson}, 1}})
    precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip2{Array{Symbol, 1}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Array{Base.Pair{Int64, DataArrays.DataArray{Any, 2}}, 1}})
    precompile(Tuple{Type{Array{AbstractFloat, N} where N}, DataArrays.DataArray{Any, 3}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Array{Float64, 2}}}, Array{Base.Pair{String, Array{Float64, 2}}, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Array{Base.Pair{String, Array{Float64, 2}}, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Array{Int64, 2}}}, Array{Base.Pair{String, Array{Int64, 2}}, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Array{Bool, 2}}}, Tuple{Base.Pair{String, Array{Bool, 2}}}})
    precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Zip2{Array{Int64, 1}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{K, V} where V where K}, Array{Base.Pair{String, Array{Int64, 2}}, 1}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, Void}}, Tuple{Base.Pair{String, Void}, Base.Pair{String, Void}}})
    precompile(Tuple{Type{DataStructures.OrderedDict{String, DataStructures.OrderedDict{UInt8, Any}}}, Tuple{Base.Pair{String, DataStructures.OrderedDict{UInt8, Any}}, Base.Pair{String, DataStructures.OrderedDict{UInt8, Any}}}})
    precompile(Tuple{Type{Base.Dict{Symbol, Char}}, Tuple{Base.Pair{Symbol, Char}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, Char}}})
    precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
    precompile(Tuple{Type{Base.Dict{Int64, Int64}}, Base.Iterators.Zip2{Array{Int64, 1}, Base.UnitRange{Int64}}})
end
