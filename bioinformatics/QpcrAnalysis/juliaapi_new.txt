===================================================================================
Here are the REST APIs using HTTP GET
===================================================================================
experiments/:experiment_id/standard_curve

[{"well": [{"target": 1, "cq": xxx, "quantity":{m:1.111, b:-10}}, 
	   {"target": 2, "cq":xxx, "quantity":{m:1.111, b:-10}}]
 },
 {"well": [{"target": 3, "cq": xxx, "quantity":{m:1.111, b:-10}}, 
	   {"target": 4, "cq":xxx, "quantity":{m:1.456, b:12}}]
 },
 {"well": [{"target": 1, "cq": xxx, "quantity":{m:1.111, b:-10}}, 
	   {"target": 2, "cq":xxx, "quantity":{m:3, b:-12}}]
 },
 {"well": [{}, {}]}
]

output:

{
  {"targets":[{"target_id":1, "slope":xx, "offset":xx, "efficiency":1.02, "r2":xx}, 
	      {"target_id":2, "slope":xx, "offset":xx, "efficiency":0.98, "r2":xx}, 
	      {"target_id":3, "error":“xxxxx”},{"target":4, "error":“xxxxx”}
	     ]}
}

********************************************************************************
experiments/:experiment_id/amplification

request body:
{
    "experiment_id": xx,
    "step_id/ramp_id": xx,
    "min_reliable_cyc": 5,
    "calibration_info": {
        "water": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_1": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_2": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        }
    },
    "baseline_cyc_bounds": [],
	"baseline_method": "sigmoid" (auto) or "linear" or "median"
    "cq_method": "Cy0",
    "min_fluomax": 4356,
    "min_D1max": 472,
    "min_D2max": 41,
    “raw_data”: {
	“fluorescence_value”:[],
	“well_num”:[],
	“cycle_num”:[],
	“channel”:[]
    }
}

Calibration (Water, channel_1, channel_2) data comes from the following sql query:

SELECT fluorescence_value, well_num, channel
    FROM fluorescence_data
    WHERE experiment_id = $calib_id AND step_id = $step_id
    ORDER BY channel, well_num
;

channel_2 will be NULL for single channel:
    "calibration_info": {
        "water": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  NULL]
        },
        "channel_1": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  NULL]
        },
        "channel_2": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  NULL]
        }
    },



Raw Data comes from the following sql query:

SELECT fluorescence_value, well_num, cycle_num, channel
    FROM fluorescence_data
    WHERE experiment_id = $exp_id AND step_id = $step_id
	ORDER BY channel, well_num, cycle_num
;

success response body:
{
    "rbbs_ary3": [ # after deconvolution (if dual channel) and adjusting well-to-well variation, before baseline subtraction
        [
            [channel_1__well_01__cycle_01, channel_1__well_01__cycle_02, ... channel_1__well_01__cycle_40],
            [channel_1__well_02__cycle_01, channel_1__well_02__cycle_02, ... channel_1__well_02__cycle_40],
            ...
            [channel_1__well_16__cycle_01, channel_1__well_16__cycle_02, ... channel_1__well_16__cycle_40]
        ], # the only element if single-channel
        [
            [channel_2__well_01__cycle_01, channel_2__well_01__cycle_02, ... channel_2__well_01__cycle_40],
            [channel_2__well_02__cycle_01, channel_2__well_02__cycle_02, ... channel_2__well_02__cycle_40],
            ...
            [channel_2__well_16__cycle_01, channel_2__well_16__cycle_02, ... channel_2__well_16__cycle_40]
        ] # only exist if dual-channel
    ],

    "blsub_fluos": [same_format_as_rbbs_ary3],
    
    "dr1_pred": [same_format_as_rbbs_ary3], #first derivative of the amp curve

    "dr2_pred": [same_format_as_rbbs_ary3], #second derivative of the amp curve

    "cq": [
        [channel_1__well_01, channel_1__well_02, ... channel_1__well_16], # the only element if single-channel
        [channel_2__well_01, channel_2__well_02, ... channel_2__well_16] # only exist if dual-channel
    ],
    
    "d0": [same_format_as_cq], # starting quantity from absolute quantification
    
    "ct_fluos": [], # fluorescence threshold if Ct method is used: [channel_1] for single channel, [channel_1, channel_2] for dual channel, [] empty for automatic detection from data
    
    "assignments_adj_labels_dict": { # current data categories are: "rbbs_ary3", "blsub_fluos", "d0", "cq"
        "data_category_1": [well_01, well_02, ... well_16], 
        "data_category_2": [well_01, well_02, ... well_16], 
        ...
    }
}

error response body:
{
    "error": "xxxx"
}

*************************************************************************************
experiments/:experiment_id/meltcurve

request body:
{
    "experiment_id": 2,
    "stage_id": 5,
    "calibration_info": {
        "water": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_1": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_2": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        }
    },
    "channel_nums": [1] # [1] for single channel, [1,2] for dual channel, etc.
    "qt_prob": 0.64,
    "max_normd_qtv": 0.8,
    "top_N": 4 # number of Tm peaks to report
    “raw_data”: {
	“fluorescence_value”:[],
	“temperature”:[],
	“well_num”:[],
	“channel”:[]
    }
}


Calibration (Water, channel_1, channel_2) data comes from the following sql query:

SELECT fluorescence_value, well_num, channel
    FROM fluorescence_data
    WHERE experiment_id = $calib_id AND step_id = $step_id
    ORDER BY channel, well_num
;

Raw Data comes from the following sql query:

SELECT fluorescence_value, temperature, well_num, channel
    FROM melt_curve_data
    WHERE
        experiment_id = $exp_id AND
        stage_id = $stage_id
	ORDER BY channel, well_num
;

success response body:
{
    "melt_curve_data": [ # each *__matrix is [[temperature_1, temperature_2 ...], [fluo_1, fluo_2, ...], [derivative_1, derivative_2 ...]]
        [channel_1__well_01__matrix, channel_1__well_02__matrix, ... channel_1__well_16__matrix], # the only element if single-channel
        [channel_2__well_01__matrix, channel_2__well_02__matrix, ... channel_2__well_16__matrix] # only exist if dual-channel
    ],
    "melt_curve_analysis": [ # each *__matrix is [[Tm_1, Tm_2 ...], [area_1, area_2, ...]]
        [channel_1__well_01__matrix, channel_1__well_02__matrix, ... channel_1__well_16__matrix], # the only element if single-channel
        [channel_2__well_01__matrix, channel_2__well_02__matrix, ... channel_2__well_16__matrix] # only exist if dual-channel
    ]
}

error response body:
{
    "error": "xxxx"
}

*************************************************************************************
system/loadscript?script=path%2Fto%2Fanalyze.jl

success response body:
{
    "script": "path/to/analyze.jl"
}

error response body:
{
    "error": "xxxx"
}

*************************************************************************************
experiments/:experiment_id/optical_cal

request body:
{
    "calibration_info": {
        "water": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_1": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_2": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        }
    }
}

success response body (optical_cal):
{"valid": true}
or
{"valid": false, "error_message": "xxxx"}

*************************************************************************************
experiments/:experiment_id/thermal_performance_diagnostic

request body:
{
  “lid_temp”: [],
  “heat_block_zone_1_temp”: [],
  “heat_block_zone_2_temp”: [],
  “elapsed_time”, [],
  “cycle_num”: [],
}

MySQL query it is used:
SELECT *
    FROM temperature_logs
    WHERE experiment_id = $exp_id
    ORDER BY id
;

success response body (thermal_performance_diagnostic):
{
    "Heating":  {
        "AvgRampRate":[5.3743,true],
        "TotalTime":[8001,false],
        "MaxBlockDeltaT":[1.27,true]
    },
    "Cooling": {
        "AvgRampRate":[0,false],
        "TotalTime":[9000,false],
        "MaxBlockDeltaT":[0.94,true]
    },
    "Lid": {
        "HeatingRate":[1.3031,true],
        "TotalTime":[32999,false]}
    },
    "valid":true
}

*************************************************************************************
experiments/:experiment_id/thermal_consistency

request body:
{
  “raw_data”: {
	“fluorescence_value”:[],
	“temperature”:[],
	“well_num”:[],
	“channel”:[]
  },
  
  "calibration_info": {
        "water": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_1": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        },
        "channel_2": {
	    “fluorescence_value”:[[channel_1__well_01, channel_1__well_02, …, channel_1__well_16],
				  [channel_2__well_01, channel_2__well_02, …, channel_2__well_16]]
        }
  }
}

MySQL query it is used:

SELECT fluorescence_value, temperature, well_num, channel
    FROM melt_curve_data
    WHERE
        experiment_id = $exp_id AND
        stage_id = $stage_id
	ORDER BY channel, well_num
;

success response body (thermal_consistency):
{
    "tm_check": [
        {
            "Tm":[79.0773,true],
            "Area":1361.5005
        },
        {
            "Tm":[78.5635,true],
            "Area":1763.7998
        },
        {
            "Tm":[78.4396,true],
            "Area":1434.3995
        },
        {
            "Tm":[78.2172,true],
            "Area":1672.9787
        },
        {
            "Tm":[77.8384,true],
            "Area":639.2474
        },
        {
            "Tm":[78.3816,true],
            "Area":1076.2143
        },
        {
            "Tm":[78.6829,true],
            "Area":895.6206
        },
        {
            "Tm":[78.6403,true],
            "Area":366.6082
        },
        {
            "Tm":[78.0791,true],
            "Area":255.8169
        },
        {
            "Tm":[77.5054,true],
            "Area":193.9588
        },
        {
            "Tm":[78.0182,true],
            "Area":1114.7039
        },
        {
            "Tm":[78.171,true],
            "Area":1324.3671
        },
        {
            "Tm":[78.1117,true],
            "Area":1219.4364
        },
        {
            "Tm":[77.8815,true],
            "Area":499.9462
        },
        {
            "Tm":[78.3167,true],
            "Area":1097.0781
        },
        {
            "Tm":[79.2487,true],
            "Area":1318.3026
        }
    ],
    "delta_Tm":[1.7434,true],
    "valid":true
}

*************************************************************************************
experiments/:experiment_id/optical_test_single_channel

request body:
{
  “baseline”: {
	“fluorescence_value”:[well_01, well_02, …, well_16]
  },

  “excitation”: {
	“fluorescence_value”:[well_01, well_02, …, well_16]
  }
}

MySQL query it is used:
SELECT fluorescence_value, well_num, cycle_num
    FROM fluorescence_data
    WHERE experiment_id = $exp_id AND step_id = $step_id
    ORDER BY well_num, cycle_num
;


success response body (optical_test_single_channel):
{"optical_data":[
    {
        "baseline":1704,
        "excitation":84756,
        "valid":true
    },{
        "baseline":1844,
        "excitation":76751,
        "valid":true
    },{
        "baseline":1729,
        "excitation":75655,
        "valid":true
    },{
        "baseline":1695,
        "excitation":32242,
        "valid":true
    },{
        "baseline":1683,
        "excitation":71588,
        "valid":true
    },{
        "baseline":1837,
        "excitation":96184,
        "valid":true
    },{
        "baseline":1696,
        "excitation":90374,
        "valid":true
    },{
        "baseline":1848,
        "excitation":88519,
        "valid":true
    },{
        "baseline":1675,
        "excitation":105414,
        "valid":true
    },{
        "baseline":1731,
        "excitation":90122,
        "valid":true
    },{
        "baseline":1718,
        "excitation":94174,
        "valid":true
    },{
        "baseline":1803,
        "excitation":110185,
        "valid":true
    },{
        "baseline":1797,
        "excitation":92436,
        "valid":true
    },{
        "baseline":1773,
        "excitation":35866,
        "valid":true
    },{
        "baseline":1789,
        "excitation":101293,
        "valid":true
    },{
        "baseline":1864,
        "excitation":98680,
        "valid":true
    }
 ],
 "valid":true
}

*************************************************************************************
experiments/:experiment_id/optical_test_dual_channel

request body:
{
  “baseline”: {
	“fluorescence_value”:[well_01, well_02, …, well_16]
  },

  “water”: {
	“fluorescence_value”:[well_01, well_02, …, well_16]
  },

  “FAM”: {
	“fluorescence_value”:[well_01, well_02, …, well_16]
  },
  
  “HEX”: {
	“fluorescence_value”:[well_01, well_02, …, well_16]
  }
}

MySQL query it is used:
SELECT fluorescence_value, well_num, cycle_num
    FROM fluorescence_data
    WHERE experiment_id = $exp_id AND step_id = $step_id
    ORDER BY well_num, cycle_num
;

success response body (optical_test_dual_channel):
{
    "optical_data":[
        {
            "baseline":[[7373,true],[1790,true]],
            "FAM":[[56997,false],[25204,false]],
            "HEX":[[10827,false],[24547,false]],
            "water":[[7373,true],[1790,true]]
        },
        {
            "baseline":[[16590,true],[1908,true]],
            "FAM":[[113931,false],[44197,false]],
            "HEX":[[21176,false],[43755,false]],
            "water":[[16590,true],[1908,true]]
        },
        {
            "baseline":[[10622,true],[1945,true]],
             "FAM":[[97683,false],[40424,false]],
             "HEX":[[14754,false],[39349,false]],
            "water":[[10622,true],[1945,true]]
        },
        {
            "baseline":[[3194,true],[1692,true]],
            "FAM":[[15820,false],[7494,false]],
            "HEX":[[4289,false],[7489,false]],
            "water":[[3194,true],[1692,true]]
        },
        {
            "baseline":[[7210,true],[1623,true]],
            "FAM":[[56260,false],[22039,false]],
            "HEX":[[10460,false],[22624,false]],
            "water":[[7210,true],[1623,true]]
        },
        {
            "baseline":[[9309,true],[1958,true]],
            "FAM":[[75858,false],[30542,false]],
            "HEX":[[14908,false],[31364,false]],
            "water":[[9309,true],[1958,true]]
        },
        {
            "baseline":[[9923,true],[1804,true]],
            "FAM":[[76166,false],[32064,false]],
            "HEX":[[19045,false],[32810,false]],
            "water":[[9923,true],[1804,true]]
        },
        {
            "baseline":[[17224,true],[2063,true]],
            "FAM":[[110970,false],[39879,false]],
            "HEX":[[33050,false],[41685,false]],
            "water":[[17224,true],[2063,true]]
        },
        {
            "baseline":[[6116,true],[2098,true]],
            "FAM":[[75856,false],[35634,false]],
            "HEX":[[9767,false],[33825,false]],
            "water":[[6116,true],[2098,true]]
        },
        {
            "baseline":[[11647,true],[1967,true]],
            "FAM":[[118257,false],[43666,false]],
            "HEX":[[19407,false],[42969,false]],
            "water":[[11647,true],[1967,true]]
        },
        {
            "baseline":[[10132,true],[2558,true]],
            "FAM":[[80505,false],[35494,false]],
            "HEX":[[14507,false],[34011,false]],
            "water":[[10132,true],[2558,true]]
        },
        {
            "baseline":[[7019,true],[2757,true]],
            "FAM":[[66396,false],[25384,false]],
            "HEX":[[10391,false],[24408,false]],
            "water":[[7019,true],[2757,true]]
        },
        {
            "baseline":[[12806,true],[1900,true]],
            "FAM":[[117630,false],[45047,false]],
            "HEX":[[21790,false],[42365,false]],
            "water":[[12806,true],[1900,true]]
        },
        {
            "baseline":[[9926,true],[1843,true]],
            "FAM":[[70441,false],[24076,false]],
            "HEX":[[17115,false],[22416,false]],
            "water":[[9926,true],[1843,true]]
        },
        {
            "baseline":[[6189,true],[1822,true]],
            "FAM":[[49142,false],[24322,false]],
            "HEX":[[11908,false],[22722,false]],
            "water":[[6189,true],[1822,true]]
        },
        {
            "baseline":[[10674,true],[2133,true]],
            "FAM":[[106136,false],[47080,false]],
            "HEX":[[22462,false],[42102,false]],
            "water":[[10674,true],[2133,true]]
        }
    ],
    
    "Ch1:Ch2":{
        "FAM":[1.406863,-0.425347,1.633333,4.803922,-9.868056,-0.235926,0.594856,-4.9,-3.811111,6.186869,1.020833,0.340278,0.704023,-0.888889,-0.106456,1.696728],
        "HEX":[0.870219,0.629768,3.175926,3.296024,1.361111,-0.297743,0.506897,-1.341241,-7.712963,0.291667,1.841503,0.680556,-1.681373,-1.852004,-0.397863,2.807292]
    }

	"valid":true
}

error response body:
{
    "error": "xxxx"
}
