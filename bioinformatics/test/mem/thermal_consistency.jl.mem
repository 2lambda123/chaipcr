        - # thermal_consistency.jl
        - # 72C thermal consistency test
        - 
        - import Dierckx: Spline1D, derivative
        - 
        - function act(
        -     ::ThermalConsistency,
        - 
        -     # remove MySql dependency
        -     #
        -     # db_conn ::MySQL.MySQLHandle,
        -     # exp_id ::Integer,
        -     # stage_id ::Integer,
        -     # calib_info ::Union{Integer,OrderedDict};
        - 
        -     # new >>
        -     req_dict ::Associative;
        -     out_format ::String ="pre_json",
        -     verbose ::Bool =false,
        -     # << new
        -     
        -     # start: arguments that might be passed by upstream code
        -     well_nums ::AbstractVector =[],
        -     auto_span_smooth ::Bool =false,
        -     span_smooth_default ::Real =0.015,
        -     span_smooth_factor ::Real =7.2,
        -     # end: arguments that might be passed by upstream code
        - 
        -     dye_in ::String ="FAM",
        -     dyes_2bfild ::AbstractVector =[],
        -     dcv ::Bool =true, # logical, whether to perform multi-channel deconvolution
        - 	max_tmprtr ::Real =1000, # maximum temperature to analyze
        - )
      576     keys_req_dict = keys(req_dict)
        0     kwdict_mc_tm_pw = OrderedDict{Symbol,Any}(
        -         :qt_prob_flTm => qt_prob_flTm,
        -         :normd_qtv_ub => normd_qtv_ub
        -     ) 
        0     if "qt_prob" in keys_req_dict
        0         kwdict_mc_tm_pw[:qt_prob_flTm] = req_dict["qt_prob"]
        -     end
        0     if "max_normd_qtv" in keys_req_dict
        0         kwdict_mc_tm_pw[:normd_qtv_ub] = req_dict["max_normd_qtv"]
        -     end
      192     for key in ["top_N"]
        0         if key in keys_req_dict
        0             kwdict_mc_tm_pw[Base.parse(key)] = req_dict[key]
        -         end
        -     end
        - 
        -     # process data as melting curve
      608     mc_w72c = process_mc(
        - 
        -         # remove MySql dependency
        -         #
        -         # db_conn,
        -         # exp_id,
        -         # stage_id,
        -         # calib_info;
        - 
        -         # new >>
        -         req_dict["raw_data"],
        -         req_dict["calibration_info"];
        -         # << new
        - 
        -         well_nums = well_nums,
        -         auto_span_smooth = auto_span_smooth,
        -         span_smooth_default = span_smooth_default,
        -         span_smooth_factor = span_smooth_factor,
        -         dye_in = dye_in,
        -         dyes_2bfild = dyes_2bfild,
        -         dcv = dcv,
        -         max_tmprtr = max_tmprtr,
        -         out_format = "full",
        -         verbose = verbose,
        -         kwdict_mc_tm_pw = kwdict_mc_tm_pw
        -     )
        - 
        -     # process the data from only one channel
        0     channel_proc = 1
      480     channel_proc_i = find(mc_w72c.channel_nums) do channel_num
        -         channel_num == channel_proc
        -     end[1] # do channel_num
        - 
      448     mc_tm = map(
        -         mc_bywl -> mc_bywl.Ta_fltd,
        -         mc_w72c.mc_bychwl[:, channel_proc_i]
        -     )
        - 
      160     tm_check_vec = []
        0     min_Tm = max_tmprtr + 1
        0     max_Tm = 0
        - 
        0     for Ta in mc_tm
        0         if size(Ta)[1] == 0
        0             tm_check_1w = TmCheck1w((NaN, false), NaN)
        -         else
        0             top1_Tm = Ta[1,1]
     1024             if top1_Tm < min_Tm
        0                 min_Tm = top1_Tm
        -             end
      992             if top1_Tm > max_Tm
        0                 max_Tm = top1_Tm
        -             end
     2560             tm_check_1w = TmCheck1w(
        -                 (top1_Tm, MIN_TM_VAL <= top1_Tm <= MAX_TM_VAL),
        -                 Ta[1,2]
        -             )
        -         end # if size
        0         push!(tm_check_vec, tm_check_1w)
        -     end # for
        - 
       96     delta_Tm_val = max_Tm - min_Tm
        - 
        0     if (out_format=="full")
        0         return ThermalConsistencyOutput(
        -             tm_check_vec,
        -             (delta_Tm_val, delta_Tm_val <= MAX_DELTA_TM_VAL),
        -             true
        -         )
        -     else
       96         mc_w72c_out = OrderedDict(
        -             "tm_check" => tm_check_vec,
        -             "delta_Tm" => (round(delta_Tm_val, JSON_DIGITS), delta_Tm_val <= MAX_DELTA_TM_VAL),
        -             "valid" => true
        -         )
        0         if (out_format=="json")
        0             return JSON.json(mc_w72c_out)
        -         end
        -     end
        0     return mc_w72c_out
        - end
        - 
        - 
        - 
        - 
        - #
        - 
