        - ## memory_allocation.jl
        - #
        - ## Author: Tom Price
        - ## Date: January 2019
        - #
        - ## Analyse memory usage in dispatch calls
        - ## See https://docs.julialang.org/en/v0.6/manual/profile/#Memory-allocation-analysis-1
        - ## Usage: julia --track-allocation=user memory_allocation.jl
        - 
        - 
        - # performance is better with dispatch calls
        - # in a function rather than global scope
        - function test_memory_allocation()
        -     # load dispatch calls & associated data
        0     test_functions = BSON.load("../test/data/dispatch_tests.bson")
        -     #
        -     # perform calls to force compilation
        0     check = test_dispatch(test_functions)
        0     println(check)
        -     #
        -     # all test results must be positive, or else an error will be raised
        0     @assert all(values(check))
        -     #
        -     # reset allocation counters
        0     Profile.clear_malloc_data()
        -     #
        -     # execute dispatch calls a second time
        0     check = test_dispatch(test_functions)
        - end
        - 
        - 
        - # main code >>
        - autorun = joinpath(Base.JULIA_HOME,Base.SYSCONFDIR,"julia/juliarc.jl")
        - # look for magic number
        - if !isfile(autorun) || all(map(
        -     x -> match(r"6004dbc584427ce1297c8e89e547057e",x)==nothing,
        -     readlines(autorun)))
        -     # if not found, run these three commands
        -     # which have not been included in the startup script:
        -     cd("/home/vagrant/chaipcr/bioinformatics/QpcrAnalysis")
        -     push!(LOAD_PATH,pwd())
        -     using QpcrAnalysis
        - end
        - include("../test/test_functions.jl") # need test_dispatch()
        - import DataStructures: OrderedDict
        - import BSON: load
        - test_memory_allocation()
        - # << main code
        - 
        - 
        - 
        - #
        - 
