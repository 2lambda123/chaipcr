        - # verify_response.jl
        - #
        - # Author: Tom Price
        - # Date: Dec 2018
        - #
        - # This Julia script tests the JSON data structures 
        - # that are returned in the body of responses to GET requests
        - # 
        - # *     based on documentation of REST API from juliaapi_new.txt
        - #
        - # *     Julia listens on http://localhost:8081 via HttpServer.jl and dispatch.jl
        - #       and sends responses to the Rails app on http://localhost:3000
        - #
        - # *     the relevant controller in the Rails app is
        - #       chaipcr/web/app/controllers/experiments_controller.rb
        - #
        - # *     currently calls are POST-ed to
        - #       http://127.0.0.1:8081/experiments/#{experiment.id}/standard_curve
        - #       http://127.0.0.1:8081/experiments/#{experiment.id}/amplification
        - #       http://127.0.0.1:8081/experiments/#{experiment.id}/meltcurve
        - #       http://127.0.0.1:8081/experiments/#{experiment.id}/analyze
        - 
        - import JSON, DataStructures.OrderedDict
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/standard_curve
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::StandardCurve,
        -     response ::Any
        - )
       16     facts() do
       16         context("Verifying response body") do
      112             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
        0                 @fact (response["valid"]) --> true
        0                 @fact (haskey(response,"targets")) --> true
        -                 # @fact (haskey(response,"groups")) --> true # do not verify groups
        0                 array=response["targets"]
        0                 @fact (isa(array,Vector)) --> true
      544                 for i in range(1,length(array))
        0                     dict=array[i]
        0                     @fact (isa(dict,OrderedDict)) --> true
        0                     @fact (haskey(dict,"target_id")) --> true
        0                     if (length(dict)==2)
        0                         @fact (haskey(dict,"error")) --> true
        0                         @fact (isa(dict["error"],String)) --> true
        -                     else
        0                         @fact (length(dict)) --> 5
        0                         @fact (haskey(dict,"slope")) --> true
        0                         @fact (isa(dict["slope"],Number)) --> true
        0                         @fact (haskey(dict,"offset")) --> true
        0                         @fact (isa(dict["offset"],Number)) --> true
        0                         @fact (haskey(dict,"efficiency")) --> true
        0                         @fact (isa(dict["efficiency"],Number)) --> true
        0                         @fact (haskey(dict,"r2")) --> true
        0                         @fact (isa(dict["r2"],Number)) --> true
        -                     end
        -                 end
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/amplification
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::Amplification,
        -     response ::Any
        - )
       32     facts() do
       32         context("Verifying response body") do
      480             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
        -                 # @fact (length(response)) --> 8
        0                 @fact (response["valid"]) --> true
      224                 measurements=["rbbs_ary3","blsub_fluos","dr1_pred","dr2_pred"]
        0                 n_channels=length(response["rbbs_ary3"])
        0                 @fact (n_channels in QpcrAnalysis.CHANNELS) --> true
        0                 n_wells=length(response["rbbs_ary3"][1])
        0                 n_steps=length(response["rbbs_ary3"][1][1])
        0                 n_pred=length(response["dr1_pred"][1][1])
      512                 for m in measurements
        0                     @fact (haskey(response,m)) --> true
        0                     @fact (isa(response[m],Vector)) --> true
        0                     @fact (length(response[m])) --> n_channels
     1216                     for c in range(1,n_channels)
        0                         @fact (isa(response[m][c],Vector)) --> true
        0                         @fact (length(response[m][c])) --> n_wells
    18816                         for i in range(1,n_wells)
        0                             @fact (isa(response[m][c][i],Vector)) --> true
        0                             if (m=="rbbs_ary3" || m=="blsub_fluos")
        0                                 @fact (length(response[m][c][i])) --> n_steps
   248832                                 for j in range(1,n_steps)
        0                                     @fact (isa(response[m][c][i][j],Number) ||
        -                                         (response[m][c][i][j]==nothing)) --> true
        -                                 end
        -                             else # dr1_pred, dr2_pred
        0                                 @fact (length(response[m][c][i])) --> n_pred
   623616                                 for j in range(1,n_pred)
        0                                     @fact (isa(response[m][c][i][j],Number) ||
        -                                         (response[m][c][i][j]==nothing)) --> true
        -                                 end
        -                             end
        -                         end
        -                     end
        -                 end
      192                 statistics=["cq","d0"]
      256                 for s in statistics
        0                     @fact (haskey(response,s)) --> true
        0                     @fact (isa(response[s],Vector)) --> true
        0                     @fact (length(response[s])) --> n_channels
      608                     for c in range(1,n_channels)
        0                         @fact (isa(response[s][c],Vector)) --> true
        0                         @fact (length(response[s][c])) --> n_wells
     6336                         for i in range(1,n_wells)
        0                             @fact (isa(response[s][c][i],Number) ||
        -                                 response[s][c][i]==nothing) --> true
        -                         end
        -                     end
        -                 end
        0                 @fact (haskey(response,"ct_fluos")) --> true
        0                 @fact (isa(response["ct_fluos"],Vector)) --> true
        0                 @fact (length(response["ct_fluos"])) --> n_channels
      256                 for c in range(1,n_channels)
        0                     @fact (isa(response["ct_fluos"][c],Number) ||
        -                         response["ct_fluos"][c]==nothing) --> true
        -                 end
      224                 variables=["rbbs_ary3","blsub_fluos","cq","d0"]
        0                 @fact (haskey(response,"assignments_adj_labels_dict")) --> true
        0                 @fact (isa(response["assignments_adj_labels_dict"],OrderedDict)) --> true
        -                 # @fact (length(response["assignments_adj_labels_dict"])) --> n_genotypes
      384                 for g in range(1,length(response["assignments_adj_labels_dict"]))
        0                     @fact (isa(response["assignments_adj_labels_dict"][variables[g]],Vector)) --> true
        0                     @fact (length(response["assignments_adj_labels_dict"][variables[g]])) --> n_wells
     4224                     for i in range(1,n_wells)
        0                         @fact (isa(response["assignments_adj_labels_dict"][variables[g]][i],String)) --> true
        -                     end
        -                 end
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/meltcurve
        - #
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::MeltCurve,
        -     response ::Any
        - )
       32     facts() do
       32         context("Verifying response body") do
      192             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
        0                 @fact (response["valid"]) --> true
      192                 variables=["melt_curve_data","melt_curve_analysis"]
        -                 # @fact length(response) --> length(variables)
        0                 n_channels=length(response["melt_curve_data"])
        0                 n_wells=length(response["melt_curve_data"][1])
        0                 n_grid=length(response["melt_curve_data"][1][1][1])
      320                 for v in variables
        0                     n = (v=="melt_curve_data") ? 3 : 2
        0                     @fact (haskey(response,v)) --> true
        0                     @fact (isa(response[v],Vector)) --> true
        0                     @fact (length(response[v])) --> n_channels
      512                     for i in range(1,n_channels) # channel
        0                         @fact (isa(response[v][i],Vector)) --> true
     6336                         for j in range(1,n_wells) # well
        0                             @fact (length(response[v][i][j])) --> n
    22272                             for k in range(1,n) # temperature, fluorescence, slope / Tm, area
        0                                 if (v=="melt_curve_data")
        0                                     @fact abs(length(response[v][i][j][k]) - n_grid) --> less_than_or_equal(1)
        -                                 end
        0                                 @fact (isa(response[v][i][j][k],Vector)) --> true
  1828608                                 for m in range(1,length(response[v][i][j][k])) # prediction locations / temp maxima
        0                                     @fact (isa(response[v][i][j][k][m],Number)) --> true
        -                                 end
        -                             end
        -                         end
        -                     end
        -                 end
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: system/loadscript?script=path%2Fto%2Fanalyze.jl
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::LoadScript,
        -     response ::Any
        - )
        -     facts() do
        -         context("Verifying response body") do
        -             @fact (isa(response,OrderedDict)) --> true
        -             @fact (haskey(response,"valid")) --> true
        -             if (haskey(response,"error"))
        -                 @fact (length(response)) --> 2
        -                 @fact (isa(response["error"],String)) --> true
        -                 @fact (response["valid"]) --> false
        -             else
        -                 @fact (response["valid"]) --> true
        -                 @fact (haskey(response,"script")) --> true
        -                 @fact (isa(response["script"],String)) --> true
        -             end
        -         end
        -     end
        -     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/thermal_performance_diagnostic
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::ThermalPerformanceDiagnostic,
        -     response ::Any
        - )
       32     facts() do
       32         context("Verifying response body") do
     1728             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
        0                 @fact (length(response)) --> 4
        0                 @fact (response["valid"]) --> true
        0                 @fact (haskey(response,"Heating")) --> true
        0                 @fact (haskey(response,"Cooling")) --> true
        0                 @fact (haskey(response,"Lid")) --> true
        0                 @fact (isa(response["Heating"],OrderedDict)) --> true
        0                 @fact (isa(response["Cooling"],OrderedDict)) --> true
        0                 @fact (isa(response["Lid"],OrderedDict)) --> true
        0                 @fact (length(response["Heating"])) --> 3
        0                 @fact (length(response["Cooling"])) --> 3
        0                 @fact (length(response["Lid"])) --> 2
        0                 @fact (haskey(response["Heating"],"AvgRampRate")) --> true
        0                 @fact (haskey(response["Cooling"],"AvgRampRate")) --> true
        0                 @fact (haskey(response["Lid"],"HeatingRate")) --> true
        0                 @fact (haskey(response["Heating"],"TotalTime")) --> true
        0                 @fact (haskey(response["Cooling"],"TotalTime")) --> true
        0                 @fact (haskey(response["Lid"],"TotalTime")) --> true
        0                 @fact (haskey(response["Heating"],"MaxBlockDeltaT")) --> true
        0                 @fact (haskey(response["Cooling"],"MaxBlockDeltaT")) --> true
        0                 @fact (isa(response["Heating"]["AvgRampRate"],Vector)) --> true
        0                 @fact (isa(response["Cooling"]["AvgRampRate"],Vector)) --> true
        0                 @fact (isa(response["Lid"]["HeatingRate"],Vector)) --> true
        0                 @fact (isa(response["Heating"]["TotalTime"],Vector)) --> true
        0                 @fact (isa(response["Cooling"]["TotalTime"],Vector)) --> true
        0                 @fact (isa(response["Lid"]["TotalTime"],Vector)) --> true
        0                 @fact (isa(response["Heating"]["MaxBlockDeltaT"],Vector)) --> true
        0                 @fact (isa(response["Cooling"]["MaxBlockDeltaT"],Vector)) --> true
        0                 @fact (length(response["Heating"]["AvgRampRate"])) --> 2
        0                 @fact (length(response["Cooling"]["AvgRampRate"])) --> 2
        0                 @fact (length(response["Lid"]["HeatingRate"])) --> 2
        0                 @fact (length(response["Heating"]["TotalTime"])) --> 2
        0                 @fact (length(response["Cooling"]["TotalTime"])) --> 2
        0                 @fact (length(response["Lid"]["TotalTime"])) --> 2
        0                 @fact (length(response["Heating"]["MaxBlockDeltaT"])) --> 2
        0                 @fact (length(response["Cooling"]["MaxBlockDeltaT"])) --> 2
        0                 @fact (isa(response["Heating"]["AvgRampRate"][1],Number)) --> true
        0                 @fact (isa(response["Cooling"]["AvgRampRate"][1],Number)) --> true
        0                 @fact (isa(response["Lid"]["HeatingRate"][1],Number)) --> true
        0                 @fact (isa(response["Heating"]["TotalTime"][1],Number)) --> true
        0                 @fact (isa(response["Cooling"]["TotalTime"][1],Number)) --> true
        0                 @fact (isa(response["Lid"]["TotalTime"][1],Number)) --> true
        0                 @fact (isa(response["Heating"]["MaxBlockDeltaT"][1],Number)) --> true
        0                 @fact (isa(response["Cooling"]["MaxBlockDeltaT"][1],Number)) --> true
        0                 @fact (isa(response["Heating"]["AvgRampRate"][2],Bool)) --> true
        0                 @fact (isa(response["Cooling"]["AvgRampRate"][2],Bool)) --> true
        0                 @fact (isa(response["Lid"]["HeatingRate"][2],Bool)) --> true
        0                 @fact (isa(response["Heating"]["TotalTime"][2],Bool)) --> true
        0                 @fact (isa(response["Cooling"]["TotalTime"][2],Bool)) --> true
        0                 @fact (isa(response["Lid"]["TotalTime"][2],Bool)) --> true
        0                 @fact (isa(response["Heating"]["MaxBlockDeltaT"][2],Bool)) --> true
        0                 @fact (isa(response["Cooling"]["MaxBlockDeltaT"][2],Bool)) --> true
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/thermal_consistency
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::ThermalConsistency,
        -     response ::Any
        - )
       32     facts() do
       32         context("Verifying response body") do
      384             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
        0                 @fact (length(response)) --> 3
        0                 @fact (response["valid"]) --> true
        0                 @fact (haskey(response,"tm_check")) --> true
        0                 @fact (haskey(response,"delta_Tm")) --> true
        0                 @fact (isa(response["tm_check"],Vector)) --> true
     6208                 for i in range(1,length(response["tm_check"]))
        0                     @fact (isa(response["tm_check"][i],OrderedDict)) --> true
        0                     @fact (length(response["tm_check"][i])) --> 2
        0                     @fact (haskey(response["tm_check"][i],"Tm")) --> true
        0                     @fact (haskey(response["tm_check"][i],"area")) --> true
        0                     @fact (isa(response["tm_check"][i]["Tm"],Vector)) --> true
        0                     @fact (length(response["tm_check"][i]["Tm"])) --> 2
        0                     @fact (isa(response["tm_check"][i]["Tm"][1],Number)) --> true
        0                     @fact (isa(response["tm_check"][i]["Tm"][2],Bool)) --> true
        0                     @fact (isa(response["tm_check"][i]["area"],Number)) --> true
        -                 end
        0                 @fact (isa(response["delta_Tm"],Vector)) --> true
        0                 @fact (length(response["delta_Tm"])) --> 2
        0                 @fact (isa(response["delta_Tm"][1],Number)) --> true
        0                 @fact (isa(response["delta_Tm"][2],Bool)) --> true
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/optical_cal
        - #
        - # ********************************************************************************
        - 
        - # success response body (optical_cal):
        - 
        - function verify_response(
        -     ::OpticalCal,
        -     response ::Any
        - )
       32     facts() do
       32         context("Verifying response body") do
      160             @fact (isa(response,OrderedDict)) --> true
        0             if (response["valid"]==true)
        0                 @fact (length(response)) --> 1
        -             else
        0                 @fact (response["valid"]) --> false
        0                 @fact (length(response)) --> 2
        0                 @fact (haskey(response,"error")) --> true
        0                 @fact (isa(response["error"],String)) --> true
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/optical_test_single_channel
        - #
        - # ********************************************************************************
        - 
        - function verify_response(
        -     ::OpticalTestSingleChannel,
        -     response ::Any
        - )
       16     facts() do
       16         context("Verifying response body") do
       96             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
        0                 @fact (response["valid"]) --> true
        0                 @fact (haskey(response,"optical_data")) --> true
        0                 @fact (isa(response["optical_data"],Vector)) --> true
      208                 for i in range(1,length(response["optical_data"]))
        0                     @fact (isa(response["optical_data"][i],OrderedDict)) --> true
        0                     @fact (length(response["optical_data"][i])) --> 3
        0                     @fact (haskey(response["optical_data"][i],"baseline")) --> true
        0                     @fact (haskey(response["optical_data"][i],"excitation")) --> true
        0                     @fact (haskey(response["optical_data"][i],"valid")) --> true
        0                     @fact (isa(response["optical_data"][i]["baseline"],Number)) --> true
        0                     @fact (isa(response["optical_data"][i]["excitation"],Number)) --> true
        0                     @fact (isa(response["optical_data"][i]["valid"],Bool)) --> true
        -                 end
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
        - 
        - 
        - 
        - # ********************************************************************************
        - #
        - # call: experiments/:experiment_id/optical_test_dual_channel
        - #
        - # *******************************************************************************
        - 
        - function verify_response(
        -     ::OpticalTestDualChannel,
        -     response ::Any
        - )
       16     facts() do
       16         context("Verifying response body") do
      192             @fact (isa(response,OrderedDict)) --> true
        0             @fact (haskey(response,"valid")) --> true
        0             if (haskey(response,"error"))
        0                 @fact (length(response)) --> 2
        0                 @fact (isa(response["error"],String)) --> true
        0                 @fact (response["valid"]) --> false
        -             else
      112                 signals=["baseline","water","HEX","FAM"]
        0                 @fact (response["valid"]) --> true
        0                 @fact (length(response)) --> 3
        0                 @fact (haskey(response,"optical_data")) --> true
        0                 @fact (isa(response["optical_data"],Vector)) --> true
        0                 n_wells=length(response["optical_data"])
     1312                 for i in range(1,n_wells) # well
        0                     @fact (isa(response["optical_data"][i],OrderedDict)) --> true
        0                     @fact (length(response["optical_data"][i])) --> length(signals)
     6144                     for signal in signals
        0                         @fact (haskey(response["optical_data"][i],signal)) --> true
        0                         @fact (isa(response["optical_data"][i][signal],Vector)) --> true
        0                         @fact (length(response["optical_data"][i][signal])) --> 2
    10240                         for j in range(1,2) # channel
        0                             @fact (isa(response["optical_data"][i][signal][j],Vector)) --> true
        0                             @fact (length(response["optical_data"][i][signal][j])) --> 2
        0                             @fact (isa(response["optical_data"][i][signal][j][1],Number)) --> true
        0                             @fact (isa(response["optical_data"][i][signal][j][2],Bool)) --> true
        -                         end
        -                     end
        -                 end
        0                 @fact (haskey(response,"Ch1:Ch2")) --> true
        0                 @fact (isa(response["Ch1:Ch2"],OrderedDict)) --> true
        0                 @fact (length(response["Ch1:Ch2"])) --> 2
      320                 for signal in signals[3:4]
        0                     @fact (haskey(response["Ch1:Ch2"],signal)) --> true
        0                     @fact (isa(response["Ch1:Ch2"][signal],Vector)) --> true
        0                     @fact (length(response["Ch1:Ch2"][signal])) --> n_wells
     2112                     for i in range(1,n_wells) # well
        0                         @fact (isa(response["Ch1:Ch2"][signal][i],Number) ||
        -                             response["Ch1:Ch2"][signal][i] == nothing) --> true # division by zero: JSON parser converts Inf, -Inf, NaN -> "null"
        -                     end
        -                 end
        -             end
        -         end
        -     end
        0     FactCheck.exitstatus()
        - end
