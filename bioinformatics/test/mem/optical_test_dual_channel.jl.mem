        - # optical_test_dual_channel.jl
        - 
        - import DataStructures.OrderedDict
        - import JSON.json
        - 
        - 
        - function act(
        -     ::OpticalTestDualChannel,
        - 
        -     # remove MySqldependency    
        -     #
        -     # db_conn ::MySQL.MySQLHandle,
        -     # exp_id ::Integer,
        -     # calib_info ::Union{Integer,OrderedDict}; # keys: "baseline", "water", "channel_1", "channel_2". Each value's "calibration_id" value is the same as `exp_id`
        -     # 
        -     # start: arguments that might be passed by upstream code
        -     # well_nums ::AbstractVector =[],
        - 
        -     # new >>
        -     ot_dict ::Associative; # keys: "baseline", "water", "FAM", "HEX"
        -     out_format ::String ="pre_json",
        -     verbose ::Bool =false
        -     # << new
        - )
        -     # remove MySql dependency
        -     #
        -     # fluo_qry_2b = "SELECT step_id, well_num, fluorescence_value, channel
        -     #     FROM fluorescence_data
        -     #     WHERE experiment_id = $exp_id AND cycle_num = 1 AND step_id is not NULL
        -     #     well_constraint
        -     #     ORDER BY well_num, channel
        -     # "
        -     # fluo_data, fluo_well_nums = get_mysql_data_well(
        -     #     well_nums, fluo_qry_2b, db_conn, false
        -     # )
        -     #
        -     # num_wells = length(fluo_well_nums)
        - 
        -     # new >>
        -     # fluo_dict = OrderedDict(map(old_calib_labels) do calib_label # old
      800     fluo_dict = OrderedDict(map(1:length(OLD_CALIB_LABELS)) do calib_label_i
        -     # << new
        - 
        -         OLD_CALIB_LABELS[calib_label_i] => hcat(map(CHANNELS) do channel # use old labels internally
        - 
        -             # remove MySql dependency
        -             #
        -             # fluo_data[:fluorescence_value][
        -             #     (fluo_data[:step_id] .== calib_info[calib_label]["step_id"]) .& (fluo_data[:channel] .== channel)
        -             # ]
        - 
        -             # new >>
     2768             ot_dict[NEW_CALIB_LABELS[calib_label_i]]["fluorescence_value"][channel]
        -             # << new
        - 
        -         end...) # do channel
        -     end) # do calib_label
        - 
        -     # new >>
       32     num_wells = size(fluo_dict["baseline"])[1]
        -     # << new
        - 
      128     bool_dict = OrderedDict("baseline" => fill(true, num_wells, length(CHANNELS)))
        - 
        -     # water test
      240     bool_dict["water"] = hcat(map(CHANNEL_IS) do channel_i
      480         map(fluo_dict["water"][:, channel_i]) do fluo_pw
        -             fluo_pw < WATER_MAX[channel_i] && fluo_pw > WATER_MIN[channel_i]
        -         end # do fluo_pw
        -     end...) # end
        - 
        -     # FAM and HEX SNR test
       32     for calib_label in CALIB_LABELS_FAM_HEX
     2528         bool_dict[calib_label] = vcat(map(1:num_wells) do well_i
     1184             baseline_2chs = fluo_dict["baseline"][well_i, :]
        0             signal_fluo_2chs = fluo_dict[calib_label][well_i, :] .- baseline_2chs
        0             water_fluo_2chs = fluo_dict["water"][well_i, :] .- baseline_2chs
        0             snr_2chs = (signal_fluo_2chs .- water_fluo_2chs) ./ signal_fluo_2chs
      512             transpose(dscrmnts_snr[calib_label](transpose(snr_2chs)))
        -         end...) # do well_i
        -     end # for
        - 
        -     # organize "optical_data"
       64     optical_data = map(1:num_wells) do well_i
        -         OrderedDict(map(1:length(OLD_CALIB_LABELS)) do cl_i
        -             old_calib_label = OLD_CALIB_LABELS[cl_i]
        -             NEW_CALIB_LABELS[cl_i] => map(CHANNEL_IS) do channel_i
    16944                 (fluo_dict[old_calib_label][well_i, channel_i], bool_dict[old_calib_label][well_i, channel_i])
        -             end # do channel_i
        -         end) # do cl_i
        -     end # do well_i
        - 
        -     # FAM and HEX self-calibrated ((signal_of_dye_x_in_channel_k - water_in_channel_k) / (signal_of_target_dye_in_channel_k - water_in_channel_k); x=FAM,HEX; k=1,2) ratio (self_calib_of_dye_x_where_k_equals_1 / self_calib_of_dye_x_where_k_equals_2) test.
        - 
        -     # Note:
        -     # Baseline is not subtracted because it is not part of the calibration procedure.
        - 
        -     # Issues:
        -     # Is it more sensible to calculate target:off-target ratio than channel_1:channel_2?
        -     # Calculation of ratio may fail if water >= signal values, reporting negative or infinite values
        - 
        -     # substract water values from signal values
       16     swd_vec = map(CALIB_LABELS_FAM_HEX) do calib_label
        -         map(CHANNEL_IS) do channel_i
      448             fluo_dict[calib_label][:, channel_i] .- fluo_dict["water"][:, channel_i]
        -         end # do channel_i
        -     end # do calib_label
        - 
        -     # calculate normalization values from data in target channels
      640     swd_normd = map(CHANNEL_IS) do channel_i
        -         swd_target = swd_vec[channel_i][channel_i]
        -         swd_target / mean(swd_target)
        -     end # do channel_i
        - 
        -     # normalize signal data
    11072     self_calib_vec = map(swd_vec) do swd_dye
        -         map(CHANNEL_IS) do channel_i
        -             swd_dye[channel_i] ./ swd_normd[channel_i]
        -         end # do channel_i
        -     end # do swd_dye
        - 
        -     # calculate channel1:channel2 ratios
       16     ch12_ratios = OrderedDict(map(CHANNEL_IS) do channel_i
      176         sc_dye = self_calib_vec[channel_i]
     4000         ["FAM", "HEX"][channel_i] => round.(sc_dye[1] ./ sc_dye[2], JSON_DIGITS)
        -     end) # do channel_i
        - 
        -     # format output
        0     output = OrderedDict(
        -         "optical_data" => optical_data,
        -         "Ch1:Ch2" => ch12_ratios,
        -         "valid" => true)
        0     if (out_format=="json")
        0         return JSON.json(output)
        -     else
        0         return output
        -     end
        -     
        - end # analyze_optical_test_dual_channel
        - 
        - 
        - 
        - 
        - #      
