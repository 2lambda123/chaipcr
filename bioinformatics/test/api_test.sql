# api_test.sql
#
# Author: Tom Price
# Date: Dec 2018
#
# obtain data from test database 20180907_juliatestdb.sql
# to test Julia API

# Browse experiments
SELECT
id AS exp_id,
experiment_definition_id AS def_id,
calibration_id AS calib_id,
analyze_status AS analyzed,
cached_temperature AS temp,
power_cycles,
name 
FROM experiments 
WHERE completion_status="success" 
AND time_valid="1" ;





# 1. Dual channel amplification request test
#
# Calibration (Water, channel_1, channel_2) data comes from the following sql query: 
# 
# SELECT fluorescence_value, well_num, channel
#     FROM fluorescence_data
#     WHERE experiment_id = $calib_id AND step_id = $step_id
#     ORDER BY channel, well_num
# ;
#
# Raw Data comes from the following sql query: 
#
# SELECT fluorescence_value, well_num, cycle_num, channel
#     FROM fluorescence_data
#     WHERE experiment_id = $exp_id AND step_id = $step_id
#   ORDER BY channel, well_num, cycle_num
# ;
#
# other parameters passed to Julia are:
#
# min_reliable_cyc
# baseline_cyc_bounds
# baseline_method
# cq_method
# min_fluomax
# min_D1max
# min_D2max
#
# Let's try 135 as the calibration experiment and 136 as the test experiment
SET @calib_id = 135;
SET @exp_id = 136;

# Look at step_id's in the calibration experiment
SELECT step_id, channel, well_num
	FROM fluorescence_data
	WHERE experiment_id = @calib_id
	ORDER BY step_id, channel, well_num
;

# Let's assume step_id=28 is the water condition,
# step_id=31 means "channel 1", and step_id=34 means "channel 2".
# There are 2 channels (1-2) with 16 wells each (0-15).
SET @step_id = 34;
SELECT step_id, channel, well_num, count(*)
	FROM fluorescence_data
	WHERE experiment_id = @calib_id
	GROUP BY step_id, channel, well_num
;

# Now let's look at experiment 136
# 2 channels * 16 wells * 40 cycles (0-39), 1 step
SELECT step_id, channel, well_num, cycle_num
	FROM fluorescence_data
	WHERE experiment_id = @exp_id
	ORDER BY step_id, channel, well_num, cycle_num
;

# Shell script

# Export calibration data
mysql -u root -B -e "
USE chaipcr ; \
SELECT fluorescence_value, step_id, channel, well_num \
FROM fluorescence_data \
WHERE experiment_id = 135 \
ORDER BY step_id, channel, well_num ;" > /mnt/share/calib_135.tsv

# Export raw data as JSON
mysql -u root -B -e "
USE chaipcr ; \
SELECT fluorescence_value, channel, well_num, cycle_num \
FROM fluorescence_data \
WHERE experiment_id = 136 \
ORDER BY channel, well_num, cycle_num ;" > /mnt/share/amp_136.tsv

# Test_1ch calibration: Water
mysql -u root -B -e "
SELECT fluorescence_value, well_num, channel
FROM fluorescence_data
WHERE experiment_id = 168 AND step_id = 2
ORDER BY channel, well_num ;"
water_1=[20351,13854,16950,18614,19292,21191,19613,21150,21611,17390,21328,23590,24131,20167,19417,25120];

# Test_1ch calibration: Signal
mysql -u root -B -e "
SELECT fluorescence_value, well_num, channel
FROM fluorescence_data
WHERE experiment_id = 168 AND step_id = 4
ORDER BY channel, well_num ;"
signal_1=[2037915,2030879,2356324,2286590,2578814,2660975,2390835,2290655,2419225,2240444,2734095,3069099,2599044,2354805,2267721,2879192];

calib_1=Dict(
	"water" 	=> [water_1,  nothing],
	"channel_1"	=> [signal_1, nothing]
)

# Test_1ch amplification: Raw data
mysql -u root -B -e "
SELECT fluorescence_value, channel, well_num, cycle_num
FROM fluorescence_data
WHERE experiment_id = 169 AND step_id = 400
ORDER BY channel, well_num, cycle_num ;"
fluorescence_1=[42597,47181,51058,56405,60249,62782,66359,69416,71841,75297,77496,81095,84738,89553,94938,
102840,111628,121119,131630,143884,155728,166145,176799,185314,193794,201173,207831,214372,220762,225610,
230550,234970,238647,242594,246108,249686,253115,255125,257631,259794,20544,20369,20434,21176,21380,21387,
21687,21855,22196,21859,22825,23121,24183,26100,29115,33853,39340,45437,52539,60744,68794,75910,81838,88019,
93264,97750,101500,104994,108000,110504,112412,114196,115669,116839,117888,118627,119307,119221,119304,119401,
24291,24403,24678,24941,24976,25086,25289,25443,25573,26315,25797,26836,27943,30129,33384,38442,44305,50832,
58772,67354,75946,83419,90502,96754,102315,107124,111153,114925,118181,121113,123265,125204,126853,128269,129403,
130258,131176,130927,131035,131345,25619,25442,25488,25534,25613,25652,25673,25827,26284,25815,26882,27181,28280,
30423,33649,38478,44467,51272,59311,67826,76669,84603,92234,98291,104307,109225,113349,117196,120797,123659,
125741,127753,129368,131074,132462,133334,134314,133666,134090,134144,26299,26431,26302,26701,26977,26997,
27095,27233,27316,28283,27894,28803,30070,32532,36256,41857,48452,56026,64953,74425,84454,93218,100413,107953,
114591,120134,124499,128573,132600,135363,137666,139884,141711,143380,144627,145988,146841,146574,146672,
146874,29037,29208,29449,29852,30353,30244,30355,30713,30759,30682,31758,32411,33918,36626,40956,47599,55261,
64017,73984,85398,96350,106893,115718,123975,131484,137868,142854,147506,151955,155135,157833,160387,162560,
164011,165559,166585,167756,167369,167499,167643,30513,30326,30429,31089,31506,31543,31476,31777,32261,32547,
32092,31972,32197,32298,32100,32301,32143,32201,31813,32404,32468,32568,33270,32463,32692,32748,32733,32513,
32631,32815,32941,32841,32529,33003,32928,33239,33332,32934,32960,32958,34603,33986,34267,34684,35045,35269,
34971,35130,34989,35357,35486,35547,35535,35871,35557,35310,35778,35601,35063,35930,36295,36116,35186,35981,
36271,36317,36149,35994,35683,36238,36131,36224,36399,36521,36647,36939,36835,36489,36600,36380,27440,27821,
28296,29565,29971,29832,30163,30369,30573,30594,30593,30653,30647,30798,30583,30629,30792,30858,30992,31383,
31795,32472,33715,36210,40573,47164,55519,64959,75819,88228,100761,112716,123617,133374,142061,149687,156433,
161345,166062,170225,23824,23913,24257,24960,25312,25266,25518,25687,25791,25924,25910,25932,25915,26044,25913,
26000,26111,26150,26304,26569,26941,27465,28634,30473,33867,39109,45675,53108,61761,71523,81469,91069,99723,
107591,114687,120898,126419,130737,134664,138279,28769,28880,29128,29729,30042,29998,30195,30408,30625,30561,
30529,30601,30685,30805,30607,30698,30876,30839,31058,31350,31693,32199,33357,35594,39341,45249,53034,61907,
72043,83677,95637,107243,117863,127446,136040,143482,150191,155247,160172,164402,30976,31167,31211,31449,31705,
31873,31908,32034,32131,32307,32331,32391,32433,32491,32504,32561,32560,32698,32827,33042,33432,34115,35234,
37660,41686,47758,55386,63974,73973,85520,97262,108681,119172,128726,137400,145027,152056,157435,162510,167043,
30592,30703,30790,30793,30948,31124,31156,31222,31349,31245,31485,31574,31616,31663,31642,31696,31699,31861,
32048,32170,32597,33292,34656,36735,40776,47034,55105,63298,74788,85858,98433,110533,122826,132902,140497,
148668,155679,161253,167598,170769,26517,26649,26615,26969,27055,27073,27121,27200,27286,27427,27401,27362,
27387,27534,27423,27456,27560,27569,27809,27921,28217,28766,29788,31484,34830,39949,46885,54833,64066,74587,
85754,96721,106725,115748,123802,130898,137290,142088,146583,150550,34629,34291,34183,34673,34944,34867,34947,
34971,35128,35161,35235,35303,35238,35522,35376,35432,35410,35398,35475,35539,35664,35732,35170,35544,35785,
35757,35749,35677,35721,35842,35838,35899,36043,36022,36083,36191,36185,35987,36085,36071,44419,44002,44188,
44438,44962,44676,44851,44875,45262,45315,45404,45317,45360,45784,45534,45507,45525,45582,45287,45884,45879,
46132,46197,45902,46297,46268,46160,45895,46022,46221,46143,46230,46445,46466,46547,46549,46714,46276,46168,
46437]
channel_1=fill(1,640)
well_num_1=repeat(0:15,inner=[40])
cycle_num_1=repeat(1:40,outer=[16])

raw_1=Dict(
	"fluorescence_value"=> fluorescence_1,
	"channel"			=> channel_1,
	"well_num"			=> well_num_1,
	"cycle_num_1"		=> cycle_num_1
)

# Debug action "amplification" on single channel data
amp_debug = process_amp(raw_1, calib_1)
