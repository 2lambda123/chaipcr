<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Building julia and upload it to download server without reformating</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Remote build beaglebone.</description>
          <defaultValue>10.0.2.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefex</name>
          <description>Download server url</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. Could be /usr/share/nginx/html/download or /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>low_performance</name>
          <description>Reduce cpu performance for a better stability.
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>building_version</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>release-0.5</string>
              <string>release-0.6</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host.
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable- $build_machine.
	sleep 20
    
done

ssh -t root@$build_machine &apos;lsblk; exit 0&apos;

echo done connection check.</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a
umount /dev/mmcblk0p*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command># download flasher image
#wget https://rcn-ee.com/rootfs/bb.org/testing/2016-10-09/console/BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz

swapoff -a
mount -o remount,rw /

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update
apt-get install xz-utils parted cpufrequtils git -y -q

#no reformating
exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#echo Waiting for the device to come up again
#sleep 90#

#echo waiting 30min for the building device to flash
#sleep 1800

for i in {0..1800..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is  up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>exit 0
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Starting building Julia on $build_machine
apt-get update
apt-get -y -q upgrade

apt-get -f -y -q install

exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia
df -h

if ! apt-get -q -y install gcc-4.8 g++-4.8 
then
    echo error downloading gcc 4.8.. trying 4.7
    apt-get -q -y install g++-4.7
if apt-get -q -y install gcc-4.7
then
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

fi


apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential
dpkg --configure -a
sync
sleep 5

if  g++ --version | grep 4.6
then
  apt-get update
  apt-get -y upgrade
  dpkg --configure -a
  apt-get -y install g++-4.7
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

if  g++ --version | grep 4.6
then
   echo &quot;Can&apos;t update g++&quot;
   exit 1
fi

echo arranging the sdcard

swapoff -a
umount /sdcard/*
umount /dev/mmcblk0p*

ln -sf /usr/bin/ld /usr/bin/ld.gold
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
mount /dev/mmcblk0p1 /sdcard/upgrade/

# creating a temporary swap file on sdcard
sudo fallocate -l 2G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile
#verifying swap file is successfully added
sudo swapon -s

free -m

echo Building CMake
   cd /sdcard/upgrade
   wget https://cmake.org/files/v3.6/cmake-3.6.1.tar.gz
   tar xfv cmake-3.6.1.tar.gz
   cd cmake-3.6.1
   ./bootstrap
   make
   make install
   cd ..
   rm -r cmake-3.6.1*

apt-get -y -q install lsb-release
sync
sleep 30
dpkg --configure -a

apt-get autoremove -y -q

apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git build-essential hdf5-tools curl python pkg-config libssl-dev ntp ntpdate git unzip automake sshpass linux-headers-`uname -r` libpoco-dev

apt-get -f -y -q install

apt-get install -q -y libarpack2 libblas3 libgfortran3 liblapack3 ntpdate cpufrequtils
apt-get -f -y -q install

apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas3 libgfortran3 liblapack3 
apt-get -y -q install libblas3 libatlas3-base
apt-get -y -q install libblas-common libfftw3-double3 libfftw3-single3 libllvm3.8 libmetis5 libopenblas-base libunwind8 

apt-get -f -y -q install

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

if $low_performance
then
   echo GOVERNOR=\&quot;conservative\&quot; &gt;&gt; /etc/default/cpufrequtils
   cpufreq-set -f 300MHz -g conservative
   cpufreq-set -g conservative --max 300MHz
fi

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo building julia

# add gfortran link to search path. 
ln -s /usr/lib/gcc/arm-linux-gnueabihf/4.9/libgfortran.so /usr/lib/libgfortran.so

# compiling julia
# compiling julia 0.5
mkdir -p /sdcard/upgrade/julia-compile
cd /sdcard/upgrade/julia-compile
git clone git://github.com/JuliaLang/julia.git 
cd julia

git checkout $building_version
exit 0

echo &quot;export JULIA_PKGDIR=/root/.julia&quot;&gt;&gt;~/.bashrc
source ~/.bashrc
ntpdate -b -s -u pool.ntp.org

cat &lt;&lt;EOF &gt;&gt; Make.user
prefix=/usr/share/julia
MARCH=armv7-a
JULIA_CPU_TARGET=cortex-a8

override USE_SYSTEM_BLAS=1
override USE_SYSTEM_LAPACK=1
override USE_SYSTEM_LIBM=1
override USE_SYSTEM_FFTW=1
override USE_SYSTEM_GMP=1
override USE_SYSTEM_MPFR=1
override USE_SYSTEM_ARPACK=1

override LLVM_ASSERTIONS=1
LLVM_FLAGS+=&quot;--with-cpu=cortex-a8 --disable-compiler-version-checks --with-float=hard --with-abi=aapcs-vfp --with-fpu=neon --enable-targets=arm --enable-optimized --enable-assertions&quot;


EOF

exit 0

make


</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing julia
exit 0
cd /sdcard/upgrade/julia-compile/julia

make install 
ln -s /usr/share/julia/bin/julia /usr/bin/julia

echo precompiling mandatory packages.
cat &lt;&lt;EOF &gt;&gt; chaibio_packages.jl
Pkg.init()
Pkg.update()

Pkg.add(&quot;Dierckx&quot;)
Pkg.add(&quot;JSON&quot;)
Pkg.add(&quot;MySQL&quot;)
Pkg.add(&quot;JLD&quot;)
Pkg.add(&quot;DataFrames&quot;)
Pkg.add(&quot;Ipopt&quot;)
Pkg.add(&quot;JuMP&quot;)
Pkg.add(&quot;NLopt&quot;)
Pkg.add(&quot;HttpServer&quot;)

using DataFrames, DataStructures, Dierckx, Ipopt, JLD, JSON, JuMP, MySQL, NLopt, HttpServer
quit()
EOF

# test with no prebuilding
#julia chaibio_packages.jl
echo done testing! removing test script.

rm chaibio_packages.jl

echo test finished. cleaning..
swapoff /sdcard/upgrade/swapfile
rm /sdcard/upgrade/swapfile

cd ..
tar fcz julia05-44-$build_machine-$BUILD_NUMBER.tgz julia /root/.julia
tar fcz julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz julia/usr /root/.julia

sync
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo uploading julia file to server
exit 0

scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia05-44-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/
chmod 777 $local_download_folder/julia05-44-$build_machine-$BUILD_NUMBER.tgz
ln -sf $local_download_folder/julia05-44-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-default.tgz

scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/
chmod 777 $local_download_folder/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz
ln -sf $local_download_folder/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-slim-default.tgz

ls -ahl $local_download_folder/julia05-44-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-default.tgz
ls -ahl $local_download_folder/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-slim-default.tgz

exit 0</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleaning up
exit 0
cd /sdcard/upgrade/julia-compile/

rm julia05-44-$build_machine-$BUILD_NUMBER.tgz
rm julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz
ls -ahl

cd ..

rm -r julia-compile
rm -r /root/.julia
sync
ls -ahl

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

echo all done
exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>