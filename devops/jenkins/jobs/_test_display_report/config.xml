<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Creates a factory settings image from for connected BBB.&#xd;
- create a grep sdcard&#xd;
- start BBB on grep mode&#xd;
- restart BBB on normal more&#xd;
- backup grepped image&#xd;
- apply process_raw_image.sh and create_sdcard.sh scripts&#xd;
- exports the sdcard as an image file&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description></description>
          <defaultValue>10.0.100.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>output_sdcard</name>
          <description>the block device of the created factory settings sdcard: You can say:
/dev/sdb to write directly to a physical sdcard.
or /tmp/sdcard_image.img to export a factory settings sdcard image.</description>
          <defaultValue>/tmp/sdcard_${BUILD_NUMBER}.img</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. 
Apache server: /usr/share/nginx/html/download 
or 
Nginx (as on 10.0.1.20): /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download server url. Example: http://10.0.1.20/download</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sdcard_filename</name>
          <description>sdcard default filename</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>image_prefix</name>
          <description>Class of the upgrade image generated during this process. Could be empty, kernel44, kernel 41, kernel 38, allthirdparty, or release.
</description>
          <defaultValue>empty_${BUILD_NUMBER}</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/chaibio/chaipcr.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo fetching eMMC image.
stamp=$(date &apos;+%Y%M%d%H%m%S&apos;)
grep_sdcard_dir=&quot;/tmp/emmc_inbox_${stamp}&quot;
tmp_sdcard_dir=&quot;/tmp/sdcard_${stamp}&quot;

echo grep sdcard folder [input]: $grep_sdcard_dir
mkdir -p &quot;${grep_sdcard_dir}&quot;

ls -ahl &quot;${grep_sdcard_dir}&quot;
ls

    if [ -z $sdcard_filename ]
    then
	    sdcard_filename=sdcard_$BUILD_NUMBER.img.tgz
    fi
    echo sdcard filename is $sdcard_filename
    
    upgrade_image_filename=$tmp_sdcard_dir/p2/upgrade.img.tar
    upgrade_image_url_local_filename=${local_download_folder}/${image_prefix}_upgrade.img.tgz
    upgrade_image_url=${download_prefix}/${image_prefix}_upgrade.img.tgz
    echo upgrade image path $upgrade_image_filename, copying to $upgrade_image_url_local_filename
    
    echo Upgrade image URL is $upgrade_image_url
    
	full_emmc_image=${local_download_folder}/emmc_$BUILD_NUMBER.img.tgz
	fullpath_sdcard_image=${local_download_folder}/$sdcard_filename
	echo backup eMMC image to $full_emmc_image
    
    full_emmc_url=${download_prefix}/emmc_$BUILD_NUMBER.img.tgz
    sdcard_url=${download_prefix}/$sdcard_filename
    
    echo &quot;performing create_sdcard.sh $tmp_sdcard_dir $output_sdcard&quot;
    echo eMMC image should be downloadable from $full_emmc_url


rm -r $grep_sdcard_dir || :
rm -r $tmp_sdcard_dir || :
rm -r /tmp/image_creator/ || :

echo All Done!
sdcard_httpurl=&quot;http://$sdcard_url&quot;

build_report_filename=build_report.xml
#_$BUILD_NUMBER.xml
echo Report filename is $build_report_filename

cat &lt;&lt; EOF &gt; $build_report_filename

&lt;section name=&quot;&quot; fontcolor=&quot;&quot;&gt;
    // To display a field
    &lt;field name=&quot;Upgrade Image&quot; titlecolor=&quot;&quot; value=&quot;&quot; detailcolor=&quot;&quot; href=&quot;&quot;&gt; 
    &lt;![CDATA[ 
Upgrade image (${image_prefix}_upgrade.img.tgz) &lt;a href=&quot;$upgrade_image_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
     &lt;field name=&quot;eMMC&quot; titlecolor=&quot;&quot; value=&quot;&quot; detailcolor=&quot;&quot; href=&quot;&quot;&gt; 
      &lt;![CDATA[ 
eMMC image (emmc_$BUILD_NUMBER.img.tgz) &lt;a href=&quot;$full_emmc_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
    &lt;field name=&quot;SDCard&quot; titlecolor=&quot;&quot; value=&quot;&quot; detailcolor=&quot;&quot; href=&quot;&quot;&gt; 
      &lt;![CDATA[ 
SDCard image ($sdcard_filename) &lt;a href=&quot;$sdcard_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
&lt;/section&gt;

EOF
 </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xml</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>*.xml</name>
      <shownOnProjectPage>true</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
  </publishers>
  <buildWrappers/>
</project>