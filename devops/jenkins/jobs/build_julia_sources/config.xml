<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Building julia and upload it to download server without reformating</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Remote build beaglebone.</description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. 
Apache server: /var/www/html/download
or 
Nginx (as on 10.0.1.20): /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>building_version</name>
          <description>Julia version to build</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>v0.6.4</string>
              <string>v0.6.3</string>
              <string>v0.6.2</string>
              <string>v0.6.1</string>
              <string>v0.6.0</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>upgrade_gcc</name>
          <description>upgrade GCC</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>build_cmake</name>
          <description>Build cmake 3.6</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download server url. Example: http://10.0.1.20/download</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>upload_to_server</name>
          <description>Upload generated binaries to server</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>debug</name>
          <description>Build a debug version of julia. Needs a 16G+ sdcard.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>pin_packages</name>
          <description>Pinning packages</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>cLang</name>
          <description>compile using CLang</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>LTO</name>
          <description>Linker optimization
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>gcc48</name>
          <description>Download gcc and g++ v.4.8
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host.
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable- $build_machine.
	sleep 20
    
done

ssh -t root@$build_machine &apos;lsblk; exit 0&apos;

echo done connection check.</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a
umount /dev/mmcblk0p*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>
swapoff -a
mount -o remount,rw /

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update
apt-get install xz-utils parted git -y -q

#no reformating
exit 0

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#echo Waiting for the device to come up again
#sleep 90#

#echo waiting 30min for the building device to flash
#sleep 1800

for i in {0..1800..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is  up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        
        if $pin_packages
		then
        	echo now at $(pwd)
        	branch_param=&quot;-b julia&quot;
        	rm -r tmp
        	mkdir tmp
        	cd tmp
        	git clone $branch_param https://github.com/chaibio/chaipcr.git || exit 1
        	cd chaipcr || exit 1
        	echo now at $(pwd)

        	cat deploy.sh
        	echo | ./deploy.sh $build_machine
        	cd ../..
        	rm -r tmp
		fi
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Starting building Julia on $build_machine
apt-get update
apt-get -y -q upgrade
apt-get -f -y -q install

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia
df -h

apt-get -y -q install ntp ntpdate git unzip automake sshpass build-essential

free -m
if $build_cmake
then
echo Building CMake
   cd /sdcard/upgrade
   wget https://cmake.org/files/v3.6/cmake-3.6.1.tar.gz
   tar xfv cmake-3.6.1.tar.gz
   cd cmake-3.6.1
   ./bootstrap
   make || exit 1
   make install || exit 1
   cd ..
   rm -r cmake-3.6.1*
else
# installs gcc
   apt-get install -y -q cmake
fi


if $gcc48
then
   echo removing latest gcc if any and installing gcc-4.8
   gcc -v
   apt-get -y -q remove gcc g++
   apt-get autoremove -y -q  gcc g++
cp /etc/apt/sources.list /etc/apt/sources.list.org
apt-get update
echo &quot;deb http://ftp.uk.debian.org/debian/ jessie main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list
apt-get update
apt-get -y -q install gcc-4.8 g++-4.8
cp /etc/apt/sources.list.org /etc/apt/sources.list
apt-get update
    apt-get clean
      apt-get autoclean
      dpkg --configure -a
      rm /usr/bin/gcc
      rm /usr/bin/g++
      ln -s /usr/bin/gcc-4.8 /usr/bin/gcc
      ln -s /usr/bin/g++-4.8 /usr/bin/g++

gcc -v

else
   echo installing latest gcc and g++ 
   apt-get -q -y install gcc g++
fi

if $upgrade_gcc
then

if ! apt-get -q -y install gcc-4.8 g++-4.8 
then
    echo error downloading gcc 4.8.. trying 4.7
    apt-get -q -y install g++-4.7
    if apt-get -q -y install gcc-4.7
    then
      apt-get clean
      apt-get autoclean
      dpkg --configure -a
      rm /usr/bin/gcc
      rm /usr/bin/g++
      ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
      ln -s /usr/bin/g++-4.7 /usr/bin/g++
   fi
fi

apt-get -y -q install ntp ntpdate git unzip automake sshpass 
dpkg --configure -a
sync
sleep 5

if  g++ --version | grep 4.6
then
  apt-get update
  apt-get -y upgrade
  dpkg --configure -a
  apt-get -y install g++-4.7
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

if  g++ --version | grep 4.6
then
   echo &quot;Can&apos;t update g++&quot;
   exit 1
fi

else
      apt-get -y -q install ntp ntpdate git unzip automake sshpass
fi
echo arranging the sdcard

swapoff -a
umount /sdcard/*
umount /dev/mmcblk0p*

ln -sf /usr/bin/ld /usr/bin/ld.gold
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0x83,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
mount /dev/mmcblk0p1 /sdcard/upgrade/

# creating a temporary swap file on sdcard
sudo fallocate -l 3G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile
#verifying swap file is successfully added
sudo swapon -s

apt-get update
apt-get upgrade -y -q

apt-get -y -q install lsb-release
sync
sleep 30
dpkg --configure -a

echo installing headers...
uname=`uname -r`
echo uname=$uname
uname_updated=$(echo &quot;$uname&quot; | sed &quot;s/chai-//&quot;)
echo updated to $uname_updated

apt-get -y -q install linux-headers-$uname_updated || exit 1
mv /usr/src/linux-headers-$uname_updated /usr/src/linux-headers-`uname -r`
ln -nfs /usr/src/linux-headers-`uname -r` /lib/modules/`uname -r`/build 
ln -nfs /usr/src/linux-headers-`uname -r` /lib/modules/`uname -r`/source

apt-get autoremove -y -q
apt-get -q -y install libopenblas-dev libblas-dev liblapack-dev
apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git hdf5-tools curl python pkg-config libssl-dev ntp ntpdate git unzip automake sshpass libpoco-dev

apt-get -q -y install liblapack3gf libblas3gf 
apt-get -f -y -q install

apt-get install -q -y libarpack2 libblas3 libgfortran3 liblapack3 ntpdate
apt-get -f -y -q install

apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas3 libgfortran3 liblapack3 
apt-get -y -q install libblas3 libatlas3-base
apt-get -y -q install libblas-common libfftw3-double3 libfftw3-single3 libllvm3.8 libmetis5 libopenblas-base libunwind8 

DEBIAN_FRONTEND=noninteractive apt-get -q -y install gettext
DEBIAN_FRONTEND=noninteractive apt-get -q -y install libgtk-3-0
apt-get -y -q install libpango1.0-0 libglib2.0-0 libcairo2

apt-get -f -y -q install
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo building julia

# add gfortran link to search path. 
ln -s /usr/lib/gcc/arm-linux-gnueabihf/4.9/libgfortran.so /usr/lib/libgfortran.so

# compiling julia
mkdir -p /sdcard/upgrade/julia-compile
cd /sdcard/upgrade/julia-compile
git clone git://github.com/JuliaLang/julia.git 
cd julia

git checkout $building_version

echo &quot;export JULIA_PKGDIR=/root/.julia&quot;&gt;&gt;~/.bashrc
source ~/.bashrc
ntpdate -b -s -u pool.ntp.org

cat &lt;&lt;EOF &gt;&gt; Make.user
#prefix=/usr/share/julia
MARCH=armv7-a
JULIA_CPU_TARGET=cortex-a8
JULIA_BUILD_MODE=release
override USE_SYSTEM_BLAS=1
override USE_SYSTEM_LAPACK=1
override USE_SYSTEM_LIBM=1
override USE_SYSTEM_FFTW=1
override USE_SYSTEM_GMP=1
override USE_SYSTEM_MPFR=1
override USE_SYSTEM_ARPACK=1

override LLVM_ASSERTIONS=1
EOF

if $debug
then
cat &lt;&lt;EOF &gt;&gt; Make.user
JULIA_BUILD_MODE=debug
LLVM_DEBUG=1
VERBOSE=1
override JULIA_BUILD_MODE=debug
EOF
fi

make_cmd=make

if $LTO
then
cat &lt;&lt;EOF &gt;&gt; Make.user
LLVM_FLAGS+=&quot;--with-cpu=cortex-a8 --disable-compiler-version-checks --with-float=hard --with-abi=aapcs-vfp --with-fpu=neon --enable-targets=arm --enable-optimized --enable-assertions -flto &quot;
CFLAGS+=  -flto
CXXFLAGS+=  -flto
LLVM_LTO=1
LLVM_CMAKE=&apos;-DCMAKE_CXX_FLAGS=-flto -DCMAKE_C_FLAGS=-flto -DCMAKE_EXE_LINKER_FLAGS=-flto -DCMAKE_SHARED_LINKER_FLAGS=-flto &apos;

make_cmd=&quot;LLVM_CMAKE=&apos;-DCMAKE_CXX_FLAGS=-flto -DCMAKE_C_FLAGS=-flto -DCMAKE_EXE_LINKER_FLAGS=-flto -DCMAKE_SHARED_LINKER_FLAGS=-flto&apos;  make LLVM_USE_CMAKE=1 LLVM_LTO=1&quot;

EOF
else
cat &lt;&lt;EOF &gt;&gt; Make.user
LLVM_FLAGS+=&quot;--with-cpu=cortex-a8 --disable-compiler-version-checks --with-float=hard --with-abi=aapcs-vfp --with-fpu=neon --enable-targets=arm --enable-optimized --enable-assertions&quot;
EOF
fi

if $cLang
then
       apt-get -y install clang


cat &lt;&lt;EOF &gt;&gt; Make.user

# use our new toolchain
override USECLANG=1
USECLANG=1
override LLVM_ASSERTIONS=1
override USE_LLVM_SHLIB=1
override BUILD_LLVM_CLANG=1


# make the GC use regular malloc/frees, which are intercepted by ASAN
override WITH_GC_DEBUG_ENV=1



EOF
fi


#sed -i &quot;s/-gtk-update-icon-cache/-gtk-update-icon-cache --ignore-theme-index/&quot; Makefile
echo making
sed -i &quot;s/-gtk-update-icon-cache/-gtk-update-icon-cache --ignore-theme-index/&quot; Makefile
#   make release || exit 1
if $debug
then
   #make debug
   make_cmd=&quot;$make_cmd debug&quot;
fi

echo calling $make_cmd
mv deps/checksums/ deps/checksums_disabled
sed -i -e &quot;s/void jl_depwarn_partial_indexing/JL_DLLEXPORT void jl_depwarn_partial_indexing/g&quot;  src/rtutils.c

$(make_cmd)
echo end of make call

make binary-dist || exit 1
mv julia-* .. || true
make install

hashcode=$(git rev-parse --short HEAD)
#mkdir julia-$hashcode
#touch julia-$hashcode/temp
tar czfv ../julia-$building_version-linux-armv7l.tar.gz julia-$hashcode
echo done making
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0
#experimental code creating deb file
cd /sdcard/upgrade/julia-compile/julia
hashcode=$(git rev-parse --short HEAD)
rm -fr julia-$building_version julia_* 
    tar zxf julia-$hashcode-Linux-arm.tar.gz 
    cd julia-$hashcode

    mv LICENSE.md share/doc/julia/LICENSE.md 
    rm -f lib/julia/libpcre2-posix.so* 
    rm -f lib/julia/libstdc++.so* 
    rm -f bin/*-debug* lib/*-debug* lib/julia/*-debug* 
    rm -fr libexec 
    rm -f lib/julia/libccalltest* 
    mkdir usr 
    mv bin include lib share usr 
    tar  cvf ../julia-$building_version.tar * 
    cd .. 
    rm -fr julia-$hashcode 
apt-get install alien fakeroot alien devscripts -y -q
    fakeroot alien -d --generate julia-$building_version.tar 
    cd julia-$building_version/ || cd julia-$building_version-?/
    rm debian/control 

    cat &lt;&lt; EOF &gt; debian/control 
Source: julia-release
Section: science
Priority: extra
Homepage: http://julialang.org
Maintainer: Julia Computing Inc &lt;juliapro@juliacomputing.com&gt;

Package: julia-release
Architecture: any
Depends: libllvm3.9, libpcre2-dev, libdsfmt-dev, libopenblas-dev, libfftw3-dev, libgmp-dev
Description: high-performance programming language for numerical computing
 Julia is a high-level, high-performance dynamic programming language for
 numerical computing. It provides a sophisticated compiler, distributed
 parallel execution, numerical accuracy, and an extensive mathematical function
 library. The library, mostly written in Julia itself, also integrates mature,
 best-of-breed C and Fortran libraries for linear algebra, random number
 generation, FFTs, and string processing. The Julia community has contributed
 over 1,000 packages covering a number of capabilities.
 .
 This package contains the Julia compiler, standard library, package manage
 and documentation.
EOF

debuild --no-lintian
echo done creating deb file
ls -ahl . ..

echo try 2
    rm debian/control 

    cat &lt;&lt; EOF &gt; debian/control 
Source: julia-$building_version
Section: science
Priority: extra
Homepage: http://julialang.org
Maintainer: Julia Computing Inc &lt;juliapro@juliacomputing.com&gt;

Package: julia-$building_version
Architecture: any
Depends: libllvm3.9, libpcre2-dev, libdsfmt-dev, libopenblas-dev, libfftw3-dev, libgmp-dev
Description: high-performance programming language for numerical computing
 Julia is a high-level, high-performance dynamic programming language for
 numerical computing. It provides a sophisticated compiler, distributed
 parallel execution, numerical accuracy, and an extensive mathematical function
 library. The library, mostly written in Julia itself, also integrates mature,
 best-of-breed C and Fortran libraries for linear algebra, random number
 generation, FFTs, and string processing. The Julia community has contributed
 over 1,000 packages covering a number of capabilities.
 .
 This package contains the Julia compiler, standard library, package manage
 and documentation.
EOF

debuild --no-lintian
echo done creating deb file
ls -ahl . ..



apt-get -q -y autoremove build-essential fakeroot devscripts alien
apt-get -q -y remove at bash-completion dctrl-tools debian-keyring devscripts diffstat dirmngr dput equivs exim4-base  exim4-config exim4-daemon-light guile-2.0-libs iso-codes libapt-pkg-perl libauthen-sasl-perl  libb-hooks-endofscope-perl libclass-accessor-perl libclass-inspector-perl  libclass-method-modifiers-perl libclass-xsaccessor-perl libclone-perl libconvert-binhex-perl  libdata-optlist-perl libdevel-globaldestruction-perl libdigest-hmac-perl libdistro-info-perl  libemail-valid-perl libexporter-tiny-perl libfile-basedir-perl libfile-chdir-perl  libfile-homedir-perl libfile-listing-perl libfile-which-perl libfont-afm-perl libfribidi0  libgc1c2 libgetopt-long-descriptive-perl libgit-wrapper-perl libgpgme11 libgsasl7  libhtml-form-perl libhtml-format-perl libhtml-tree-perl libhttp-cookies-perl libhttp-daemon-perl  libhttp-negotiate-perl libimport-into-perl libio-pty-perl libio-sessiondata-perl  libio-socket-inet6-perl libio-socket-ssl-perl libio-string-perl libio-stringy-perl  libipc-run-perl libipc-system-simple-perl libkyotocabinet16v5 liblist-compare-perl  liblist-moreutils-perl liblwp-protocol-https-perl libmailtools-perl libmailutils5  libmime-tools-perl libmodule-implementation-perl libmodule-runtime-perl libmoo-perl  libnamespace-clean-perl libnet-dns-perl libnet-domain-tld-perl libnet-http-perl libnet-ip-perl  libnet-smtp-ssl-perl libnet-ssleay-perl libntlm0 libnumber-compare-perl libnumber-range-perl  libossp-uuid-perl libossp-uuid16 libpackage-stash-perl libpackage-stash-xs-perl  libparams-classify-perl libparams-util-perl libparams-validate-perl  libparse-debianchangelog-perl libpath-iterator-rule-perl libpath-tiny-perl libperlio-gzip-perl  libpod-constants-perl librole-tiny-perl libscalar-list-utils-perl libsoap-lite-perl  libsocket6-perl libsort-key-perl libsort-versions-perl libstrictures-perl  libstring-copyright-perl libstring-escape-perl libsub-exporter-perl  libsub-exporter-progressive-perl libsub-identify-perl libsub-install-perl libsub-name-perl  libtask-weaken-perl libtext-glob-perl libtext-levenshtein-perl libtry-tiny-perl  libunicode-utf8-perl libvariable-magic-perl libwww-perl libwww-robotrules-perl  libxml-parser-perl libxmlrpc-lite-perl libyaml-libyaml-perl licensecheck lintian mailutils  mailutils-common patchutils perl-openssl-defaults python-apt python-apt-common python-debian  python-gpg python-six python3-apt python3-chardet python3-debian python3-magic  python3-pkg-resources python3-six t1utils wdiff

#end of experimental code creating deb file
exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>if ! $upload_to_server
then
	exit 0
fi

build_report_filename=build_report.xml
juliafilename=julia-$building_version-linux-armv7l.tar.gz
julia_image_url=${download_prefix}/$juliafilename

#_$BUILD_NUMBER.xml
echo Report filename is $build_report_filename
cat &lt;&lt; EOF &gt; $build_report_filename
&lt;section name=&quot;&quot; fontcolor=&quot;&quot;&gt;
    // To display a field
    &lt;field name=&quot;Upgrade Image&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$julia_image_url&quot;&gt; 
    &lt;![CDATA[ 
Julia image ($juliafilename) &lt;a href=&quot;$julia_image_url&quot; download=&quot;$juliafilename&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
&lt;/section&gt;
EOF


if $debug
then
	prefix=$building_version-debug
else
    prefix=$building_version
fi
juliafilename=julia-$building_version-linux-armv7l.tar.gz
echo uploading julia file to server

scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia-$building_version-linux-armv7l.tar.gz $local_download_folder/
chmod 777 $local_download_folder/$juliafilename
#scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia-$prefix-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/
#chmod 777 $local_download_folder/julia-$prefix-$build_machine-$BUILD_NUMBER.tgz
#ln -sf $local_download_folder/julia-$prefix-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia-$prefix-default.tgz

#scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia-$prefix-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/
#chmod 777 $local_download_folder/julia-$prefix-slim-$build_machine-$BUILD_NUMBER.tgz
#ln -sf $local_download_folder/julia-$prefix-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia-$prefix-slim-default.tgz

#ls -ahl $local_download_folder/julia-$prefix-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia-$prefix-default.tgz
#ls -ahl $local_download_folder/julia-$prefix-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia-$prefix-slim-default.tgz

#experimental deb file upload: julia-release_0.6-2_armhf.deb
#scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia/julia-*.deb $local_download_folder/julia-$prefix.deb || true
#chmod 777 $local_download_folder/julia-$prefix.deb || true
echo All done

exit 0
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xml</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>*.xml</name>
      <shownOnProjectPage>true</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>