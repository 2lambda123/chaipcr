<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Chaibio shoftware</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.100.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>bypass_pru</name>
          <description>Will not install PRU work</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition plugin="subversion@2.9">
          <name>build_branch</name>
          <description>Select a Subversion entry</description>
          <tagsDir>https://github.com/chaibio/chaipcr</tagsDir>
          <credentialsId></credentialsId>
          <tagsFilter></tagsFilter>
          <reverseByDate>true</reverseByDate>
          <reverseByName>false</reverseByName>
          <defaultValue></defaultValue>
          <maxTags></maxTags>
        </hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/chaibio/chaipcr.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>123</authToken>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config

cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr

EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
dpkg --configure -a</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# waiting 20min for the bulding device to become connectable
echo &quot;Waiting for the build device ($build_machine) to become ready!&quot;
#sleep 1500

for i in {0..1200..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 10

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 10
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        sleep 10


		branch_param=

		if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]] 
		then
   			echo No build branch chosen
		else
     		branch_param=&quot;-b $(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
		    echo Cloning branch $branch_param
		fi

		rm -r tmp || true
	 	mkdir tmp || true
        cd tmp
		git clone $branch_param https://github.com/chaibio/chaipcr.git
        cd chaipcr
        cat deploy.sh
        echo | ./deploy.sh $build_machine

        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Setup MySQL
systemctl stop mysql.service
mount /dev/mmcblk1p2 /data || true
mount /dev/mmcblk1p3 /perm || true

mv /var/lib/mysql /data/
sed -i &quot;s,datadir.*=.*,datadir=/data/mysql,g&quot; /etc/mysql/my.cnf # Edit /etc/mysql/my.cnf and change datadir to /data/mysql
systemctl start mysql.service

sync

cd
echo unmounting any sdcard folders
umount /sdcard/*
umount /dev/mmcblk0p*

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0x83,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
if mount /dev/mmcblk0p1 /sdcard/upgrade/
then
    echo &quot;temp sdcard folder mounted&quot;
else
   echo &quot;Error mounting temp sdcard folder&quot;
   exit 1
fi

# creating a temporary swap file on sdcard
if fallocate -l 2G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
then
    echo &quot;swap file created successfully&quot;
else
   echo &quot;failed creating swap file&quot;
   exit 1
fi
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile

#verifying swap file is successfully added
sudo swapon -s

free -m


echo browser compile
cd /sdcard/upgrade/
mkdir compile-browser
cd compile-browser/
git clone https://github.com/chaibio/chaipcr.git
cd /sdcard/upgrade/compile-browser/chaipcr/browser/

/opt/QtEmbedded/bin/qmake
sed -i &quot;s/arm-unknown-linux-gnueabi-//&quot; Makefile
make
make install
#cp realtime ~/tmp
#cp libraries/lib/* /usr/lib/
cd /sdcard/upgrade/
rm -r compile-browser
cd
echo done compiling browser

free -m
sync

mkdir -p /sdcard/upgrade/realtime-compile
cd /sdcard/upgrade/realtime-compile

branch_param=

if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]] 
then
   echo No build branch chosen
else
     branch_param=&quot;-b $(echo $build_branch | cut -d&apos;/&apos; -f 2)&quot;
     echo Cloning branch $branch_param
fi

git clone $branch_param https://github.com/chaibio/chaipcr.git
cd /sdcard/upgrade/realtime-compile/chaipcr/realtime

cp util/instance.h control/
rm libraries/lib/libPoco*

#qmake
/opt/QtEmbedded/bin/qmake

sed -i &quot;s/arm-unknown-linux-gnueabi-//&quot; Makefile
make
make install
#cp realtime ~/tmp
cp libraries/lib/* /usr/lib/
cd
rm -r /sdcard/upgrade/realtime-compile

echo  Deploy realtime to ~/tmp
cp ~/chaipcr/deploy/device/realtime.service /lib/systemd/system/
systemctl enable realtime.service


sync

     echo precompile julia packages if needed
if [ -e /root/chaipcr/bioinformatics/juliaserver.jl ]
then
     free -m

     echo $(date) Performing precompilling julia packages
     cd /root/chaipcr/bioinformatics/

      #julia --print &quot;Pkg.init()&quot;
      julia --print &quot;Pkg.update()&quot;
      julia --print &quot;Pkg.add(\&quot;Clustering\&quot;)&quot;
      julia --print &quot;Pkg.add(\&quot;JuMP\&quot;)&quot;
      julia --print &quot;Pkg.add(\&quot;HttpServer\&quot;)&quot;
      julia --print &quot;Pkg.add(\&quot;Ipopt\&quot;)&quot;
      julia --print &quot;Pkg.add(\&quot;JSON\&quot;)&quot;
      julia --print &quot;Pkg.add(\&quot;MySQL\&quot;)&quot;
      julia --print &quot;Pkg.add(\&quot;ProfileView\&quot;)&quot;

      julia --print &quot;Pkg.build(\&quot;ProfileView\&quot;)&quot;

      julia --print &quot;Pkg.build(\&quot;MySQL\&quot;)&quot;
  
      julia --print &quot;Pkg.build(\&quot;HttpServer\&quot;)&quot;
      julia --print &quot;Pkg.build(\&quot;Ipopt\&quot;)&quot;
      julia --print &quot;Pkg.build(\&quot;JSON\&quot;)&quot;
      julia --print &quot;Pkg.build(\&quot;JuMP\&quot;)&quot;

      julia --print &quot;using JuMP, JSON, MySQL, Clustering, HttpServer, Ipopt&quot;

#      julia --print &quot;include(\&quot;/root/chaipcr/bioinformatics/QpcrAnalysis/QpcrAnalysis.jl\&quot;)&quot; --compile=all count not be called this way... must have some arrangment before it 

      echo calling qa_startup_bbb.jl
	cat &lt;&lt;EOF &gt; /root/chaipcr/bioinformatics/qa_startup_bbb.jl

# start-up code for &quot;QpcrAnalysis&quot; package testing
# load_from_dir_ = &quot;E:/freelance/applications/010_qpcr/Julia/QpcrAnalysis&quot; # PC
# load_from_dir_ = &quot;/sdcard/upgrade/Julia/QpcrAnalysis&quot; # bbb
# load_from_dir_ = &quot;/root/xqrm/QpcrAnalysis&quot; # bbb
load_from_dir_ = &quot;/root/chaipcr/bioinformatics/QpcrAnalysis&quot; # bbb production
ENV[&quot;JULIA_ENV&quot;] = &quot;bbb_test_1&quot; # bbb when &quot;localhost&quot; resulted in error &quot;&quot;
push!(LOAD_PATH, load_from_dir_)
using DataStructures, Ipopt, JSON, MySQL#, NLopt (&quot;ERROR: LoadError: Declaring __precompile__(false) is not allowed in files that are being precompiled&quot;. &quot;ERROR: Failed to precompile NLopt to /root/.julia/lib/v0.6/NLopt.ji&quot;) #, ProfileView # comment `ProfileView` for building .dll, otherwise something like &quot;incremental compilation error&quot;

include(&quot;$load_from_dir_/QpcrAnalysis.jl&quot;)
using QpcrAnalysis

function mysql_session(
    func::Function,
    db_hup::AbstractVector, # exactly 3 elements for db_host, db_usr, db_pswd
    db_name::AbstractString
    )
    db_conn = mysql_connect(db_hup..., db_name)
    try
        func(db_conn)
    finally
        mysql_disconnect(db_conn)
        # println(&quot;`db_conn` closed&quot;) # cause &quot;julia-client&quot; not to show debug info
    end # try
end # mysql_session
wdb_ = &quot;connect&quot;
db_key_ = &quot;default&quot;
# beaglebone
db_host_ = &quot;localhost&quot;
db_host_ = &quot;127.0.0.1&quot;
db_usr_ = &quot;root&quot;
db_pswd_ = &quot;&quot;
# PC
#db_host_ = &quot;localhost&quot;
#db_usr_ = &quot;root1&quot;
#db_pswd_ = &quot;pswd1&quot;
db_name_ = &quot;test_2ch&quot;
db_hup_ = [db_host_, db_usr_, db_pswd_]
out_format_ = &quot;full&quot; # used: &quot;full&quot;, &quot;pre_json&quot;, &quot;json&quot;
# amp
asrp_vec_ = []
step_id_ = 0
ramp_id_ = 0
well_nums_ = []
min_reliable_cyc_ = 5
baseline_cyc_bounds_ = []
cq_method_ = &quot;Cy0&quot;
ct_fluos_ = []
max_cycle_ = 1000
ad_cycs_ = 0
ad_cluster_method_ = &quot;k-medoids&quot;
out_format_ = &quot;full&quot;
out_sr_dict_ = true
verbose_ = false
# for `mod_bl_q`
m_prebl_ = &quot;l4_enl&quot;
# m_prebl_ = &quot;l4_enl_hbl&quot; # not working well
m_postbl_ = &quot;l4_enl&quot;
ms = OrderedDict(&quot;pre&quot;=&gt;m_prebl_, &quot;post&quot;=&gt;m_postbl_)
solver_ = IpoptSolver(print_level=0, max_iter=35)
kwdict_jmp_model_ = OrderedDict(:solver=&gt;solver_)
kwdict_mbq_ = OrderedDict(
    :m_prebl=&gt;m_prebl_,
    :m_postbl=&gt;m_postbl_,
    :kwargs_jmp_model=&gt;kwdict_jmp_model_
)
ipopt_print2file_prefix_ = &quot;&quot;
before_128x_ = false
kwdict_rc_ = OrderedDict(
    :before_128x=&gt;before_128x_
)
ad_cycs_ = 0
ad_cluster_method_ = &quot;k-means&quot;
# mc
well_nums_ = []
auto_span_smooth_ = false
span_smooth_default_ = 0.015
span_smooth_factor_ = 7.2
max_tmprtr_ = 1000
out_format_ = &quot;full&quot;
verbose_ = false
# analyze functions
# analyze_optical_calibration
well_nums_ = []
verbose = false
# using QpcrAnalysis
# reload(&quot;QpcrAnalysis&quot;) # can update non-exported content properly, but cant export, like import and include
 include(&quot;$load_from_dir_/QpcrAnalysis.jl&quot;)
&quot;success&quot;
#
EOF

	echo $(date) calling startup script
       	julia qa_startup_bbb.jl --compile=All
	echo done with startup script
       	echo $(date) starting julia server, and running for 30 min
       	julia juliaserver.jl --compile=All &amp;

       	sleep 1800
       	echo $(date) server wait time due

fi

sync
swapoff /sdcard/upgrade/swapfile
rm /sdcard/upgrade/swapfile
exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo checking deployed web files

ls -ahl

if [ -e ~/chaipcr/deploy ]
then
	echo web files deploy done successfully
else
        echo error deploying ssh files
        exit 1
fi

#Replace uEnv.txt
echo Replacing uEnv.txt
cd ~/chaipcr/deploy/
./replace_uEnv.txt.sh
#sed -i &quot;s/errors=remount-ro/errors=continue/&quot; /etc/fstab

echo patching rc.local
cd /etc        
patch -i ~/chaipcr/deploy/device/rc.local.patch
cd
sync

echo Disable Mass-storage mini-usb
cd /opt/scripts/boot        
patch -i ~/chaipcr/deploy/device/storage.disable.patch 
cd ~
sync

echo Update Networking
sed -i &apos;s/#auto eth0/auto eth0/&apos; /etc/network/interfaces
sed -i &apos;s/#iface eth0/iface eth0/&apos; /etc/network/interfaces

sed -i &apos;s/#timeout 60/timeout 20/&apos; /etc/dhcp/dhclient.conf
sed -i &apos;s/#retry 60/retry 20/&apos; /etc/dhcp/dhclient.conf
sed -i &apos;s/#reboot/reboot/&apos; /etc/dhcp/dhclient.conf

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Configure Logrotate
cp ~/chaipcr/deploy/device/logrotate/logrotate.conf /etc
cp ~/chaipcr/deploy/device/logrotate/logrotate.d/* /etc/logrotate.d/
mv /etc/cron.daily/logrotate /etc/cron.hourly/ 

echo Build/update wifi drivers- ignored now.. lets see if the latest is making any issues

echo copy browser resources
# Deploy browser to ~/tmp
cp -r ~/chaipcr/browser/resources ~/tmp/
cp ~/chaipcr/browser/qpcrbrowser.service /lib/systemd/system/
systemctl enable qpcrbrowser.service

if $bypass_pru
then
   echo bypassing PRU stub
   exit 0
fi

echo Install PRU libraries and Tools
cd
wget https://github.com/beagleboard/am335x_pru_package/archive/master.zip --no-check-certificate
unzip -o master.zip
mkdir /usr/include/pruss/
cp ~/am335x_pru_package-master/pru_sw/app_loader/include/pruss* /usr/include/pruss/
cd ~/am335x_pru_package-master/pru_sw/app_loader/interface
CROSS_COMPILE= make  #note: there is space between = and make
cp ~/am335x_pru_package-master/pru_sw/app_loader/lib/lib* /usr/lib/
ldconfig
cd ~/am335x_pru_package-master/pru_sw/utils/pasm_source
source linuxbuild
cd ..
cp pasm /usr/bin/ 
cd
rm master.zip || true
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Build/install LCD drivers
cd ~/chaipcr/modules/LCDtouch_V3
chmod 775 install_debian.sh
mkdir -p /boot/uboot/dtbs/
./install_debian.sh
rm -rf /usr/src/linux*
sync

echo Setting up Rserve
cp ~/chaipcr/deploy/device/Rserve/Rserv.conf /etc
cp ~/chaipcr/deploy/device/Rserve/r.service /lib/systemd/system/

sync
sync
 fsck /dev/mmcblk1p1 -y -f
 fsck /dev/mmcblk0p1 -y -f

systemctl enable r.service
echo Setup Rails app

mkdir -p ~/chaipcr/web/config/
cat &lt;&lt;EOF &gt;&gt; ~/chaipcr/web/config/database.yml
    production:
      adapter: mysql2
      database: chaipcr
      pool: 5
      timeout: 5000
      username: root
      password:
EOF
echo database.yml created

cd /root/chaipcr/web
chmod 755 /root

echo rserve 
echo \n | gem install rserve-client #otherwise bundle fails, don&apos;t know why

echo bundle
echo &quot;\n&quot; | bundle

echo rake setup
echo &quot;\n&quot; | RAILS_ENV=production bundle exec rake db:setup

echo seed_fu
echo &quot;\n&quot; | RAILS_ENV=production bundle exec rake db:seed_fu 

echo done rserev</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Install device tree overlay and PRU binary(do this every time it changes):&quot;
cd ~/chaipcr/deploy/overlay
bash ./build.sh
sync
cd</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo setting up website pn ngixn
if [ -e /etc/nginx/sites-available ]
then
    echo Nginx is installed
else
   echo Nginx is not installed
   exit 0
fi

cp ~/chaipcr/web/config/etc/nginx/chaipcr /etc/nginx/sites-available/
cd /etc/nginx/sites-enabled
sudo ln -s ../sites-available/chaipcr
rm default 

cat &lt;&lt;EOF &gt;&gt; /etc/nginx/nginx.conf 
#Add the following to /etc/nginx/nginx.conf under the http section:
    # Unicorn
     upstream unicorn {
       server unix:/root/shared/sockets/unicorn.sock fail_timeout=0;
    }
EOF

update-rc.d -f nginx defaults
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Unicorn

mkdir ~/shared
mkdir ~/shared/pids
mkdir ~/shared/log
mkdir ~/shared/sockets 

cp ~/chaipcr/web/config/etc/unicorn_init.d /etc/init.d/unicorn
chmod +x /etc/init.d/unicorn
mkdir /etc/unicorn
cp ~/chaipcr/web/config/etc/unicorn/chaipcr.conf /etc/unicorn/
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing 2

dd if=/dev/zero of=/zeros.bigfile bs=16M
sync
rm /zeros.bigfile
sync
mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

echo basic beaglebone setup done!</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo changing root password to chaipcr
echo &quot;root:chaipcr&quot; | chpasswd
sync
echo rebooting
shutdown -r 1
echo a reboot is scheduled after a minute</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
sleep 60
echo waiting for a restart
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo device is still connectable!

cd
echo unmounting any sdcard folders
umount /sdcard/*
umount /dev/mmcblk0p*

echo cleaning up sdcard
LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F

sync
sync
 fsck /dev/mmcblk1p1 -y -f
 fsck /dev/mmcblk0p1 -y -f

mount /dev/mmcblk0p1 /sdcard/upgrade/

exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Maintenance

cd /root/chaipcr/web
bundle exec rake db:migrate # migrates database as needed


exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#build( &quot;create_factory_settings_sdcard&quot;, build_machine:&quot;$build_machine&quot;, output_sdcard:&quot;/dev/sdb&quot;)
echo all done for $build_machine, you can call create_factory_settings_sdcard job to create a factory settings image. root password is chaipcr

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>