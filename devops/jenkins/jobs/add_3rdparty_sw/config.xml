<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Chaibio shoftware</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.28.0">
      <projectUrl>https://github.com/chaibio/chaipcr.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>bypass_julia</name>
          <description>Add julia to the build.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download folder URL</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>building_version</name>
          <description>Julia version</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>v0.6.2</string>
              <string>v0.6.1</string>
              <string>v0.6.0</string>
              <string>release-0.6</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
    
    cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr

EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
dpkg --configure -a</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# waiting 20min for the bulding device to flash
echo &quot;Waiting for the build device ($build_machine) to flash and become ready!&quot;
#sleep 1500

for i in {0..1200..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        sleep 10
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>#	echo update sources# if not updated?
echo kernel is updated	
lsb_release -a
uname -a
df -h

apt-get update
dpkg --configure -a
apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* 
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb*
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* 
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get -y -q purge qt4-*
dpkg --configure -a

apt-get -y clean
apt-get -y autoremove
apt-get -y autoclean

dpkg --configure -a

apt-get upgrade -y -q
dpkg --configure -a
df -h

echo packages installation done

apt-key update
apt-get update 
dpkg --configure -a
apt-get install -y -q git || exit 1
dpkg --configure -a
update-initramfs -u
touch /forcefsck

echo rebooting for changes to take effect.
sync
df -h
shutdown -r 1
echo a reboot is scheduled after a minute.
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo waiting for a restart
sleep 60
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>#!/bin/bash
apt-get update
apt-get -q -y install unzip parted || exit 1

sync

echo installing basic packages.
apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || exit 1
dpkg --configure -a
sync
sleep 30

if  g++ --version | grep 4.6
then
apt-key update
apt-get update
apt-get -y upgrade
dpkg --configure -a
apt-get -y install g++-4.7
apt-get clean
apt-get autoclean
dpkg --configure -a
rm /usr/bin/gcc
rm /usr/bin/g++
ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

df -h

echo Installing mysql
dpkg --configure -a

if mount | grep /data
then
    echo data partition is mounted
else
    echo mounting data partition
    mount /dev/mmcblk1p2 /data || true
    service mysql start
fi

sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server-5.5 mysql-server/root_password password chaipcr&quot;
sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server-5.5 mysql-server/root_password_again password chaipcr&quot;

sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server mysql-server/root_password password chaipcr&quot;
sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server mysql-server/root_password_again password chaipcr&quot;

echo Installing mysql server package
export DEBIAN_FRONTEND=noninteractive
sudo -E apt-get install -y -q --allow-unauthenticated mysql-server

echo Installing mysql client package
if sudo -E apt-get install -y -q --allow-unauthenticated libmysqlclient-dev 
then
     echo mysql client is installed
else
     if sudo -E apt-get install -y -q --allow-unauthenticated default-libmysqlclient-dev  
     then
            echo default mysql client is installed
      else
            echo error installing default mysql client
            exit 1
      fi
fi
echo done installing mysql

echo resetting mysql password
cat &gt;&gt; mysql_password_flush.sql &lt;&lt; EOF
    UPDATE user SET password=PASSWORD(&apos;&apos;) WHERE user=&apos;root&apos;;
    FLUSH PRIVILEGES;
    exit
EOF

echo calling mysql command line
if mysql -u root --password=chaipcr mysql &lt; mysql_password_flush.sql 
then
      echo Done resetting mysql password.
else
     echo Checking if already MySQL password is empty.
     mysql -u root mysql &lt; mysql_password_flush.sql || exit 1
     echo MySQL password found empty.
fi

rm mysql_password_flush.sql
df -h
echo done resetting mysql password
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Update Software
apt-key update
apt-get update

apt-get -y -q install lsb-release
sync
sleep 30

dpkg --configure -a
sync

apt-get -q -y update
apt-get -q -y install -f

apt-get -q -y install unzip || exit 1

dpkg --configure -a

echo &quot;FSCKFIX=yes&quot; &gt;&gt; /etc/default/rcS
apt-key list  | grep &quot;expired: &quot; | sed -ne &apos;s|pub .*/\([^ ]*\) .*|\1|gp&apos; | xargs -n1 sudo apt-key adv --keyserver keys.gnupg.net --recv-keys 
apt-get -q -y update

apt-get --force-yes -y -q install nodejs ruby ruby-dev  || exit 1
sync
sleep 30
dpkg --configure -a

apt-get --force-yes -y -q install libxslt-dev libxml2-dev  || exit 1
sync
sleep 30
dpkg --configure -a

apt-get -y -q install libtool || exit 1
dpkg --configure -a
sync
sleep 30

echo installing headers...
apt-get -y -q install linux-headers-`uname -r` || exit 1
apt-get install -y -q cmake || exit 1
sync
sleep 30
dpkg --configure -a

echo &quot;Build SOCI (or get its libs from repo)&quot;
cd ~

#http://downloads.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz?r=&amp;ts=1481630635&amp;use_mirror=netix
#wget &quot;http://downloads.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz&quot;
wget &quot;http://netix.dl.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz&quot;
tar xpvzf soci-3.2.2.tar.gz
dpkg --configure -a
cd soci-3.2.2
cmake -DCMAKE_BUILD_TYPE=Release -DSOCI_STATIC=OFF -DSOCI_TESTS=OFF -DWITH_SQLITE3=OFF -DSOCI_EMPTY=OFF -DWITH_MYSQL=ON -G &quot;Unix Makefiles&quot; || exit 1
make || exit 1
make install || exit 1
cd ..
rm -rf soci-3.2.2*
dpkg --configure -a
df -h
exit 0


</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
sleep 60
echo waiting for a restart
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia and different libs
sync

df -h
apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || true
ntpdate -b -s -u pool.ntp.org

sudo apt-get -q -y install gcc-4.8 g++-4.8 
sudo apt-get -q -y install libgfortran-6-dev liblapack3
sudo apt-get -q -y install libblas3gf liblapack3gf 
sudo apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libc-bin  || exit 1
apt-get -f -y -q install

apt-get install -q -y libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8  || exit 1
apt-get -f -y -q install

sudo apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8 liblapack-dev liblapack3 libopenblas-base libopenblas-dev || exit 1
apt-get -f -y -q install

apt-get -y -q install i2c-tools evtest git automake libtool || exit 1 
apt-get -y -q install device-tree-compiler || exit 1
apt-get -f -y -q install

sync
sync
fsck /dev/mmcblk1p1 -y -f
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing POCO
wget &quot;http://pocoproject.org/releases/poco-1.6.1/poco-1.6.1.tar.gz&quot;  || exit 1
tar xpvzf poco-1.6.1.tar.gz  || exit 1
cd poco-1.6.1
./configure || exit 1
make || exit 1

rm /usr/lib/libPoco* || true
rm /usr/local/lib/libPoco* || true

make install || exit 1
cd ..
rm -rf poco-1.6.1* poco-1.6.1.tar.gz

sync
fsck /dev/mmcblk1p1 -y -f
df -h

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleanup without envs

apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || true
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get install -q -y gfortran ntpdate || exit 1
ntpdate -b -s -u pool.ntp.org
sync

apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* || exit 1

echo cleanup with envs
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* || exit 1

apt-get clean
apt-get autoclean

apt-get -q -y autoremove

# tslib
#??sudo apt-get install -y tslib libts-bin
echo building tslib
cd

echo installing with envs..
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -y -q install i2c-tools evtest git automake libtool  || exit 1
echo with no envs
apt-get -y -q install i2c-tools evtest git automake libtool  || exit 1

git clone git://github.com/kergoth/tslib.git
cd tslib
cat &gt;&gt; /usr/include/linux/input.h &lt;&lt; __EOF__
#undef ABS_MAX
#undef ABS_CNT
#define ABS_MT_TOOL_X           0x3c    /* Center X tool position */
#define ABS_MT_TOOL_Y           0x3d    /* Center Y tool position */
#define ABS_MAX                 0x3f
#define ABS_CNT                 (ABS_MAX+1)
__EOF__

echo autoget tslib
./autogen.sh
echo configure tslib
./configure
echo making tslib
make || exit 1
make install || exit 1
cd
rm -r tslib

sync

echo Set environment variables 
cat &gt; ~/.profile &lt;&lt; EOL
    export SLOTS=/sys/devices/platform/bone_capemgr/slots
    export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    export TSLIB_TSEVENTTYPE=INPUT
    export TSLIB_CONSOLEDEVICE=none
    export TSLIB_FBDEVICE=/dev/fb0
    export TSLIB_CALIBFILE=/etc/pointercal
    export TSLIB_CONFFILE=/etc/ts.conf
    export TSLIB_PLUGINDIR=/usr/local/lib/ts
    export TSLIB_TSDEVICE=/dev/input/event1
    export POINTERCAL_FILE=/etc/pointercal
    export QWS_MOUSE_PROTO=tslib:/dev/input/event1
EOL
source ~/.profile

# Calibrate Touchscreen
cp /usr/local/etc/ts.conf /etc/
# maybe we can perform calibration on first use

#Edit /etc/ts.conf to uncomment the second line:
sed -i &apos;s/#module_raw input/module_raw input/&apos; /etc/ts.conf

#Run ts_configure and press crosshairs on LCD.. maybe on first run

echo check ldconfig
which ldconfig

echo patching /etc/ld.so.conf
echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf
ldconfig

echo Installing R

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 06F90DE5381BA480
echo deb http://cran.cnr.berkeley.edu/bin/linux/debian jessie-cran3/ &gt;&gt; /etc/apt/sources.list

apt-key update
apt-get update
apt-get -y -q upgrade

apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential || true

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get install -q -y gfortran ntpdate || exit 1

df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo downloading and installing Julia
sync
#pufreq-set --governor ondemand 
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

# add gfortran link to search path. 
ln -s /usr/lib/gcc/arm-linux-gnueabihf/4.9/libgfortran.so /usr/lib/libgfortran.so

cd
echo unmounting any sdcard folders
umount /sdcard/*
umount /dev/mmcblk0p*

LC_ALL=C /sbin/sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0x83,*
__EOF__

/sbin/partprobe /dev/mmcblk0
/sbin/mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
if mount /dev/mmcblk0p1 /sdcard/upgrade/
then
    echo &quot;temp sdcard folder mounted&quot;
else
   echo &quot;Error mounting temp sdcard folder&quot;
   exit 1
fi

# creating a temporary swap file on sdcard
if fallocate -l 2G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
then
    echo &quot;swap file created successfully&quot;
else
   echo &quot;failed creating swap file&quot;
   exit 1
fi

sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile

#verifying swap file is successfully added
sudo swapon -s

free -m

apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev libedit-dev parted git ntp build-essential curl python pkg-config libssl-dev libarpack2 libblas3 liblapack3

if $bypass_julia
then
       echo Bypassing JULIA
       touch /etc/bypassjulia.flag
       exit 0
fi

apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas3 libgfortran3 liblapack3  || exit 1

mkdir -p ~/julia-compile
cd ~/julia-compile


default_slim_arch_filename=&quot;julia-$building_version-slim-default.tgz&quot;
echo Slim arch filename $default_slim_arch_filename
wget $download_prefix/$default_slim_arch_filename || exit 1

sync

echo installing julia




if tar xf $default_slim_arch_filename -C / julia/usr --strip-components=1 
then
    echo &quot;extracted julia usr files&quot;
else
   echo &quot;Error extracting julia&quot;
   exit 1
fi

sync

echo &quot;export JULIA_PKGDIR=/root/.julia&quot;&gt;&gt;~/.profile
source ~/.profile
sync
sleep 60

if [ -e /usr/share/julia/bin/julia ] &amp;&amp; [ ! -e /usr/bin/julia ]
then
	ln -sf /usr/share/julia/bin/julia /usr/bin/julia
fi

#============== test
echo test finished. cleaning..
sync


      apt-get -y -q install g++ gcc ntp ntpdate git unzip automake sshpass build-essential || true
      ntpdate -b -s -u pool.ntp.org

      sudo apt-get -q -y install libgfortran-6-dev liblapack3
      sudo apt-get -q -y install libblas3gf liblapack3gf 
      sudo apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libc-bin  || exit 1
apt-get -f -y -q install

      apt-get install -q -y libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8  || exit 1
apt-get -f -y -q install

      sudo apt-get -q -y install libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8 liblapack-dev liblapack3 libopenblas-base libopenblas-dev || exit 1
apt-get -f -y -q install

      apt-get -y -q install evtest git automake libtool || exit 1 
      apt-get -f -y -q install

      apt-get  -y -q install  libblas3gf libblas3gf
      apt-get  -y -q install  parted linux-headers-`uname -r` parted automake build-essential cmake curl device-tree-compiler evtest g++ gfortran git hdf5-tools i2c-tools libarpack2 libblas-common libblas-dev libblas3 libedit-dev libfftw3-dev libfftw3-double3 libfftw3-single3 libfontconfig1-dev libfreetype6-dev libgfortran3 libgfortran3 libgmp3-dev liblapack3 liblapack3gf libllvm3.8 libmetis5 libmpfr-dev libopenblas-base libopenblas-dev libqt4-webkit libssl-dev libtool libunwind8 libxcursor-dev libxext-dev libxfixes-dev libxft-dev libxi-dev libxml2-dev libxrandr-dev libxrender-dev libxslt-dev lsb-release m4 nodejs ntp ntpdate parted pkg-config python sshpass unzip
      apt-get install -y -q liblapack-dev
      apt install -y -q liblapack-dev libblas-dev
      apt install -y -q libmysqlclient-dev

      sed -i &apos;1i using DataArrays&apos; /root/chaipcr/bioinformatics/juliaserver.jl
      sed -i &apos;1i push!(LOAD_PATH, &quot;/root/chaipcr/bioinformatics/QpcrAnalysis/&quot;)&apos; /root/chaipcr/bioinformatics/juliaserver.jl

      echo Build time- adding pre-requesits
      free -m
      apt-get update
      apt-get -q -y --fix-broken install
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libgtk-3-0
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libpango1.0-0 
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libglib2.0-0
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install libcairo2
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:%PATH% DEBIAN_FRONTEND=noninteractive apt-get -q -y install gettext

apt-get -q -y --fix-broken install

DEBIAN_FRONTEND=noninteractive apt-get -q -y install gettext
DEBIAN_FRONTEND=noninteractive apt-get -q -y install libgtk-3-0
apt-get -y -q install libpango1.0-0 libglib2.0-0 libcairo2

echo $(date) Performing precompilling julia packages
if [ -e /tmp/mysql.sock ]
then
	echo &quot;MySQL sockets file found&quot;
else
	if [ -e /run/mysqld/mysqld.sock ]
	then
		echo &quot;Clonning MySQL sockets file&quot;
		ln -s /run/mysqld/mysqld.sock /tmp/mysql.sock
	else
		echo &quot;MySQL sockets file not found.&quot; 
		exit 1
	fi
fi

git config --global user.email &apos;info@chaibio.org&apos;
git config --global user.name &apos;Chaibio qPCR&apos;
git config --global github.user &quot;Chaibio&quot;











cd
rm -r ~/julia-compile
sync

sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

sync

sleep 60

echo &quot;Setting up Julia: Initializing rep&quot;
julia --print &quot;Pkg.init()&quot;
sync
sleep 60




rm -r ~/.julia

echo &quot;Setting up Julia: Updating rep&quot;
julia --print &quot;Pkg.init()&quot;
julia --print &quot;Pkg.update()&quot;
sync
sleep 60
echo precompiling mandatory packages.
cat &lt;&lt;EOF &gt;&gt; chaibio_packages.jl

println(&quot;Setting up Julia: Adding packages&quot;)

       println(&quot;installing library: Compat&quot;);Pkg.add(&quot;Compat&quot;,v&quot;0.61.0&quot;,v&quot;0.61.1-&quot;)
       println(&quot;installing library: SHA&quot;);Pkg.add(&quot;SHA&quot;,v&quot;0.5.6&quot;,v&quot;0.5.7-&quot;)
       println(&quot;installing library: URIParser&quot;); Pkg.add(&quot;URIParser&quot;,v&quot;0.3.1&quot;,v&quot;0.3.2-&quot;)
       println(&quot;ADDING: BinDeps&quot;); Pkg.add(&quot;BinDeps&quot;,v&quot;0.8.0&quot;,v&quot;0.8.1-&quot;)
       println(&quot;installing library Blosc&quot;); Pkg.add(&quot;Blosc&quot;,v&quot;0.3.0&quot;,v&quot;0.3.1-&quot;)
       println(&quot;installing library BinaryProvider&quot;); Pkg.add(&quot;BinaryProvider&quot;,v&quot;0.2.5&quot;,v&quot;0.2.6-&quot;)


       println(&quot;installing library: FixedPointNumbers&quot;); Pkg.add(&quot;FixedPointNumbers&quot;,v&quot;0.4.6&quot;,v&quot;0.4.7-&quot;)
       println(&quot;installing library: ColorTypes&quot;); Pkg.add(&quot;ColorTypes&quot;,v&quot;0.6.7&quot;,v&quot;0.6.8-&quot;)
       println(&quot;installing library: Reexport&quot;); Pkg.add(&quot;Reexport&quot;,v&quot;0.1.0&quot;,v&quot;0.1.1-&quot;)
       println(&quot;installing library: Colors&quot;); Pkg.add(&quot;Colors&quot;,v&quot;0.8.2&quot;,v&quot;0.8.3-&quot;)
       println(&quot;installing library: NaNMath&quot;); Pkg.add(&quot;NaNMath&quot;,v&quot;0.3.1&quot;,v&quot;0.3.2-&quot;)
	println(&quot;ADDING: MathProgBase&quot;); Pkg.add(&quot;MathProgBase&quot;,v&quot;0.6.0&quot;,v&quot;0.6.1-&quot;)


       println(&quot;installing library: Graphics&quot;); Pkg.add(&quot;Graphics&quot;,v&quot;0.2.0&quot;,v&quot;0.2.1-&quot;)
       println(&quot;installing library Cairo&quot;); Pkg.add(&quot;Cairo&quot;,v&quot;0.5.1&quot;,v&quot;0.5.2-&quot;)
       println(&quot;installing library: Gtk&quot;); Pkg.add(&quot;Gtk&quot;,v&quot;0.13.1&quot;,v&quot;0.13.2-&quot;)

       println(&quot;installing library: IntervalSets&quot;); Pkg.add(&quot;IntervalSets&quot;,v&quot;0.2.0&quot;,v&quot;0.2.1-&quot;)
       println(&quot;installing library: RoundingIntegers&quot;); Pkg.add(&quot;RoundingIntegers&quot;,v&quot;0.0.3&quot;,v&quot;0.0.4-&quot;)
	println(&quot;ADDING: DataStructures&quot;); Pkg.add(&quot;DataStructures&quot;, v&quot;0.7.4&quot;, v&quot;0.7.5-&quot;)
       println(&quot;installing library: Reactive&quot;); Pkg.add(&quot;Reactive&quot;,v&quot;0.6.0&quot;,v&quot;0.6.1-&quot;)

       println(&quot;installing library: Missings&quot;); Pkg.add(&quot;Missings&quot;,v&quot;0.2.7&quot;,v&quot;0.2.8-&quot;)
       println(&quot;installing library: WeakRefStrings&quot;); Pkg.add(&quot;WeakRefStrings&quot;,v&quot;0.4.3&quot;,v&quot;0.4.4-&quot;)
       println(&quot;installing library: NamedTuples &quot;); Pkg.add(&quot;NamedTuples&quot;,v&quot;4.0.0&quot;,v&quot;4.0.1-&quot;)

	println(&quot;ADDING: Nullables&quot;); Pkg.add(&quot;Nullables&quot;,v&quot;0.0.3&quot;, v&quot;0.0.4-&quot;)

	println(&quot;ADDING: JSON&quot;); Pkg.add(&quot;JSON&quot;,v&quot;0.16.4&quot;, v&quot;0.16.5-&quot;)
       println(&quot;installing library: CategoricalArrays&quot;); Pkg.add(&quot;CategoricalArrays&quot;,v&quot;0.3.6&quot;,v&quot;0.3.7-&quot;)

       println(&quot;installing library: Calculus&quot;); Pkg.add(&quot;Calculus&quot;,v&quot;0.2.2&quot;,v&quot;0.2.3-&quot;)

       println(&quot;installing library: TranscodingStreams&quot;); Pkg.add(&quot;TranscodingStreams&quot;,v&quot;0.5.1&quot;,v&quot;0.5.2-&quot;)
       println(&quot;installing library: CodecZlib&quot;); Pkg.add(&quot;CodecZlib&quot;,v&quot;0.4.2&quot;,v&quot;0.4.3-&quot;)
       println(&quot;installing library: DataStreams&quot;); Pkg.add(&quot;DataStreams&quot;,v&quot;0.3.4&quot;,v&quot;0.3.5-&quot;)
       println(&quot;installing library: DiffBase&quot;); Pkg.add(&quot;DiffBase&quot;,v&quot;0.2.0&quot;,v&quot;0.2.1-&quot;)
       println(&quot;installing library: Distances&quot;); Pkg.add(&quot;Distances&quot;,v&quot;0.5.0&quot;,v&quot;0.5.1-&quot;)
       println(&quot;installing library: FileIO&quot;); Pkg.add(&quot;FileIO&quot;,v&quot;0.7.0&quot;,v&quot;0.7.1-&quot;)
	println(&quot;ADDING: SpecialFunctions&quot;); Pkg.add(&quot;SpecialFunctions&quot;,v&quot;0.3.6&quot;,v&quot;0.3.7-&quot;)

       println(&quot;installing library: ForwardDiff&quot;); Pkg.add(&quot;ForwardDiff&quot;,v&quot;0.4.2&quot;,v&quot;0.4.3-&quot;)


       println(&quot;installing library: GtkReactive&quot;); Pkg.add(&quot;GtkReactive&quot;,v&quot;0.4.0&quot;,v&quot;0.4.1-&quot;)
       println(&quot;installing library: HttpCommon&quot;); Pkg.add(&quot;HttpCommon&quot;,v&quot;0.4.0&quot;,v&quot;0.4.1-&quot;)
       println(&quot;installing library: HttpParser&quot;); Pkg.add(&quot;HttpParser&quot;,v&quot;0.3.1&quot;,v&quot;0.3.2-&quot;)
       println(&quot;installing library: LegacyStrings&quot;); Pkg.add(&quot;LegacyStrings&quot;,v&quot;0.3.0&quot;,v&quot;0.3.1-&quot;)
       println(&quot;installing library: MbedTLS&quot;); Pkg.add(&quot;MbedTLS&quot;,v&quot;0.5.8&quot;,v&quot;0.5.9-&quot;)
       println(&quot;installing library: StaticArrays&quot;); Pkg.add(&quot;StaticArrays&quot;,v&quot;0.7.0&quot;,v&quot;0.7.1-&quot;)
       println(&quot;installing library: NearestNeighbors&quot;); Pkg.add(&quot;NearestNeighbors&quot;,v&quot;0.3.0&quot;,v&quot;0.3.1-&quot;)
       println(&quot;installing library: ReverseDiffSparse&quot;); Pkg.add(&quot;ReverseDiffSparse&quot;,v&quot;0.7.3&quot;,v&quot;0.7.4-&quot;)
       println(&quot;installing library: SortingAlgorithms&quot;); Pkg.add(&quot;SortingAlgorithms&quot;,v&quot;0.2.0&quot;,v&quot;0.2.1-&quot;)
       println(&quot;installing library: StatsBase&quot;); Pkg.add(&quot;StatsBase&quot;,v&quot;0.20.1&quot;,v&quot;0.20.2-&quot;)

	println(&quot;All additional packages&quot;)


	println(&quot;ADDING: DataFrames&quot;)
	Pkg.add(&quot;DataFrames&quot;, v&quot;0.11.2&quot;, v&quot;0.11.3-&quot;)
	println(&quot;ADDING: HDF5&quot;)
	Pkg.add(&quot;HDF5&quot;,v&quot;0.8.8&quot;, v&quot;0.8.9-&quot;)
	println(&quot;ADDING: JLD&quot;)
	Pkg.add(&quot;JLD&quot;,v&quot;0.8.3&quot;,v&quot;0.8.4-&quot;) # to fulfil requirments of Ipopt, JuMP, and NLopt
	println(&quot;ADDING: Clustering&quot;)
	Pkg.add(&quot;Clustering&quot;,v&quot;0.9.1&quot;, v&quot;0.9.2-&quot;)
	println(&quot;ADDING: Ipopt&quot;)
	Pkg.add(&quot;Ipopt&quot;,v&quot;0.2.4&quot;, v&quot;0.2.9-&quot;)
	println(&quot;ADDING: NLopt&quot;)
	Pkg.add(&quot;NLopt&quot;,v&quot;0.3.6&quot;, v&quot;0.3.7-&quot;)
	println(&quot;ADDING: JuMP&quot;)
	Pkg.add(&quot;JuMP&quot;,v&quot;0.17.1&quot;, v&quot;0.17.2-&quot;)
	println(&quot;ADDING: HttpServer&quot;)
	Pkg.add(&quot;HttpServer&quot;,v&quot;0.2.0&quot;, v&quot;0.2.1-&quot;)
	println(&quot;ADDING: ProfileView&quot;)
	Pkg.add(&quot;ProfileView&quot;,v&quot;0.3.0&quot;, v&quot;0.3.1-&quot;)
	println(&quot;ADDING: Dierckx&quot;)
	Pkg.add(&quot;Dierckx&quot;,v&quot;0.3.0&quot;, v&quot;0.3.1-&quot;)
	println(&quot;ADDING: MySQL&quot;)
	Pkg.add(&quot;MySQL&quot;,v&quot;0.3.0&quot;, v&quot;0.3.1-&quot;)
	println(&quot;ADDING: DataArrays&quot;)
	Pkg.add(&quot;DataArrays&quot;,v&quot;0.7.0&quot;, v&quot;0.7.1-&quot;)
	println(&quot;ADDING: PkgDev&quot;)
	Pkg.add(&quot;PkgDev&quot;,v&quot;0.1.6&quot;, v&quot;0.1.7-&quot;)
 
	println(&quot;ADDING: Done&quot;)
	Pkg.build(&quot;DataArrays&quot;,&quot;DataStructures&quot;, &quot;SpecialFunctions&quot;, &quot;MathProgBase&quot;, &quot;HDF5&quot;, &quot;Clustering&quot;, &quot;Nullables&quot;,&quot;JSON&quot;, &quot;JLD&quot;, &quot;NLopt&quot;, &quot;JuMP&quot;, &quot;HttpServer&quot;, &quot;ProfileView&quot;, &quot;Dierckx&quot;, &quot;Ipopt&quot;, &quot;MySQL&quot;, &quot;DataFrames&quot;)
	println(&quot;Building: Done&quot;)

		println(&quot;Pinning all done&quot;)
		using PkgDev
                println(&quot;Used PkgDev&quot;)
		using DataStructures, SpecialFunctions, MathProgBase, HDF5, Clustering
                println(&quot;Used DataStructures, SpecialFunctions, MathProgBase, HDF5, Clustering&quot;)
		using Nullables, JSON, JLD, NLopt, JuMP, HttpServer, ProfileView, DataArrays
                println(&quot;Used Nullables, JSON, JLD, NLopt, JuMP, HttpServer, ProfileView, DataArrays&quot;)
		using Dierckx, Ipopt, MySQL, DataFrames
	        println(&quot;All packages used&quot;)

		PkgDev.generate(&quot;QpcrAnalysis&quot;, &quot;MIT&quot;)
		println(&quot;QpcrAnalysis structure generated&quot;)
		Pkg.status()
	println(&quot;Using: Done&quot;)

println(&quot;Setting up Julia: done testing.. quitting..&quot;)
quit()
EOF
sync
sleep 60

# leave julia staff to be able to test why it crashes the system
julia chaibio_packages.jl
rm chaibio_packages.jl

echo test finished. cleaning..
sync
cd
rm -r ~/julia-compile
df -h
sync
sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing QT
dpkg --configure -a

apt-get update
apt-get install -y -q libfontconfig1-dev libfreetype6-dev

echo downloading compiled QT v4.8.6
cd /sdcard/upgrade/
#wget $download_prefix/qt-everywhere-compiled-4.8.6.tgz
wget $download_prefix/qt-everywhere-slim-4.8.6.tgz
tar xfv qt-everywhere-slim-4.8.6.tgz

echo installing tslib first
cd tslib-compile/tslib/
make install  || exit 1
cd ../..

echo downloading QT binaries
#cd qt-everywhere-opensource-src-4.8.6/
#make install || exit 1
mv opt/QtEmbedded /opt
rm -r /opt/QtEmbedded/examples/

cd /sdcard/upgrade/
rm -r qt-everywhere-opensource-src-4.8.6
rm qt-everywhere-compiled-4.8.6.tgz
rm qt-everywhere-slim-4.8.6.tgz
rm -r tslib-compile
rm -r opt
cd
cp /opt/QtEmbedded/bin /usr/lib/arm-linux-gnueabihf/qt4/ -r || true

echo done installing QT to /opt/

sync
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command></command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>if $bypass_julia
then
       echo Bypassing JULIA check
       exit 0
fi

echo checking julia installation
which julia
julia --version

exit 0




</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>#echo cleaning julia build
#cd /sdcard/upgrade
#rm -r julia-compile
#sync

echo Disable Services
systemctl disable cloud9.service
systemctl disable bonescript.service
systemctl disable bonescript.socket
systemctl disable bonescript-autorun.service
rm /etc/systemd/system/sockets.target.wants/cloud9.socket

echo ifup script fix
echo &quot;Due to a bug (https://bugs.launchpad.net/ubuntu/+source/ntp/+bug/1206164) a script from ifup has to be fixed&quot;
sed -i &apos;s/) \&amp;/) &lt;\/dev\/null &gt;\/dev\/null 2&gt;\&amp;1 \&amp;/g&apos; /etc/network/if-up.d/ntpdate

apt-get clean
apt-get autoclean

apt-get -q -y autoremove
sync

DEBIAN_FRONTEND=noninteractive apt-get -y -q install nginx-full  || exit 1
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
sync
sleep 30

sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Install Ruby Packages
gem install bundle
#apt-get -q -y install nodejs 
#gem install nodejs
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Build gems with native extensions
bundle config build.atomic --use-system-libraries || exit 1
bundle config build.json --use-system-libraries || exit 1
bundle config build.sqlite3 --use-system-libraries || exit 1
bundle config build.nokogiri --use-system-libraries || exit 1

df -h</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Remote Support Access
sync
echo &quot;temp\ntemp\nAny name\n\n\n\n\n\n&quot; | adduser service # any pw will do, will delete it below

echo setting up service user
adduser service sudo
mkdir /root/.ngrok2
mkdir /home/service/.ssh
chown service /home/service/.ssh
chgrp service /home/service/.ssh
cd

sync

#wget https://dl.ngrok.com/ngrok_2.0.19_linux_arm.zip --no-check-certificate
wget $download_prefix/ngrok_2.0.19_linux_arm.zip  --no-check-certificate
unzip -o ngrok_2.0.19_linux_arm.zip
rm ngrok_2.0.19_linux_arm.zip
rm ngrok
df -h
exit 0</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo removing service user password
#Edit /etc/shadow, remove password for service by setting pw to *
passwd service -d
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing boost
sync
apt-get -q -y install libboost-all-dev || exit 1

df -h
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing

dd if=/dev/zero of=/zeros.bigfile bs=16M
sync
rm /zeros.bigfile
sync
mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi
df -h
echo basic beaglebone setup done!</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#build( &quot;create_factory_settings_sdcard&quot;, build_machine:&quot;$build_machine&quot;, output_sdcard:&quot;/dev/sdb&quot;)
echo all 3rd party software done for $build_machine, you can call call deploy_chibio job to add chibio software now.

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>