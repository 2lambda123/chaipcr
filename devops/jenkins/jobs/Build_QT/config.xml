<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Building QT and upload it to download server without reformatting</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Remote build beaglebone.</description>
          <defaultValue>192.168.1.99</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. Could be /usr/share/nginx/html/download or /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>low_performance</name>
          <description>Reduce cpu performance for a better stability.
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host.
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable- $build_machine.
	sleep 20
    
done

ssh -t root@$build_machine &apos;lsblk; exit 0&apos;

echo done connection check.</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a
umount /dev/mmcblk0p*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command># download flasher image
#wget https://rcn-ee.com/rootfs/bb.org/testing/2016-10-09/console/BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz

swapoff -a
mount -o remount,rw /

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update
apt-get install xz-utils parted cpufrequtils git -y -q

#no reformating
exit 0

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#echo Waiting for the device to come up again
#sleep 90#

#echo waiting 30min for the building device to flash
#sleep 1800

for i in {0..1800..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is  up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>exit 0
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Starting building Julia on $build_machine
apt-get update

apt-get -y -q upgrade
apt-get -f -y -q install

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia
df -h

if ! apt-get -q -y install gcc-4.8 g++-4.8 
then
    echo error downloading gcc 4.8.. trying 4.7
    apt-get -q -y install g++-4.7
if apt-get -q -y install gcc-4.7
then
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

fi


apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential
dpkg --configure -a
sync
sleep 5

if  g++ --version | grep 4.6
then
  apt-get update
  apt-get -y upgrade
  dpkg --configure -a
  apt-get -y install g++-4.7
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

if  g++ --version | grep 4.6
then
   echo &quot;Can&apos;t update g++&quot;
   exit 1
fi

echo arranging the sdcard

swapoff -a
umount /sdcard/*
umount /dev/mmcblk0p*

ln -sf /usr/bin/ld /usr/bin/ld.gold
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0x83,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
mount /dev/mmcblk0p1 /sdcard/upgrade/

# creating a temporary swap file on sdcard
sudo fallocate -l 2G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile
#verifying swap file is successfully added
sudo swapon -s

free -m


#echo Building CMake
#   cd /sdcard/upgrade
#   wget https://cmake.org/files/v3.6/cmake-3.6.1.tar.gz
#   tar xfv cmake-3.6.1.tar.gz
#   cd cmake-3.6.1
#   ./bootstrap
#   make
#   make install
#   cd ..
#   rm -r cmake-3.6.1*

#apt-get -y -q install lsb-release
#sync
#sleep 30
dpkg --configure -a

apt-get autoremove -y -q
apt-get -f -y -q install

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo compiling TSLib
# TSLib
mount /dev/mmcblk0p1 /sdcard/upgrade/ || true
cd /sdcard/upgrade/
mkdir tslib-compile
cd tslib-compile/

git clone git://github.com/kergoth/tslib.git
cd tslib
./autogen.sh
./configure  --prefix=/usr --disable-tools
make
make install
cd ../
#rm -r tslib
ln -s /usr/local/lib/libts.so.0.5.0 /lib/libts-1.0.so.0
cp -P /usr/local/lib/libts* /lib/arm-linux-gnueabihf/

echo building QT

cd /sdcard/upgrade
apt-get update
apt-get install -y -q libqt4-webkit libfontconfig1-dev libfreetype6-dev libx11-dev libxcursor-dev libxext-dev libxfixes-dev libxft-dev libxi-dev libxrandr-dev libxrender-dev

wget http://download.qt.io/archive/qt/4.8/4.8.6/qt-everywhere-opensource-src-4.8.6.tar.gz
tar xfv qt-everywhere-opensource-src-4.8.6.tar.gz
cd qt-everywhere-opensource-src-4.8.6

cat &gt; mkspecs/qws/linux-arm-gnueabi-g++/qmake.conf &lt;&lt; EOF
#Rewrite mkspecs/qws/linux-arm-gnueabi-g++/qmake.conf file with following content:

include(../../common/linux.conf)
include(../../common/gcc-base-unix.conf)
include(../../common/g++-unix.conf)
include(../../common/qws.conf)

# modifications to g++.conf
QMAKE_CC                = gcc
QMAKE_CXX               = g++
QMAKE_LINK              = g++
QMAKE_LINK_SHLIB        = g++

# modifications to linux.conf
QMAKE_AR                = ar cqs
QMAKE_OBJCOPY           = objcopy
QMAKE_STRIP             = strip

# tslib
QMAKE_CFLAGS += -I/usr/include
QMAKE_LFLAGS += -L/usr/lib -lts

QMAKE_INCDIR += /usr/include
QMAKE_LIBDIR += /usr/lib

load(qt_config)

EOF

./configure -prefix /opt/QtEmbedded -opensource -confirm-license -no-qt3support -qt-zlib -no-libtiff -qt-libpng -no-libmng -qt-libjpeg -embedded arm -xplatform qws/linux-arm-gnueabi-g++ -little-endian -qt-freetype -no-opengl -qt-gfx-vnc -qt-gfx-linuxfb -depths 8,16,18,32 -qt-kbd-tty -qt-kbd-linuxinput -qt-mouse-linuxinput -host-little-endian -no-pch -qt-mouse-tslib

make
make install

</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo test finished. cleaning..
swapoff /sdcard/upgrade/swapfile
rm /sdcard/upgrade/swapfile

cd /sdcard/upgrade/

echo archiving..

arch_filename=&quot;qt-everywhere-compiled-4.8.6.tgz&quot;
slim_arch_filename=&quot;qt-everywhere-slim-4.8.6.tgz&quot;

echo Slim arch filename $slim_arch_filename
echo Arch $arch_filename

tar fcz $arch_filename qt-everywhere-opensource-src-4.8.6
tar fcz $slim_arch_filename /opt/QtEmbedded

ls -ahl fcz $arch_filename $slim_arch_filename 

sync</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo uploading QT Archive file to server


arch_filename=&quot;qt-everywhere-compiled-4.8.6.tgz&quot;
slim_arch_filename=&quot;qt-everywhere-slim-4.8.6.tgz&quot;

echo Slim arch filename $slim_arch_filename
echo Arch $arch_filename
                                                                                                                                 
scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/$arch_filename $local_download_folder/
chmod 777 $local_download_folder/$arch_filename
#ln -sf $local_download_folder/arch_filename $local_download_folder/qt486-default.tgz

scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/$slim_arch_filename $local_download_folder/
chmod 777 $local_download_folder/$slim_arch_filename
#ln -sf $local_download_folder/slim_arch_filename $local_download_folder/qt486-default.tgz


ls -ahl $local_download_folder/$arch_filename $local_download_folder/$slim_arch_filename

exit 0</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleaning up
cd /sdcard/upgrade/

echo deleting $arch_filename

rm $arch_filename
rm $slim_arch_filename

ls -ahl

rm -r  qt-everywhere-opensource-src-4.8.6* -r
rm -r tslib-compile

sync
ls -ah

exit 0
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>