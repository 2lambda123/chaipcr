<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Creates a factory settings image from for connected BBB.&#xd;
- create a grep sdcard&#xd;
- start BBB on grep mode&#xd;
- restart BBB on normal more&#xd;
- backup grepped image&#xd;
- apply process_raw_image.sh and create_sdcard.sh scripts&#xd;
- exports the sdcard as an image file&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.27.1">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.18.1">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description></description>
          <defaultValue>10.0.100.240</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. 
Apache server: /var/www/html/download
or 
Nginx (as on 10.0.1.20): /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download server url. Example: http://10.0.1.20/download</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sdcard_filename</name>
          <description>sdcard default filename</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>output_image_prefix</name>
          <description>Class of the upgrade image generated during this process. Could be empty, kernel44, kernel49, kernel 41, kernel 38, allthirdparty, or release.
</description>
          <defaultValue>fresh</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>no_factorysettings_sdcard</name>
          <description>No factory settings sdcard image created if this paramter is checked.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>build_branch</name>
          <description>branch contains building scripts</description>
          <defaultValue>trunk</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>image_version</name>
          <description>Build version number. Helps in output files naming.</description>
          <defaultValue>0.0.0.0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

#the block device of the created factory settings sdcard: You can say:
#/dev/sdb to write directly to a physical sdcard.
#or /tmp/sdcard_image.img to export a factory settings sdcard image.
#tmp_output_sdcard=/tmp/${BUILD_NUMBER}/sdcard_${BUILD_NUMBER}.img

echo user: $(whoami)

echo Creating an sdcard image for the device at $build_machine
#echo Path to SDCard image: $tmp_output_sdcard
echo Environmental variables:
env

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm jq

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

#echo deleting root password in case of chaipcr
#sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
sshpass -p chaipcr ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
    
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
		KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
	EOF
	ssh-keygen -A || true

	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until sshpass -p chaipcr ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.


ls
echo now at $(pwd)
rm build_report.xml

        echo Branch param $build_branch
        clean_build_branch=$build_branch
        clean_build_branch=${clean_build_branch#&quot;branches/&quot;}
        clean_build_branch=${clean_build_branch#&quot;refs/heads/&quot;}
        clean_build_branch=${clean_build_branch#&quot;tags/&quot;}
        clean_build_branch=${clean_build_branch#&quot;trunk&quot;}
        clean_build_branch=${clean_build_branch#&quot;master&quot;}
        echo Cleaned branch param $clean_build_branch

        branch_param=
        branch_name=

        if [ -z $build_branch ] || ! [[ &quot;$build_branch&quot; == *\/* ]]  || [ &quot;$build_branch&quot; = &quot;trunk&quot; ]
        then
                echo No build branch chosen
        else
                branch_name=$clean_build_branch
                branch_param=&quot;-b $branch_name&quot;
                echo Cloning branch and param $branch_name and $branch_param
        fi

		sudo rm -r tmp || true
		mkdir tmp || true
		cd tmp

		git clone $branch_param https://github.com/chaibio/chaipcr.git || exit 1
        cd chaipcr || exit 1

        if [ -z $branch_name ]
        then
                echo No build branch chosen
        else
                git checkout $branch_name
        fi


echo now at $(pwd)
ls

</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.6.1">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

if [ -e /root/debug_image ]
then
     echo &quot;Cann&apos;t save a debug image&quot;
     exit 1
fi

dpkg --configure -a
sync
swapoff -a
umount /dev/mmcblk0p*
blockdev --flushbufs /dev/mmcblk0
partprobe /dev/mmcblk0
#sfdisk -R /dev/mmcblk0
udevadm trigger --subsystem-match=block; udevadm settle
blockdev --rereadpt /dev/mmcblk0
#hdparm -z /dev/mmcblk0
sync
sleep 60
sync
lsof
umount /dev/mmcblk0p* -v
sleep 60
umount /dev/mmcblk0* -f -v || true
umount /sdcard/* -f -v

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

echo kill unused cpu consuming processes
pids=$( pidof sh )

for pp in $pids
do
#       echo &quot;Process $pp&quot;
        if ps aux | grep chaibio | grep $pp
        then
                echo Killing $pp
                kill -9 $pp
        fi
done

pkill ruby2.3 
pkill mysqld
pkill julia
pkill julia
pkill mysqld
pkill ruby2.3
pkill ruby2.3
pkill nginx
pkill nginx

echo installing missing packages.
dpkg --configure -a --force-confdef --force-confnew
apt-get update
apt-get install -y -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confnew parted -y -q

blockdev --flushbufs /dev/mmcblk0
partprobe /dev/mmcblk0
#sfdisk -R /dev/mmcblk0
udevadm trigger --subsystem-match=block; udevadm settle
blockdev --rereadpt /dev/mmcblk0
#hdparm -z /dev/mmcblk0

if LC_ALL=C /sbin/sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__
then
	echo SDCard partitioned!
else
	echo error formatting SDCard. retrying..
        blockdev --flushbufs /dev/mmcblk0
        partprobe /dev/mmcblk0
#        sfdisk -R /dev/mmcblk0
        udevadm trigger --subsystem-match=block; udevadm settle
        blockdev --rereadpt /dev/mmcblk0
        #hdparm -z /dev/mmcblk0
        dd if=/dev/zero of=/dev/mmcblk0 bs=51200 count=1000
        sync
        blockdev --flushbufs /dev/mmcblk0
        partprobe /dev/mmcblk0
#        sfdisk -R /dev/mmcblk0
        udevadm trigger --subsystem-match=block; udevadm settle
        blockdev --rereadpt /dev/mmcblk0
        #hdparm -z /dev/mmcblk0

LC_ALL=C /sbin/sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

        blockdev --flushbufs /dev/mmcblk0
        partprobe /dev/mmcblk0
#        sfdisk -R /dev/mmcblk0
        udevadm trigger --subsystem-match=block; udevadm settle
        blockdev --rereadpt /dev/mmcblk0
        #hdparm -z /dev/mmcblk0

      mkfs.vfat /dev/mmcblk0p1 -n CHAIBIO || true
      mkfs.fat /dev/mmcblk0p1 -n CHAIBIO || true
fi

blockdev --flushbufs /dev/mmcblk0
partprobe /dev/mmcblk0
#sfdisk -R /dev/mmcblk0
udevadm trigger --subsystem-match=block; udevadm settle
blockdev --rereadpt /dev/mmcblk0
#hdparm -z /dev/mmcblk0

if command -v mkfs.fat 
then
      mkfs.fat /dev/mmcblk0p1 -n CHAIBIO
else
      mkfs.vfat /dev/mmcblk0p1 -n CHAIBIO
fi

mkdir -p /tmp/grep_sdcard
if mount /dev/mmcblk0p1 /tmp/grep_sdcard
then
     echo SDCard mounted successfully.
else
     echo Failed to mount SDCard.
     exit 1
fi

lsblk</command>
      <execEachLine>false</execEachLine>
      <hideCommand>false</hideCommand>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo now at $(pwd)
cd tmp/chaipcr
echo now at $(pwd)
ls

sshpass -p chaipcr scp -r devops/grabimage_sdcard/* root@$build_machine:/tmp/grep_sdcard/
sshpass -p chaipcr scp -r devops/grabimage_sdcard/uEnv.sdcard.txt root@$build_machine:/tmp/grep_sdcard/uEnv.txt
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.6.1">
      <siteName>root@$build_machine:22</siteName>
      <command>echo patching grep sdcard to boot only once
sed &quot;s/reboot/rm \/mnt\/uEnv.txt ; reboot/&quot; -i /tmp/grep_sdcard/autorun.sh
sed &quot;s/halt/rm \/mnt\/uEnv.txt ; reboot # /&quot; -i /tmp/grep_sdcard/autorun.sh

sed &quot;s/reboot/rm \/mnt\/uEnv.txt ; reboot/&quot; -i /tmp/grep_sdcard/pack_latest_version.sh
sed &quot;s/halt/rm \/mnt\/uEnv.txt ; reboot # /&quot; -i /tmp/grep_sdcard/pack_latest_version.sh

sync
ls /tmp/grep_sdcard -ahl
umount /tmp/grep_sdcard

echo scheduling a restart in a min
shutdown -r 1
exit 0

</command>
      <execEachLine>false</execEachLine>
      <hideCommand>false</hideCommand>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo waiting for a restart
sleep 620
for i in {0..36000..60}
do
	echo &quot;Waiting for the build device to become ready! $i seconds waiting ..&quot;
	sleep 60
    if ping $build_machine -c 3
    then
    	echo device is finally up !!
        sleep 230
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.6.1">
      <siteName>root@$build_machine:22</siteName>
      <command>echo mounting result grep sdcard

umount /dev/mmcblk0p1
umount /sdcard/*

echo killing unused cpu consuming processes
for pp in $pids
do
        echo &quot;Checking process $pp&quot;
        if ps aux | grep chaibio | grep $pp
        then
                echo Killing $pp
                kill -9 $pp
        fi
done

pkill ruby2.3 
pkill mysqld
pkill julia

mkdir -p /tmp/grep_sdcard
mount /dev/mmcblk0p1 /tmp/grep_sdcard
</command>
      <execEachLine>false</execEachLine>
      <hideCommand>false</hideCommand>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo fetching eMMC image.
stamp=$(date &apos;+%Y%M%d%H%m%S&apos;)
grep_sdcard_dir=&quot;/tmp/${BUILD_NUMBER}/emmc_inbox_${stamp}&quot;
tmp_sdcard_dir=&quot;/tmp/${BUILD_NUMBER}/sdcard_${stamp}&quot;

echo grep sdcard folder [input]: $grep_sdcard_dir
mkdir -p &quot;${grep_sdcard_dir}&quot;

echo fetching image files from beaglebone.

#sshpass -p chaipcr scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r root@$build_machine:/tmp/grep_sdcard/* &quot;${grep_sdcard_dir}&quot;
sshpass -p chaipcr scp -oStrictHostKeyChecking=no -r root@$build_machine:/tmp/grep_sdcard/* &quot;${grep_sdcard_dir}&quot;
sshpass -p chaipcr scp -oStrictHostKeyChecking=no -r root@$build_machine:/root/configuration.json .
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;umount /tmp/grep_sdcard &amp;&amp; exit 0&quot;

ls -ahl &quot;${grep_sdcard_dir}&quot;

emmc_image_latest_compressed=${output_image_prefix}_emmc.img.tgz
emmc_image_latest_compressed_full_local_path=${local_download_folder}/${emmc_image_latest_compressed}

tar zfvc $emmc_image_latest_compressed_full_local_path ${grep_sdcard_dir}/eMMC_part*.img
full_emmc_url=${download_prefix}/${emmc_image_latest_compressed}

export upgrade_image_postfix=$output_image_prefix

if [ -e configuration.json ]
then
    device_image_number=$(jq -r &quot;.software.version&quot; configuration.json)
    echo device configuration version $device_image_number
    if ! [ -z $device_image_number ]
    then
    	export image_version=$device_image_number
        export upgrade_image_postfix=$device_image_number
    fi
fi

if $no_factorysettings_sdcard
then
	echo latest eMMC for this build machine is downloadable from $full_emmc_url
	sudo rm -r $grep_sdcard_dir || true
 
build_report_filename=build_report.xml
#_$BUILD_NUMBER.xml
echo Report filename is $build_report_filename
cat &lt;&lt; EOF &gt; $build_report_filename
&lt;section name=&quot;&quot; fontcolor=&quot;&quot;&gt;
    // To display a field
     &lt;field name=&quot;eMMC&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$full_emmc_url&quot;&gt; 
      &lt;![CDATA[ 
eMMC image ($emmc_image_latest_compressed) &lt;a href=&quot;$full_emmc_url&quot; download=&quot;eMMC.img.tgz&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
&lt;/section&gt;
EOF
    exit 0  
fi

cd tmp/chaipcr
cd devops
echo &apos;performing ./process_raw_image.sh &quot;${grep_sdcard_dir}&quot; &quot;${tmp_sdcard_dir}&quot;&apos;
echo fs version $(cat factory_settings_sdcard/fs_version.inf)

if sudo ./process_raw_image.sh &quot;${grep_sdcard_dir}&quot; &quot;${tmp_sdcard_dir}&quot;
then
   echo raw image processed
else
   echo raw image processing failed.
   exit 1
fi

if [ -e &quot;${tmp_sdcard_dir}&quot; ]
then
    if [ -z $sdcard_filename ]
    then
	    sdcard_filename=sdcard_$BUILD_NUMBER.img
    fi
    if [ &quot;$image_version&quot; = &quot;0.0.0.0&quot; ]
    then
        echo Release number not provided.
    else
	    sdcard_filename=sdcard_released_$image_version.img
    fi
    
    
    echo sdcard filename is $sdcard_filename
    
    upgrade_image_filename=$tmp_sdcard_dir/p2/upgrade.img.tar
    upgrade_image_url_local_filename=${local_download_folder}/upgrade_${upgrade_image_postfix}.img.tar
    upgrade_image_url=${download_prefix}/upgrade_${upgrade_image_postfix}.img.tar
    echo upgrade image path $upgrade_image_filename, copying to $upgrade_image_url_local_filename
    cp $upgrade_image_filename $upgrade_image_url_local_filename
    echo Upgrade image URL is $upgrade_image_url
    
	full_emmc_image=${local_download_folder}/emmc_$BUILD_NUMBER.img.tgz
	fullpath_sdcard_image=${local_download_folder}/$sdcard_filename
	echo backup eMMC image to $full_emmc_image
    tar zfvc $full_emmc_image /tmp/image_creator/eMMC.img
    sdcard_url=${download_prefix}/$sdcard_filename
	tmp_output_sdcard=/tmp/${BUILD_NUMBER}/$sdcard_filename

#	cp $full_emmc_image $emmc_image_latest_compressed_full_local_path

	echo &quot;performing create_sdcard.sh $tmp_sdcard_dir $tmp_output_sdcard&quot;
	if sudo ./create_sdcard.sh &quot;$tmp_sdcard_dir&quot; &quot;$tmp_output_sdcard&quot;
	then
   		echo SDCard image is created at &quot;$tmp_output_sdcard&quot;
        echo please use it to flash an 8M SDCard.
        echo &quot;ex: dd if=$tmp_output_sdcard of=/dev/sdX bs=16M&quot;
        cp $tmp_output_sdcard $fullpath_sdcard_image
        echo copying compressed sdcard image
        cp ${tmp_output_sdcard}.tgz ${fullpath_sdcard_image}.tgz
        echo sdcard image should be downloadable from $sdcard_url
        echo compressed sdcard image should be downloadable from ${sdcard_url}.tgz
        sudo rm -r /tmp/image_creator/ || :
	else
	   	echo raw image processing failed.
   		exit 1
	fi
    echo eMMC image should be downloadable from $full_emmc_url

    echo latest eMMC for this build machine is downloadable from $full_emmc_url
    sudo rm -r $tmp_sdcard_dir || true
else
   echo raw image processing failed.
   exit 1
fi

sudo rm -r $grep_sdcard_dir || true
cd ../../..

build_report_filename=build_report.xml
#_$BUILD_NUMBER.xml
echo Report filename is $build_report_filename
cat &lt;&lt; EOF &gt; $build_report_filename
&lt;section name=&quot;&quot; fontcolor=&quot;&quot;&gt;
    // To display a field
    &lt;field name=&quot;Build Number&quot; titlecolor=&quot;&quot; value=&quot;$image_version&quot; detailcolor=&quot;&quot;&gt; 
    &lt;![CDATA[ 
Release version and build number are $image_version
    ]]&gt; &lt;/field&gt;
    
    &lt;field name=&quot;Upgrade Image&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$upgrade_image_url&quot;&gt; 
    &lt;![CDATA[ 
Upgrade image (upgrade_${upgrade_image_postfix}.img.tar) &lt;a href=&quot;$upgrade_image_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
     &lt;field name=&quot;eMMC&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$full_emmc_url&quot;&gt; 
      &lt;![CDATA[ 
eMMC image ($emmc_image_latest_compressed) &lt;a href=&quot;$full_emmc_url&quot; download=&quot;eMMC.img.tgz&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
    &lt;field name=&quot;SDCard&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$sdcard_url&quot;&gt; 
      &lt;![CDATA[ 
SDCard image ($sdcard_filename) &lt;a href=&quot;$sdcard_url&quot; download=&quot;sdcard.img&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
    &lt;field name=&quot;zSDCard&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$sdcard_url.tgz&quot;&gt; 
      &lt;![CDATA[ 
SDCard image tgz ($sdcard_filename) &lt;a href=&quot;$sdcard_url.tgz&quot; download=&quot;sdcard.img&quot;&gt;Download Compressed&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
&lt;/section&gt;
EOF

partition_sdcard() {
     umount /dev/mmcblk0p1 || true
     LC_ALL=C /sbin/sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,10485760,0x83,*
,,0x83,*
__EOF__

     /sbin/partprobe /dev/mmcblk0  || true
     /sbin/mkfs.ext4 -O ^metadata_csum,^64bit /dev/mmcblk0p1 -F  || true
     /sbin/mkfs.ext4 -O ^metadata_csum,^64bit /dev/mmcblk0p2 -F  || true
}

partition_sdcard &amp;

echo All Done!

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xml</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
      <followSymlinks>true</followSymlinks>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>*.xml</name>
      <shownOnProjectPage>true</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.11.5"/>
  </buildWrappers>
</project>