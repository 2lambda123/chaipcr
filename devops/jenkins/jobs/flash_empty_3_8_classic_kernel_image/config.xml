<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build basic debian image with kernel version 4.4</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.2.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>check_badblocks</name>
          <description>Check if there are any bad blocks on eMMC. Takes more than an hour.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefex</name>
          <description>Download folder URL</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>low_performance</name>
          <description>Set cpu frequency to minimum for more stability.
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

sudo chmod 777      /var/lib/jenkins/.ssh/known_hosts
ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

#ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo device is patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
if ssh -oStrictHostKeyChecking=no -t root@$build_machine &apos;exit 0&apos;
then
    echo key is added ok
else
    echo error adding key to known hosts.. retrying..
    chmod 777 /var/lib/jenkins/.ssh/known_hosts
	ssh -oStrictHostKeyChecking=no -t root@$build_machine &apos;exit 0&apos;
fi

counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command># download flasher image
#wget https://rcn-ee.com/rootfs/bb.org/testing/2016-10-09/console/BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz

swapoff -a
mount -o remount,rw /
image_filename=BBB-eMMC-flasher-debian-7.5-2014-05-14-2gb.img.xz
cd

rm $image_filename || true
wget $download_prefex/$image_filename

#Verify Image with:
if sha256sum $image_filename | grep ce81d45a017be0a3a2c3ca7d7cfdcf94dc3e4932c6fa88da56df2a7b37b7dfa5
then
	echo Checksum OK..
else
	echo Checksum error.. new checksum is $(sha256sum $image_filename )
exit 1
fi

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update
apt-get install xz-utils parted  -y -q

#wrting to sdcard

umount /dev/mmcblk0p* || true
echo flashing SDCard

echo Image filename: $image_filename
if xzcat $image_filename | sudo dd of=/dev/mmcblk0
then
    echo SDCard flashed successfully
else
   echo error flashing sdcard
   exit 1
fi

echo done flashing sdcard
sync
partprobe /dev/mmcblk0
echo patching sdcard


echo patching partition 1
mount /dev/mmcblk0p1 /mnt
        wget --no-check-certificate https://raw.githubusercontent.com/chaibio/chaipcr/master/devops/factory_settings_sdcard/MLO -O /mnt/MLO
        wget --no-check-certificate https://raw.githubusercontent.com/chaibio/chaipcr/master/devops/factory_settings_sdcard/u-boot.img -O /mnt/u-boot.img
sync
umount /mnt

echo patching partition 2
mount /dev/mmcblk0p2 /mnt
cd /mnt/opt/scripts/tools/

echo patching sshd_config
cat &lt;&lt;EOF &gt;&gt; /mnt/etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF

echo downloading patches..
wget --no-check-certificate https://raw.githubusercontent.com/chaibio/chaipcr/master/devops/device/flasher.patch
        patch -i flasher.patch
        rm flasher.patch
        chmod +x *.sh
        cd ~
        sync
# above few lines not needed
cd /mnt/opt/scripts/tools/

wget http://10.0.1.20/download/beaglebone-black-eMMC-flasher.sh -O beaglebone-black-eMMC-flasher.sh
touch /mnt/forcefsck

sync
cd
umount /mnt

echo disabling eMMC boot
mount -o remount,rw /boot/uboot
mv /boot /boot_disabled  --backup=numbered -f
rm -r /boot

mkdir -p /boot/uboot/boot_disabled  
mkdir -p /boot/boot_disabled  
mv /boot/uboot/* /boot/uboot/boot_disabled
mv /boot/* /boot/boot_disabled 

rm ~/$image_filename

sync
sync

echo Restarting build device..
shutdown -r 1
echo &quot;Restart scheduled after a min -1&quot;

#exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# waiting 20min for the bulding device to flash
echo &quot;Waiting for the build device ($build_machine) to flash and become ready!&quot;
sleep 1500

for i in {0..1200..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo &quot;waiting for ssh on beaglebone to become connectable.&quot;
			sleep 10
		done
		echo ssh is connectable.
        sleep 10
        exit 0
    fi
done

echo &quot;timeout waiting for the device to become ready!&quot;
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Updating kernel on $build_machine
#
#cat &lt;&lt;EOF &gt;&gt; /etc/apt/sources.list
#deb [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#deb-src [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#EOF

cd
wget http://repos.rcn-ee.net/ubuntu/conf/repos.rcn-ee.net.gpg.key
apt-key add repos.rcn-ee.net.gpg.key
rm repos.rcn-ee.net.gpg.key

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-key update
apt-get update 
apt-get install -y -q git ntpdate 
apt-get install -y -q unzip parted
apt-get install -y -q autoremove
dpkg --configure -a

df -h
ntpdate -b -s -u pool.ntp.org

update-initramfs -u

#if $kernel_44
#then
#     ./update_kernel.sh --ti-rt-channel --lts-4_4
#fi

cat &lt;&lt;EOF &gt;&gt; /etc/apt/sources.list
deb [arch=armhf] http://repos.rcn-ee.com/debian/ wheezy main
#deb-src [arch=armhf] http://repos.rcn-ee.com/debian/ wheezy main
EOF
cd
wget http://repos.rcn-ee.net/ubuntu/conf/repos.rcn-ee.net.gpg.key
apt-key add repos.rcn-ee.net.gpg.key
rm repos.rcn-ee.net.gpg.key
apt-get update 

cd /opt/scripts/tools/
git stash save --keep-index
git pull
./update_kernel.sh --kernel 3.8.13-bone71
cp /boot/initrd.img-3.8.13-bone71 /boot/uboot/initrd.img # necessary because of buggy update script
cp /boot/vmlinuz-3.8.13-bone71 /boot/uboot/zImage # necessary because of buggy update script

touch /forcefsck
sync 
shutdown -r 1

echo restart scheduled after a min-2
#sleep 30

#exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo &quot;waitting for a restart&quot;
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo device is restarted.. 

apt-key update
apt-get update
apt-get -q -y install cpufrequtils
apt-get -q -y upgrade
apt-get -q -y dist-upgrade

update-initramfs -u
touch /forcefsck

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
echo &quot;FSCKFIX=yes&quot; &gt;&gt; /etc/default/rcS
#echo GOVERNOR=\&quot;conservative\&quot; &gt;&gt; /etc/default/cpufrequtils
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

lsblk
df -h

echo image creation done.

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

dd if=/dev/zero of=/zeros.bigfile bs=16M
sleep 60
sync
echo done writing
rm /zeros.bigfile
sleep 60
sync
echo done freeing up

mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sleep 60
    sync
    rm /tmp/zeroer/zeros.bigfile
    sleep 60
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sleep 60
    sync
    rm /tmp/zeroer/zeros.bigfile
    sleep 60
    sync
    umount /tmp/zeroer
fi

echo basic image zeroing done! restarting!

shutdown -r 1

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo &quot;waitting for a restart&quot;
sleep 90

for i in {0..1500..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is up and ready!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.7"/>
  </buildWrappers>
</project>