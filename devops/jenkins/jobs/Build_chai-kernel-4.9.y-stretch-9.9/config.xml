<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Building chaibio initial debian image. Reference: https://github.com/RobertCNelson/bb-kernel</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.27.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.30.0">
      <projectUrl>https://github.com/chaibio/bb-linux-kernel.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.18">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Jenkins server download postfix</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo install build tools
sudo apt-get update
sudo apt-get -y install lzma lzop bison flex pkg-config libmpc-dev u-boot-tools libncurses5-dev:amd64 libssl-dev:amd64
sudo apt-get -y install mdadm
sudo apt-get -y install xz-utils

#sudo apt-get -y install git build-essential kernel-package fakeroot libncurses5-dev libssl-dev ccache bison flex



</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo building kernel
git clone https://github.com/chaibio/bb-linux-kernel.git
cd bb-linux-kernel

git checkout origin/chai-linux-4.9.y -b tmp
echo building kernel

cat &gt;&gt; build_kernel.sh &lt;&lt; EOF
export kernel_version=&quot;\${KERNEL_UTS}&quot;
echo &quot;setting kernel version to \$kernel_version&quot;
echo  &quot;\$kernel_version&quot; &gt; ../kernel_version.info
EOF
mkdir -p /var/lib/jenkins/.config/git/ || true
sudo chmod 777 /var/lib/jenkins/.config/git/
sudo chmod 777 /var/lib/jenkins/*

sed -i &quot;s/wheezy|jessie|stretch|buster/focal|wheezy|jessie|stretch|buster/&quot; tools/host_det.sh
sed -i &quot;s/#image=/image=/&quot; build_kernel.sh
sed -i &quot;s/#address=/address=/&quot; build_kernel.sh
 
sudo chmod 777 /tmp
sudo chmod 777 /tmp/*

export AUTO_BUILD=1
export ZRELADDR=0x80008000
export image=&quot;uImage&quot;

defconfig_url=&quot;$download_prefix/defconfig_chai-kernel-4.9.y&quot;
wget $defconfig_url -O patches/defconfig
cat patches/defconfig

time ./build_kernel.sh

exit 1</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export image_filename=bone-debian-9.3-console-armhf-2017-12-10-1gb.img
export image_filename_xz=$image_filename.xz
rm $image_filename || true
rm $image_filename_xz || true
wget $download_prefix/$image_filename_xz || exit 1
kernel_version=$(cat kernel_version.info)
filename=debian-sdcard-$kernel_version.img
rm $filename || true
unxz $image_filename_xz
ls -ahl $image_filename || exit 1
mv $image_filename $filename

</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>kernel_version=$(cat kernel_version.info)
filename=debian-sdcard-$kernel_version.img
output_device=$filename
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/share/rvm/bin

fileext=${filename##*.}
sdcard_image_file=$output_device

echo mounting sdcard image
loopdev=$(/sbin/losetup -f)
if [ $? -gt 0 ]
then
   	echo &quot;Error creating a block device for $sdcard_image_file! No free loop devices handle. Please restart PC.&quot;
   	exit 1
fi

set +e
loopdev_success=false
pwd
for i in `seq 1 100`
do
	echo creating the loop device $loopdev
	if [ -e $loopdev ]
	then
		echo $loopdev is taken.
       	loopdev=&quot;/dev/loop4$i&quot;
		continue
	fi
    sync
    sleep 2

	echo &quot;sudo losetup $loopdev $sdcard_image_file&quot;
    sudo losetup -v $loopdev $sdcard_image_file
   	if [ $? -gt 0 ]
    then
        loopdev=&quot;/dev/loop5$i&quot;
		echo error creating loop device.. trying another.
    		continue
		else
			loopdev_success=true
		break
    fi
done

if ! $loopdev_success
then
	echo &quot;Error creating a block device for $sdcard_image_file!&quot;
	exit 1
fi
sudo chmod 777 $loopdev
sudo partprobe $loopdev || true
set -e
output_device=$loopdev
echo $loopdev &gt; loopdevice.info


export DISK=$output_device

echo Mount Partition:
echo On most systems these partitions may will be auto-mounted...

sudo mkdir -p /media/rootfs/  || true
sudo chmod 777 /media/rootfs/  || true
umount /media/rootfs/  || true
sudo mount ${DISK}p1 /media/rootfs/
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo removing old kernel
old_kernel_version=$(sudo cat /media/rootfs/boot/uEnv.txt | grep &quot;^uname_r&quot; | grep -v &apos;#&apos;  | awk -F&quot;=&quot; &apos;{print $2}&apos;)
if [ -z $old_kernel_version ]
then
        echo &quot;Cann&apos;t find old kernel version&quot;
else
        echo old kernel $old_kernel_version
        if [ -e  /media/rootfs/var/lib/initramfs-tools/$old_kernel_version ]
        then
			sudo rm -r /media/rootfs/var/lib/initramfs-tools/$old_kernel_version  /media/rootfs/boot/dtbs/$old_kernel_version /media/rootfs/lib/modules/$old_kernel_version || true
        fi
fi

echo Set uname_r in /boot/uEnv.txt
kernel_version=$(cat kernel_version.info)
sudo sed -i &quot;s/uname_r/#old kernel uname_r/&quot; /media/rootfs/boot/uEnv.txt || true
sudo sh -c &quot;echo &apos;uname_r=${kernel_version}&apos; &gt;&gt; /media/rootfs/boot/uEnv.txt&quot;

echo Copy Kernel Image
sudo cp -v ./bb-linux-kernel/deploy/${kernel_version}.zImage /media/rootfs/boot/vmlinuz-${kernel_version}
sudo cp bb-linux-kernel/KERNEL/.config /media/rootfs/boot/config-$kernel_version

echo Copy Kernel Device Tree Binaries
sudo mkdir -p /media/rootfs/boot/dtbs/${kernel_version}/
sudo tar xfv ./bb-linux-kernel/deploy/${kernel_version}-dtbs.tar.gz -C /media/rootfs/boot/dtbs/${kernel_version}/

echo Copy Kernel Modules
sudo tar xfv ./bb-linux-kernel/deploy/${kernel_version}-modules.tar.gz -C /media/rootfs/
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>kernel_version=$(cat kernel_version.info)
loopdev=$(cat loopdevice.info)
filename=debian-sdcard-$kernel_version.img
output_device=$filename
export DISK=$loopdev

echo Remove microSD/SD card
sync
sudo umount /media/rootfs || true
sync

#rm -r  bb-linux-kernel gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf u-boot $output_device debian-9.8-minimal-armhf-2019-02-16*  || true
if [ -e $DISK ]
then
#    umount $DISK || true
	sync
	sleep 2
	fuser -m $DISK* --all -u -v -k  || true
	mdadm --stop $DISK  || true
fi

if [ -e $DISK ]
then
	losetup -d $DISK  || true
fi

kernel_image_url=&quot;$download_prefix/$filename.xz&quot;    
cat &lt;&lt; EOF &gt; build_report.xml
&lt;section name=&quot;&quot; fontcolor=&quot;&quot;&gt;
    // To display a field
    &lt;field name=&quot;Kernel Image&quot; titlecolor=&quot;&quot; value=&quot;Download&quot; detailcolor=&quot;&quot; href=&quot;$kernel_image_url&quot;&gt; 
    &lt;![CDATA[ 
Kernel image (${kernel_image_url}) &lt;a href=&quot;$kernel_image_url&quot; download=&quot;$filename&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
&lt;/section&gt;
EOF

mkdir -p  /usr/share/nginx/html/download/ || true

xz $filename
mv $filename.xz /usr/share/nginx/html/download/
cd /usr/share/nginx/html/download/
cp -sf $filename.xz debian-sdcard-chai-latest.img.xz || true

ls -ahl

if [ -e $DISK ]
then
	rm $DISK  || true
fi
if [ -e $DISK ]
then
	rm $DISK  || true
fi

echo All Done
    
exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xml</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
      <followSymlinks>true</followSymlinks>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>*.xml</name>
      <shownOnProjectPage>true</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.11.3"/>
  </buildWrappers>
</project>