<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Building julia and upload it to download server</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Remote build beaglebone.</description>
          <defaultValue>10.0.2.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>check_badblocks</name>
          <description>Check if there are any bad blocks on eMMC</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefex</name>
          <description>Download server url</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. Could be /var/www/html/download or /usr/share/nginx/html/download
</description>
          <defaultValue>/var/www/html/download</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

touch /var/lib/jenkins/.ssh/config
if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host.
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable- $build_machine.
	sleep 20
    
done

ssh -t root@$build_machine &apos;lsblk; exit 0&apos;

echo done connection check.</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a
umount /dev/mmcblk0p*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command># download flasher image
#wget https://rcn-ee.com/rootfs/bb.org/testing/2016-10-09/console/BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz

swapoff -a
mount -o remount,rw /
rm BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz || true
wget $download_prefex/BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz

#Verify Image with:
if sha256sum BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb* | grep 04f227885ea1f186a770edf3347b25d7f48db6a0181c0ee6cc199189c5b4c80d
then
	echo Checksum OK..
else
	echo Checksum error
	exit 1
fi

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update
apt-get install xz-utils parted cpufrequtils git -y -q

exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>#wrting to sdcard

swapoff -a
umount /sdcard/upgrade
umount /sdcard/*

umount /dev/mmcblk0p* || true
echo flashing SDCard
xzcat BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz | sudo dd of=/dev/mmcblk0
rm BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz
sync
partprobe /dev/mmcblk0
mount /dev/mmcblk0p1 /mnt
cd /mnt/opt/scripts/tools/eMMC/

if [ -e /mnt/boot/uEnv.txt ]
then
echo patching sshd_config
     cat &lt;&lt;EOF &gt;&gt; /mnt/etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
fi

wget $download_prefex/3partitions_flasher_44.patch
patch -i 3partitions_flasher_44.patch
rm 3partitions_flasher_44.patch

if $check_badblocks
then
  echo badblocks check is active
else
  echo disable badblocks check
  sed &quot;s/badblocks/#badblocks/&quot; -i  init-eMMC-flasher-v3.sh
fi

echo patching uEnv.txt
echo cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh &gt;&gt; /mnt/boot/uEnv.txt

sync
cd
umount /mnt

echo disabling eMMC boot
mount -o remount,rw /boot/uboot
if mount | grep uboot
then
    mkdir /boot/uboot/disabled -p
    mv /boot/uboot/* /boot/uboot/disabled
fi
mv /boot /boot_disabled  --backup=numbered -f
rm -r /boot

sync
sync
sleep 10

echo Restarting build device..
shutdown -r 1
echo Restart scheduled after a min

force_reboot_hanged_device ()
{
   sleep 90
   reboot -f
}

#force_reboot_hanged_device &amp;

exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo Waiting for the device to come up again
sleep 90

if $check_badblocks
then
	echo waiting 1hr for the badblocks check to finish
	sleep 3600
fi

echo waiting 30min for the building device to flash
sleep 1800

for i in {0..1800..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>if uname -a | grep 4.4
then
  echo system flashed successfully.
else
   echo error flashing beaglebone.
   exit 1
fi

echo Updating kernel
#
#cat &lt;&lt;EOF &gt;&gt; /etc/apt/sources.list
#deb [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#deb-src [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#EOF

cd
wget http://repos.rcn-ee.net/ubuntu/conf/repos.rcn-ee.net.gpg.key
apt-key add repos.rcn-ee.net.gpg.key
rm repos.rcn-ee.net.gpg.key

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

	apt-get update 
        apt-get install -y -q git  xz-utils parted cpufrequtils

	cd /opt/scripts/tools/
        rm eMMC/init-eMMC-flasher-v3.sh
#	git stash save --keep-index
	git pull

#	./update_kernel.sh --ti-rt-channel --lts-4_4
        ./update_kernel.sh --kernel 4.4.24-ti-rt-r58

	sync
	shutdown -r 1
echo restart scheduled after a min
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo waiting for a restart
sleep 90

for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i - $build_machine&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready! - $build_machine
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Starting building Julia on $build_machine
apt-get update
apt-get -y -q upgrade
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia
df -h

sudo apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev cmake gcc-4.8 g++-4.8 gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev g++ ntp ntpdate git unzip automake sshpass linux-headers-`uname -r` cmake libpoco-dev
apt-get -f -y -q install

apt-get install -q -y libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8 ntpdate cpufrequtils
apt-get -f -y -q install

sudo apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev cmake gcc-4.8 g++-4.8 gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8
apt-get -f -y -q install
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo building julia

swapoff -a
umount /sdcard/*
umount /dev/mmcblk0p*

#cpufreq-set --governor performance
ln -sf /usr/bin/ld /usr/bin/ld.gold
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

# add gfortran link to search path. 
ln -s /usr/lib/gcc/arm-linux-gnueabihf/4.9/libgfortran.so /usr/lib/libgfortran.so

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
mount /dev/mmcblk0p1 /sdcard/upgrade/

# creating a temporary swap file on sdcard
sudo fallocate -l 2G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile
#verifying swap file is successfully added
sudo swapon -s

free -m

# compiling julia
# compiling julia 0.5
mkdir -p /sdcard/upgrade/julia-compile
cd /sdcard/upgrade/julia-compile
git clone git://github.com/JuliaLang/julia.git 
cd julia
git checkout release-0.5
echo &quot;export JULIA_PKGDIR=/root/.julia&quot;&gt;&gt;~/.bashrc
source ~/.bashrc
ntpdate -b -s -u pool.ntp.org

cat &lt;&lt;EOF &gt;&gt; Make.user
prefix=/usr/share/julia
MARCH=armv7-a
JULIA_CPU_TARGET=cortex-a8

override USE_SYSTEM_BLAS=1
override USE_SYSTEM_LAPACK=1
override USE_SYSTEM_LIBM=1
override USE_SYSTEM_FFTW=1
override USE_SYSTEM_GMP=1
override USE_SYSTEM_MPFR=1
override USE_SYSTEM_ARPACK=1
EOF

make


</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing julia
cd /sdcard/upgrade/julia-compile/julia

make install 
ln -s /usr/share/julia/bin/julia /usr/bin/julia

echo precompiling mandatory packages.
cat &lt;&lt;EOF &gt;&gt; chaibio_packages.jl
Pkg.init()
Pkg.update()

Pkg.add(&quot;Dierckx&quot;)
Pkg.add(&quot;JSON&quot;)
Pkg.add(&quot;MySQL&quot;)
Pkg.add(&quot;JLD&quot;)
Pkg.add(&quot;DataFrames&quot;)
Pkg.add(&quot;Ipopt&quot;)
Pkg.add(&quot;JuMP&quot;)
Pkg.add(&quot;NLopt&quot;)
Pkg.add(&quot;HttpServer&quot;)

using DataFrames, DataStructures, Dierckx, Ipopt, JLD, JSON, JuMP, MySQL, NLopt, HttpServer
quit()
EOF

# test with no prebuilding
#julia chaibio_packages.jl
echo done testing! removing test script.

rm chaibio_packages.jl

echo test finished. cleaning..
swapoff /sdcard/upgrade/swapfile
rm /sdcard/upgrade/swapfile

cd ..
tar fcz julia05-44-$build_machine-$BUILD_NUMBER.tgz julia /root/.julia
tar fcz julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz julia/usr /root/.julia

sync
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo uploading julia file to server
                                                                                                                                 
scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia05-44-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/
chmod 777 $local_download_folder/julia05-44-$build_machine-$BUILD_NUMBER.tgz
ln -sf $local_download_folder/julia05-44-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-default.tgz

scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/julia-compile/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/
chmod 777 $local_download_folder/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz
ln -sf $local_download_folder/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-slim-default.tgz

ls -ahl $local_download_folder/julia05-44-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-default.tgz
ls -ahl $local_download_folder/julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz $local_download_folder/julia05-44-slim-default.tgz

exit 0</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleaning up
cd /sdcard/upgrade/julia-compile/

rm julia05-44-$build_machine-$BUILD_NUMBER.tgz
rm julia05-44-slim-$build_machine-$BUILD_NUMBER.tgz
ls -ahl

cd ..

rm -r julia-compile
rm -r /root/.julia
sync
ls -ahl

echo all done
exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>