<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Creates a factory settings image from for connected BBB.&#xd;
- create a grep sdcard&#xd;
- start BBB on grep mode&#xd;
- restart BBB on normal more&#xd;
- backup grepped image&#xd;
- apply process_raw_image.sh and create_sdcard.sh scripts&#xd;
- exports the sdcard as an image file&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description></description>
          <defaultValue>10.0.100.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>output_sdcard</name>
          <description>the block device of the created factory settings sdcard: You can say:
/dev/sdb to write directly to a physical sdcard.
or /tmp/sdcard_image.img to export a factory settings sdcard image.</description>
          <defaultValue>/tmp/sdcard_${BUILD_NUMBER}.img</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. 
Apache server: /usr/share/nginx/html/download 
or 
Nginx (as on 10.0.1.20): /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefix</name>
          <description>Download server url. Example: http://10.0.1.20/download</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sdcard_filename</name>
          <description>sdcard default filename</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>image_prefix</name>
          <description>Class of the upgrade image generated during this process. Could be empty, kernel44, kernel 41, kernel 38, allthirdparty, or release.
</description>
          <defaultValue>empty</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/chaibio/chaipcr.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>123</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Creating an sdcard image for the device at $build_machine
echo Path to SDCard image: $output_sdcard
echo Environmental variables:
env

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

#echo deleting root password in case of chaipcr
#sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
sshpass -p chaipcr ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until sshpass -p chaipcr ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a
umount /dev/mmcblk0p*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi


echo installing missing packages.
apt-get update
apt-get install parted -y -q
partprobe /dev/mmcblk0

if LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__
then
	echo SDCard formated!
else
	echo error formatting SDCard. retrying..
        partprobe /dev/mmcblk0

if LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__
        then
	       echo SDCard formated!
        else
 	       echo error formatting SDCard.
	       exit 1
       fi
fi

partprobe /dev/mmcblk0
if command mkfs.fat
then
      mkfs.fat /dev/mmcblk0p1 -n CHAIBIO
else
      mkfs.vfat /dev/mmcblk0p1 -n CHAIBIO
fi

mkdir -p /tmp/grep_sdcard
mount /dev/mmcblk0p1 /tmp/grep_sdcard
lsblk</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>ls
sshpass -p chaipcr scp -r devops/grabimage_sdcard/* root@$build_machine:/tmp/grep_sdcard/
sshpass -p chaipcr scp -r devops/grabimage_sdcard/uEnv.sdcard.txt root@$build_machine:/tmp/grep_sdcard/uEnv.txt
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo patching grep sdcard to boot only once
sed &quot;s/reboot/rm \/mnt\/uEnv.txt ; reboot/&quot; -i /tmp/grep_sdcard/autorun.sh
sed &quot;s/halt/rm \/mnt\/uEnv.txt ; reboot # /&quot; -i /tmp/grep_sdcard/autorun.sh

sed &quot;s/reboot/rm \/mnt\/uEnv.txt ; reboot/&quot; -i /tmp/grep_sdcard/pack_latest_version.sh
sed &quot;s/halt/rm \/mnt\/uEnv.txt ; reboot # /&quot; -i /tmp/grep_sdcard/pack_latest_version.sh

sync
ls /tmp/grep_sdcard -ahl
umount /tmp/grep_sdcard

echo scheduling a restart in a min
shutdown -r 1
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo waiting for a restart
sleep 900
for i in {0..1200..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 3
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.5">
      <siteName>root@$build_machine:22</siteName>
      <command>echo mounting result grep sdcard

umount /dev/mmcblk0p1
umount /sdcard/*

mkdir -p /tmp/grep_sdcard
mount /dev/mmcblk0p1 /tmp/grep_sdcard
</command>
      <execEachLine>false</execEachLine>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo fetching eMMC image.
stamp=$(date &apos;+%Y%M%d%H%m%S&apos;)
grep_sdcard_dir=&quot;/tmp/emmc_inbox_${stamp}&quot;
tmp_sdcard_dir=&quot;/tmp/sdcard_${stamp}&quot;

echo grep sdcard folder [input]: $grep_sdcard_dir
mkdir -p &quot;${grep_sdcard_dir}&quot;

echo fetching image files from beaglebone.
sshpass -p chaipcr scp -oStrictHostKeyChecking=no -r root@$build_machine:/tmp/grep_sdcard/* &quot;${grep_sdcard_dir}&quot;
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;umount /tmp/grep_sdcard &amp;&amp; exit 0&quot;

ls -ahl &quot;${grep_sdcard_dir}&quot;
ls
cd devops

if sudo ./process_raw_image.sh &quot;${grep_sdcard_dir}&quot; &quot;${tmp_sdcard_dir}&quot;
then
   echo raw image processed
else
   echo raw image processing failed.
   exit 1
fi

if [ -e &quot;${tmp_sdcard_dir}&quot; ]
then
    if [ -z $sdcard_filename ]
    then
	    sdcard_filename=sdcard_$BUILD_NUMBER.img
    fi
    echo sdcard filename is $sdcard_filename
    
    upgrade_image_filename=$tmp_sdcard_dir/p2/upgrade.img.tar
    upgrade_image_url_local_filename=${local_download_folder}/${image_prefix}_upgrade.img.tgz
    upgrade_image_url=${download_prefix}/${image_prefix}_upgrade.img.tgz
    echo upgrade image path $upgrade_image_filename, copying to $upgrade_image_url_local_filename
    cp $upgrade_image_filename $upgrade_image_url_local_filename
    echo Upgrade image URL is $upgrade_image_url
    
	full_emmc_image=${local_download_folder}/emmc_$BUILD_NUMBER.img.tgz
	fullpath_sdcard_image=${local_download_folder}/$sdcard_filename
	echo backup eMMC image to $full_emmc_image
    tar zfvc $full_emmc_image /tmp/image_creator/eMMC.img
    full_emmc_url=${download_prefix}/emmc_$BUILD_NUMBER.img.tgz
    sdcard_url=${download_prefix}/$sdcard_filename
    
    echo &quot;performing create_sdcard.sh $tmp_sdcard_dir $output_sdcard&quot;
	if sudo ./create_sdcard.sh &quot;$tmp_sdcard_dir&quot; &quot;$output_sdcard&quot;
	then
   		echo SDCard image is created at &quot;$output_sdcard&quot;
        echo please use it to flash an 8M SDCard.
        echo &quot;ex: dd if=$output_sdcard of=/dev/sdX bs=16M&quot;
        cp $output_sdcard $fullpath_sdcard_image
        echo copying compressed sdcard image
        cp ${output_sdcard}.tgz ${fullpath_sdcard_image}.tgz
        echo sdcard image should be downloadable from $sdcard_url
        echo compressed sdcard image should be downloadable from ${sdcard_url}.tgz
	else
	   	echo raw image processing failed.
   		exit 1
	fi
    echo eMMC image should be downloadable from $full_emmc_url
else
   echo raw image processing failed.
   exit 1
fi

sudo rm -r $grep_sdcard_dir || :
sudo rm -r $tmp_sdcard_dir || :
sudo rm -r /tmp/image_creator/ || :

cd ..

build_report_filename=build_report.xml
#_$BUILD_NUMBER.xml
echo Report filename is $build_report_filename
cat &lt;&lt; EOF &gt; $build_report_filename
&lt;section name=&quot;&quot; fontcolor=&quot;&quot;&gt;
    // To display a field
    &lt;field name=&quot;Upgrade Image&quot; titlecolor=&quot;&quot; value=&quot;&quot; detailcolor=&quot;&quot; href=&quot;&quot;&gt; 
    &lt;![CDATA[ 
Upgrade image (${image_prefix}_upgrade.img.tgz) &lt;a href=&quot;$upgrade_image_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
     &lt;field name=&quot;eMMC&quot; titlecolor=&quot;&quot; value=&quot;&quot; detailcolor=&quot;&quot; href=&quot;&quot;&gt; 
      &lt;![CDATA[ 
eMMC image (emmc_$BUILD_NUMBER.img.tgz) &lt;a href=&quot;$full_emmc_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
    &lt;field name=&quot;SDCard&quot; titlecolor=&quot;&quot; value=&quot;&quot; detailcolor=&quot;&quot; href=&quot;&quot;&gt; 
      &lt;![CDATA[ 
SDCard image ($sdcard_filename) &lt;a href=&quot;$sdcard_url&quot;&gt;Download&lt;/a&gt;
    ]]&gt; &lt;/field&gt;
&lt;/section&gt;
EOF

echo All Done!

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.xml</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>*.xml</name>
      <shownOnProjectPage>true</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
  </publishers>
  <buildWrappers/>
</project>