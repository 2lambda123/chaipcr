--- beaglebone-black-eMMC-flasher.sh	2017-03-28 10:12:43.306446300 +0200
+++ newFlasher/beaglebone-black-eMMC-flasher.sh	2017-03-28 10:12:21.886713055 +0200
@@ -1,4 +1,6 @@
 #!/bin/bash -e
+
+
 #
 # Copyright (c) 2013-2014 Robert Nelson <robertcnelson@gmail.com>
 #
@@ -23,6 +25,12 @@
 #This script assumes, these packages are installed, as network may not be setup
 #dosfstools initramfs-tools rsync u-boot-tools
 
+#uncomment to nutralize the script
+#echo timer > /sys/class/leds/beaglebone\:green\:usr0/trigger
+#echo "Temprary off for testing!"
+#exit
+
+
 if ! id | grep -q root; then
 	echo "must be run as root"
 	exit
@@ -38,12 +46,12 @@
 
 if [ "x${boot_drive}" = "xmmcblk0p1" ] ; then
 	source="/dev/mmcblk0"
-	destination="/dev/mmcblk1"
+	emmcdev="/dev/mmcblk1"
 fi
 
 if [ "x${boot_drive}" = "xmmcblk1p1" ] ; then
 	source="/dev/mmcblk1"
-	destination="/dev/mmcblk0"
+	emmcdev="/dev/mmcblk0"
 fi
 
 flush_cache () {
@@ -52,12 +60,23 @@
 
 flush_cache_mounted () {
 	sync
-	blockdev --flushbufs ${destination}
+	blockdev --flushbufs ${emmcdev}
 }
 
-write_failure () {
-	echo "writing to [${destination}] failed..."
+umount_all () {
+	echo unmounting all partitions.
+
+        umount ${emmcdev}p1 > /dev/null || true
+        umount ${emmcdev}p2 > /dev/null || true
+        umount ${emmcdev}p3 > /dev/null || true
+        umount ${emmcdev}p4 > /dev/null || true
+}
 
+write_failure () {
+	echo "writing to [${emmcdev}] failed..."
+#lsblk
+#df -h
+#exit 0
 	if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then
 		echo heartbeat > /sys/class/leds/beaglebone\:green\:usr0/trigger
 		echo heartbeat > /sys/class/leds/beaglebone\:green\:usr1/trigger
@@ -66,20 +85,23 @@
 	fi
 	echo "-----------------------------"
 	flush_cache
-	umount ${destination}p1 || true
-	umount ${destination}p2 || true
+	umount_all
+
 	exit
 }
 
 umount_p1 () {
-	umount ${destination}p1 || umount -l ${destination}p1 || write_failure
+	echo "umount p1"
+	umount ${emmcdev}p1 || umount -l ${emmcdev}p1 || write_failure
 }
 
 umount_p2 () {
-	umount ${destination}p2 || umount -l ${destination}p2 || write_failure
+	echo "umount p2"
+	umount ${emmcdev}p2 || umount -l ${emmcdev}p2 || write_failure
 }
 
 check_running_system () {
+
 	if [ ! -f /boot/uboot/uEnv.txt ] ; then
 		echo "Error: script halting, system unrecognized..."
 		echo "unable to find: [/boot/uboot/uEnv.txt] is ${source}p1 mounted?"
@@ -87,12 +109,12 @@
 	fi
 
 	echo "-----------------------------"
-	echo "debug copying: [${source}] -> [${destination}]"
+	echo "debug copying: [${source}] -> [${emmcdev}]"
 	lsblk
 	echo "-----------------------------"
 
-	if [ ! -b "${destination}" ] ; then
-		echo "Error: [${destination}] does not exist"
+	if [ ! -b "${emmcdev}" ] ; then
+		echo "Error: [${emmcdev}] does not exist"
 		write_failure
 	fi
 }
@@ -116,7 +138,7 @@
 }
 
 fdisk_toggle_boot () {
-	fdisk ${destination} <<-__EOF__
+	fdisk ${emmcdev} <<-__EOF__
 	a
 	1
 	w
@@ -125,38 +147,67 @@
 }
 
 format_boot () {
-	LC_ALL=C fdisk -l ${destination} | grep ${destination}p1 | grep '*' || fdisk_toggle_boot
+	LC_ALL=C fdisk -l ${emmcdev} | grep ${emmcdev}p1 | grep '*' || fdisk_toggle_boot
 
-	mkfs.vfat -F 16 ${destination}p1 -n boot
+	mkfs.vfat -F 16 ${emmcdev}p1 -n boot
 	flush_cache
 }
 
 format_root () {
-	mkfs.ext4 ${destination}p2 -L rootfs
+	echo "formating root fs at ${emmcdev}p2"
+	mkfs.ext4 ${emmcdev}p2 -L rootfs
+	flush_cache
+}
+
+format_perm () {
+	mkfs.ext4 ${emmcdev}p3 -L perm
+	flush_cache
+}
+
+format_data () {
+	mkfs.ext4 ${emmcdev}p4 -L data
 	flush_cache
 }
 
 repartition_drive () {
-	dd if=/dev/zero of=${destination} bs=1M count=16
+	dd if=/dev/zero of=${emmcdev} bs=1M count=16
 	flush_cache
 
+	echo "Repartitioning eMMC!"
+#	emmc_sectors=$( blockdev --getsize "${emmcdev}" )
+	echo "eMMC Sectors are: $emmc_sectors.. at $emmcdev"
+
+#	rootfs_size=$(( (emmc_sectors - 8*1024*2 - 512*1024*2 - 96*1024*2 - 2*1024*2)/1024/2 ))
+	echo "rootfs size: $rootfs_size M.. before partitioning"
+
 	#96Mb fat formatted boot partition
-	LC_ALL=C sfdisk --force --in-order --Linux --unit M "${destination}" <<-__EOF__
+	LC_ALL=C sfdisk --force --in-order --Linux --unit M "${emmcdev}" <<-__EOF__
 		1,96,0xe,*
+		,$rootfs_size,,-
+		,512,,-
 		,,,-
 	__EOF__
+
+	echo "Partitioned!"
 }
 
+perm_lastsector=$((emmc_sectors - 1))
+perm_firstsector=$((perm_lastsector - 8*1024*2))
+data_lastsector=$((perm_firstsector - 1 ))
+data_firstsector=$((data_lastsector - 500*1024*2 ))
+rootfs_lastsector=$((data_firstsector - 1))
+
 partition_drive () {
 	flush_cache
 #	umount_p1
 #	umount_p2
 
-	NUM_MOUNTS=$(mount | grep -v none | grep "${destination}" | wc -l)
+	NUM_MOUNTS=$(mount | grep -v none | grep "${emmcdev}" | wc -l)
 
 	for ((i=1;i<=${NUM_MOUNTS};i++))
 	do
-		DRIVE=$(mount | grep -v none | grep "${destination}" | tail -1 | awk '{print $1}')
+		DRIVE=$(mount | grep -v none | grep "${emmcdev}" | tail -1 | awk '{print $1}')
+		echo "debug: unmount loop"
 		umount ${DRIVE} >/dev/null 2>&1 || umount -l ${DRIVE} >/dev/null 2>&1 || write_failure
 	done
 
@@ -166,23 +217,13 @@
 
 	format_boot
 	format_root
+	format_perm
+	format_data
 }
 
-copy_boot () {
-	mkdir -p /tmp/boot/ || true
-	mount ${destination}p1 /tmp/boot/ -o sync
-	#Make sure the BootLoader gets copied first:
-	cp -v /boot/uboot/MLO /tmp/boot/MLO || write_failure
-	flush_cache_mounted
-
-	cp -v /boot/uboot/u-boot.img /tmp/boot/u-boot.img || write_failure
-	flush_cache_mounted
-
-	rsync -aAXv /boot/uboot/ /tmp/boot/ --exclude={MLO,u-boot.img,*bak,flash-eMMC.txt,flash-eMMC.log} || write_failure
-	flush_cache_mounted
-
+set_boot_uuid () {
 	unset root_uuid
-	root_uuid=$(/sbin/blkid -s UUID -o value ${destination}p2)
+	root_uuid=$(/sbin/blkid -s UUID -o value ${emmcdev}p2)
 	if [ "${root_uuid}" ] ; then
 		root_uuid="UUID=${root_uuid}"
 		device_id=$(cat /tmp/boot/uEnv.txt | grep mmcroot | grep mmcblk | awk '{print $1}' | awk -F '=' '{print $2}')
@@ -195,13 +236,104 @@
 		root_uuid="${source}p2"
 	fi
 	flush_cache_mounted
+
+}
+
+copy_boot () {
+	mkdir -p /tmp/boot/ || true
+	mount ${emmcdev}p1 /tmp/boot/ -o sync
+	#Make sure the BootLoader gets copied first:
+
+	echo "debug: Removing everything on boot partition first!"
+#	rm -r /tmp/boot/*
+
+	echo "debug: copy 1"
+	cp -v /boot/uboot/MLO /tmp/boot/MLO || write_failure
+	flush_cache_mounted
+
+	echo "debug: copy 2"
+	cp -v /boot/uboot/u-boot.img /tmp/boot/u-boot.img || write_failure
+	flush_cache_mounted
+
+	echo "debug: copy 3"
+	#this command should fail as we are copying to a fat partition and we cant set permissions for fat
+	rsync -aAXv /boot/uboot/ /tmp/boot/ --exclude={MLO,u-boot.img,*bak,flash-eMMC.txt,flash-eMMC.log} || true #write_failure
+echo "done rsync3"	
+flush_cache_mounted
+
+	set_boot_uuid
 	umount_p1
 }
 
+lable_partitions () {
+	tune2fs -L data ${emmcdev}p3
+	tune2fs -L perm ${emmcdev}p4
+}
+
+write_rootfs_image () {
+	echo "Writing rootfs partition image!"
+	echo timer > /sys/class/leds/beaglebone\:green\:usr0/trigger
+        gunzip -c /opt/factory_settings-rootfs.img.gz | dd of=${emmcdev}p2 bs=16M
+	echo default-on > /sys/class/leds/beaglebone\:green\:usr0/trigger
+	echo "Done writing rootfs partition image!"
+}
+
+write_data_image () {
+        echo "Writing data partition image!"
+        echo timer > /sys/class/leds/beaglebone\:green\:usr0/trigger
+        gunzip -c /opt/factory_settings-data.img.gz | dd of=${emmcdev}p3 bs=16M
+        echo default-on > /sys/class/leds/beaglebone\:green\:usr0/trigger
+        echo "Done writing data partition image!"
+}
+
+write_boot_image () {
+	echo "Writing boot partition image!"
+	echo timer > /sys/class/leds/beaglebone\:green\:usr0/trigger
+	gunzip -c /opt/factory_settings-boot.img.gz | dd of=${emmcdev}p1 bs=16M
+	echo default-on > /sys/class/leds/beaglebone\:green\:usr0/trigger
+	echo "Done writing boot partition image!"
+}
+
+alldone () {
+	#exit
+	if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then
+		echo default-on > /sys/class/leds/beaglebone\:green\:usr0/trigger
+		echo default-on > /sys/class/leds/beaglebone\:green\:usr1/trigger
+		echo default-on > /sys/class/leds/beaglebone\:green\:usr2/trigger
+		echo default-on > /sys/class/leds/beaglebone\:green\:usr3/trigger
+	fi
+
+	echo ""
+	echo "This script has now completed it's task"
+	echo "-----------------------------"
+	echo "Note: Actually unpower the board, a reset [sudo reboot] is not enough."
+	echo "-----------------------------"
+
+	echo "Removing uEnv..."
+	cp /boot/uboot/uEnv.txt /boot/uboot/uEnv.txt.org
+
+	echo "Shutting Down..."
+
+	sync
+	sleep 5
+	sync
+	sleep 5
+
+	#shutdown now
+	#halt
+}
+
 copy_rootfs () {
 	mkdir -p /tmp/rootfs/ || true
-	mount ${destination}p2 /tmp/rootfs/ -o async,noatime
+	mount ${emmcdev}p2 /tmp/rootfs/ -o async,noatime
+	echo "debug: rsync4"
+	lsblk
 	rsync -aAXv /* /tmp/rootfs/ --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found,/boot/*,/lib/modules/*} || write_failure
+
+	echo "Done rsync4!"
+	mkdir /tmp/rootfs/data/ || true
+	mkdir /tmp/rootfs/perm/ || true
+
 	flush_cache_mounted
 
 	if [ -f /tmp/rootfs/opt/scripts/images/beaglebg.jpg ] ; then
@@ -214,14 +346,17 @@
 
 	mkdir -p /tmp/rootfs/boot/uboot/ || true
 	mkdir -p /tmp/rootfs/lib/modules/$(uname -r)/ || true
+
+	echo "debug: rsync2"
 	rsync -aAXv /lib/modules/$(uname -r)/* /tmp/rootfs/lib/modules/$(uname -r)/ || write_failure
 	flush_cache_mounted
 
+	echo "debug: cp //"
 	cp /boot/initrd.img-$(uname -r) /tmp/rootfs/boot/ || write_failure
 	flush_cache_mounted
 
 	unset boot_uuid
-	boot_uuid=$(/sbin/blkid -s UUID -o value ${destination}p1)
+	boot_uuid=$(/sbin/blkid -s UUID -o value ${emmcdev}p1)
 	if [ "${boot_uuid}" ] ; then
 		boot_uuid="UUID=${boot_uuid}"
 	else
@@ -238,26 +373,113 @@
 	flush_cache_mounted
 	umount_p2
 
-	if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then
-		echo default-on > /sys/class/leds/beaglebone\:green\:usr0/trigger
-		echo default-on > /sys/class/leds/beaglebone\:green\:usr1/trigger
-		echo default-on > /sys/class/leds/beaglebone\:green\:usr2/trigger
-		echo default-on > /sys/class/leds/beaglebone\:green\:usr3/trigger
-	fi
+#	alldone
+}
 
-	echo ""
-	echo "This script has now completed it's task"
-	echo "-----------------------------"
-	echo "Note: Actually unpower the board, a reset [sudo reboot] is not enough."
-	echo "-----------------------------"
+echo "eMMC Flasher: Checking system"
+check_running_system
 
-	echo "Shutting Down..."
+#emmc_sectors=$( blockdev --getsize /dev/mmcblk0 )
+
+#echo "eMMC Sectors are: $emmc_sectors"
+emmc_sectors=$( blockdev --getsize "${emmcdev}" )
+echo "eMMC Sectors are: $emmc_sectors.. at $emmcdev"
+rootfs_size=$(( (emmc_sectors - 8*1024*2 - 512*1024*2 - 96*1024*2 - 2*1024*2)/1024/2 ))
+echo "rootfs size: $rootfs_size M"
+
+perm_lastsector=$((emmc_sectors - 1))
+perm_firstsector=$((perm_lastsector - 8*1024*2))
+data_lastsector=$((perm_firstsector - 1 ))
+data_firstsector=$((data_lastsector - 500*1024*2 ))
+rootfs_lastsector=$((data_firstsector - 1))
+
+echo "rootfs last sector: $rootfs_lastsector"
+echo "data partition: $data_firstsector - $data_lastsector"
+echo "perm partition: $perm_firstsector - $perm_lastsector"
+
+#echo "eMMC Flasher: Update boot files"
+#update_boot_files
+
+echo timer > /sys/class/leds/beaglebone\:green\:usr0/trigger
+
+if [ -e "${emmcdev}p4" ]
+then
+        echo "Perminant data partition found! bypassing repartitioning!"
+else
+	echo "Repartitioning!"
+        partition_drive
+fi
+
+umount_all
+
+echo "eMMC Flasher: Creating boot partition"
+if [ -e /opt/factory_settings-boot.img.gz ]
+then
+        write_boot_image
+else
+	format_boot
+	echo "eMMC Flasher: Update boot files"
+	update_boot_files
+        copy_boot
+fi
+
+echo "eMMC Flasher: writing to data partition"
+if [ -e /opt/factory_settings-data.img.gz ]
+then
+        write_data_image
+fi
+
+echo default-on > /sys/class/leds/beaglebone\:green\:usr1/trigger
+
+echo "eMMC Flasher: writing to rootfs partition"
+if [ -e /opt/factory_settings-rootfs.img.gz ]
+then
+	write_rootfs_image
+else
+	format_root
+        copy_rootfs
+fi
+
+echo heartbeat > /sys/class/leds/beaglebone\:green\:usr1/trigger
+
+echo "eMMC Flasher: labling partitions"
+lable_partitions || true
+
+echo "eMMC Flasher: all done!"
+
+mkdir -p /tmp/boot/ || true
+mount ${emmcdev}p1 /tmp/boot/ -o sync || true
+
+#cp /opt/scripts/tools/uEnv.txt.replace /tmp/boot/uEnv.txt
+
+set_boot_uuid || true
+
+#mv /boot/uboot/uEnv.txt /boot/uboot/uEnv.txt.org
+#cp /opt/scripts/tools/uEnv.txt.replace /tmp/boot/uEnv.txt
+
+umount /tmp/boot/ || true
+
+echo default-on > /sys/class/leds/beaglebone\:green\:usr0/trigger
+
+alldone
+
+#shutdown -h now
+#poweroff
+
+rebootx () {
+	sync
+	mkdir -p /tmp/boot_disabler || true
+	mount /dev/mmcblk0p1 /tmp/boot_disabler	|| true
+	mkdir -p /tmp/boot_disabler/disabled || true
+	mv /tmp/boot_disabler/* /tmp/boot_disabler/disabled
 	sync
-	halt
+	umount /tmp/boot_disabler
+	echo "rebooting"
+	sleep 10
+	reboot
+	sleep 5
+	shutdown -r -t 5
+	exit 0
 }
 
-check_running_system
-update_boot_files
-partition_drive
-copy_boot
-copy_rootfs
+rebootx
