#!/bin/sh
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

check_for_exit ()
{
        if [ -e /run/chaipcr/exit_all.flag ]
        then
                echo exit all flag is up
        	exit 0
	fi
}

export_pwm ()
{
	echo PWM: Creating $3 endpoint. Exporting $1
	for chip in $1/pwmchip?
	do
		check_for_exit
		echo exporting $chip
		chip_path="$chip/pwm$2"
		if [ -e $chip_path ]
		then
			echo "Chip is enabled already: $chip_path"
		else
			echo "Enabling chip: $chip_path"
			echo $2>$chip/export || continue
			echo Successfully enabled: $chip_path
		fi
		echo $chip_path>>/run/chaipcr/realtime/pwms.inf
		ln -s $chip_path /run/chaipcr/realtime/$3
	done
	if [ -e /run/chaipcr/realtime/$3 ]
	then
		echo Intilizing $3 end point
		echo $4 > $chip/pwm$2/period
		echo 0 >  $chip/pwm$2/enable
	else
		echo Error creating $3 end point
	fi
}

pwm_setup_kernel49 ()
{
	ls /sys/class/pwm/pwmchip?/export >/dev/null
	if [ $? -eq 0 ]
	then
		echo PWM Export: New kernel detected
		if [ -e /run/chaipcr/realtime/ ]
		then
			echo pwm endpoints folder created before
			return
		fi

		mkdir -p /run/chaipcr/realtime/ || true

		#Heat Sink: P9.14 ehrpwm1a:
		export_pwm /sys/devices/platform/ocp/48302000.epwmss/48302200.pwm/pwm 0 kHeatSinkFanControl.pwm 500000

		#LED control: P9.28 eCAP2_PWM2
		export_pwm /sys/devices/platform/ocp/48304000.epwmss/48304100.ecap/pwm 0 kLEDBlank.pwm 50000

		#Lid: P9.16 ehrpwm1b
		export_pwm /sys/devices/platform/ocp/48302000.epwmss/48302200.pwm/pwm 1 kLidControl.pwm 500000

		#Head Block: P8.13 ehrpwm2b, P8.19 ehrpwm2a
		export_pwm /sys/devices/platform/ocp/48304000.epwmss/48304200.pwm/pwm 1 kHeatBlockZone1.pwm 50000
		export_pwm /sys/devices/platform/ocp/48304000.epwmss/48304200.pwm/pwm 0 kHeatBlockZone2.pwm 50000

		ls -ahl /run/chaipcr/realtime/ || true
	fi
}

wait_for_migrate () {
        echo "Checking for migrate script completation"
        while true; do
	   check_for_exit 
           if [ -e ${sdcard}/factory/upgrade_autorun.flag ] || [ -e ${sdcard}/upgrade/upgrade_autorun.flag ];
           then
                echo "Still waiting for migrate script to finish ..."
		sleep 5
           else
                echo "DB migration is complete!..."
                break
           fi
 	done
	echo "Proceed with rest of the operations as migration task is done..."
}

get_root_password () {
	if [ -e /perm/device.json ]
	then
		serial_number=$(/usr/bin/ruby -rjson -e 'j = JSON.parse(File.read("/perm/device.json")); print j["serial_number"]')
		if [ ! -z $serial_number ]
		then
#			echo $serial_number
			hashed_password=$(echo -n $serial_number | /usr/bin/md5sum | awk '{print $1}')
			if [ ! -z $hashed_password ]
			then
				echo $hashed_password
				return
			fi
		fi
	fi

	echo chaipcr
}

change_root_password_on_factorysettings () {
	echo "Checking for flag file: ${sdcard}/upgrade/change_root_password.flag"
	if [ -e ${sdcard}/upgrade/change_root_password.flag ]
	then
       		echo "Change root password flag found up"

		new_password=$(get_root_password)
		#echo new_password: $new_password
		echo "$new_password\n$new_password" | (/usr/bin/passwd root -q)
		if [ $? -eq 0 ]
		then
			echo password changed successfully to: $new_password
			rm ${sdcard}/upgrade/change_root_password.flag || :
        		echo "Change root password flag down.."
		else
			echo password changing failed
		fi
	else
		echo "No change root password flag found!"
	fi
}

retain_previous_user_credentials_on_upgrade () {
        if [ -e ${sdcard}/factory/upgrade_autorun.flag ] || [ -e ${sdcard}/upgrade/upgrade_autorun.flag ]
        then
           echo "Software upgrade has been performed"
           echo "Restore user credentials preserved before the software upgrade... "
           if [ -e /sdcard/upgrade/passwd ] && [ -e /sdcard/upgrade/passwd- ]
           then
              cp /sdcard/upgrade/passwd /etc
              cp /sdcard/upgrade/passwd- /etc
              chmod 644 /etc/passwd
              chmod 600 /etc/passwd-
              rm /sdcard/upgrade/passwd /sdcard/upgrade/passwd-
           fi
           if [ -e /sdcard/upgrade/shadow ] && [ -e /sdcard/upgrade/shadow- ]
           then
              cp /sdcard/upgrade/shadow /etc
              cp /sdcard/upgrade/shadow- /etc
              chmod 640 /etc/shadow
              chown root:shadow /etc/shadow
              chmod 600 /etc/shadow-
              rm /sdcard/upgrade/shadow /sdcard/upgrade/shadow-
           fi
        fi
}

run_mysql_upgrade_cmd () {
   echo "Upgrade MySQL InnoDB tables."
   mysql_upgrade
   if [ $? -eq 0 ]; then
      echo "run_mysql_upgrade_cmd: INFO: MySQL upgrade is successful, Proceed with rest of the DB migration"
   else
      echo "run_mysql_upgrade_cmd: ERROR: Encountered issues with MySQL upgrade, verify the DB tables"
   fi
   return 0
}

run_migrate_on_upgrade () {
	echo "Checking for flag file: ${sdcard}/factory/upgrade_autorun.flag and ${sdcard}/upgrade/upgrade_autorun.flag"
	if [ -e ${sdcard}/factory/upgrade_autorun.flag ] || [ -e ${sdcard}/upgrade/upgrade_autorun.flag ]
	then
       		echo "Upgrade autorun flag found up"
		cd /root/chaipcr/web || :
		echo "changed folder to $(pwd).. executing migrate..."
		mysqladmin status | grep Uptime
		sql_running=$?

		while [ $sql_running -eq 1 ]
		do
			check_for_exit 
			echo "mysql server not up yet.. code $sql_running. waiting 10 seconds."
			echo "MySql status:"
			mysqladmin status
			
			chown -R mysql /data/mysql
			chgrp -R mysql /data/mysql

                        echo "Reattempting to start the MySQL daemon..."
                        systemctl start mysql

                        SERVICE=realtime;
                        if ps ax | grep -v grep | grep $SERVICE > /dev/null
                        then
                           echo "$SERVICE service is running, Move ahead with RAILS DB migration"
                        else
                           echo "$SERVICE service is not running, start realtime app before moving forward"
			   systemctl start realtime.service
                        fi
			check_for_exit
			sleep 10
			mysqladmin status | grep Uptime
			sql_running=$?
		done

                echo "MySQL is running now, Proceed with MySQL InnoDB tables upgrade"
                run_mysql_upgrade_cmd

                echo "Perform RAILS DB migration by calling upgrade.sh script..."
		RAILS_ENV=production /root/chaipcr/web/scripts/upgrade.sh >> /var/log/upgrade.log 2>&1 || :
		echo "Execution done executing upgrade.sh!"

	        if [ -e ${sdcard}/factory/upgrade_autorun.flag ]
        	then
			mount -o remount,rw ${sdcard}/factory/ || :
       			rm ${sdcard}/factory/upgrade_autorun.flag || :
			sync
			mount -o remount,ro ${sdcard}/factory/ || :
		fi

		rm ${sdcard}/upgrade/upgrade_autorun.flag || :
        	echo "Upgrade autorun flag down.."

	else
		echo "No autorun flag found!"
	fi
}

run_cleanup_user_tokens_every4hours () {
	wait_for_migrate
	while true
	do
		check_for_exit
		echo Cleaning up every 4 hours.
		sleep 14400
		echo cleaning task due.
		cd /root/chaipcr/web || :
		RAILS_ENV=production /usr/bin/ruby scripts/clean.rb
	done
}

start_unicorn () {
	echo starting unicorn
	cd /root/chaipcr/web
	/usr/local/bin/bundle exec /usr/local/bin/unicorn -c /root/chaipcr/web/config/unicorn.rb -E production -D || true
}

start_nginx () {
       echo starting nginx
       nginx_logdir=/var/log/nginx
       if [ -d "$nginx_logdir" ] && [ -x "$nginx_logdir" ]; then
         echo "Nginx log directory already exists, Proceed to starting Nginx..."
       else
         echo "Nginx directory $nginx_logdir doesn't exist, Create the directory..."
         mkdir $nginx_logdir
       fi

       echo
       echo "Make sure Nginx log files are writable..."
       echo
       touch $nginx_logdir/error.log
       touch $nginx_logdir/access.log
       echo "Enable automatic start of nginx at the time of reboot and start nginx..."
       echo
       systemctl enable nginx.service
       systemctl start nginx.service

       echo "Check the status of nginx service..."
       echo
       systemctl status nginx.service
}

start_julia () {
	echo starting
	if [ -e /root/chaipcr/bioinformatics/juliaserver.jl ] && [ -e /usr/bin/julia ]
	then
		while true
		do
			check_for_exit
			echo starting julia
			if [ -e  /root/chaipcr/bioinformatics/qpcranalysis.so ]
			then
				echo starting with precompiled QpcrAnalysis package.
				JULIA_ENV=production julia -J /root/chaipcr/bioinformatics/qpcranalysis.so -e 'push!(LOAD_PATH, "/root/chaipcr/bioinformatics/QpcrAnalysis/"); include("/root/chaipcr/bioinformatics/juliaserver.jl")' || true
			else
				JULIA_ENV=production julia -e 'push!(LOAD_PATH, "/root/chaipcr/bioinformatics/QpcrAnalysis/"); include("/root/chaipcr/bioinformatics/juliaserver.jl")' || true
			fi
			
			exitcode=$?
			timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
			msg="Julia exit($exitcode) on $timestamp"
			cd /var/log
			echo $msg>>julia.log
			if ! [ -e crashjulia ]
			then
			        echo creating crashjulia
			        mkdir crashjulia
			fi
			echo $msg
			mv julia.log crashjulia/julia-$timestamp.log
			msg="Spawning from a Julia exit($exitcode) on $timestamp"
                        echo $msg >> julia.log
			cd crashjulia
			tar czf julia-$timestamp.log.tgz julia-$timestamp.log --remove-files &
			find /var/log/crashjulia/ -mtime +10 -type f -delete

			if [ $exitcode -eq 101 ]
			then
			        echo Disabling Julia watchdog
			        return
			fi

			check_for_exit
			sleep 10
		done
	else
		echo julia server script not exectuting.
	fi
}

ethernet_cable_unplugged () {
   echo "Check Link status: eth0"
   if [ -e /sys/class/net/eth0/carrier ]
   then
      LINK_STATUS=`cat /sys/class/net/eth0/carrier`
      echo $LINK_STATUS
      if [ "$LINK_STATUS" = "0" ]
      then
         echo "Link is down for eth0, forcebily bring down link"
         ip addr flush dev eth0 && /sbin/ifdown eth0
      fi
   fi
}

run_clean_user_tokens () {
        ethernet_cable_unplugged
  
	wait_for_migrate

	echo "checking sql up status..."
	mysqladmin status | grep Uptime
	sql_running=$?
	while [ $sql_running -eq 1 ]
	do
		check_for_exit
		echo "mysql server not up yet.. code $sql_running. waiting 5 seconds."
		echo "MySql status:"
		mysqladmin status
		sleep 5
		mysqladmin status | grep Uptime
		sql_running=$?
	done

	echo mysql server is running.. executing startup script
	cd /root/chaipcr/web || :
        echo "changed folder to $(pwd)"
	echo date  is $(date)

	RAILS_ENV=production /usr/bin/ruby scripts/startup.rb || :
	echo "Startup script execution result: $?"

	if [ -e /etc/rc1.d/K01unicorn ]
	then
		echo unicorn is set to start on startup.. removing autostart setup
		/usr/sbin/update-rc.d unicorn remove || true
	fi

	if  ps aux | grep unicorn | grep -v grep
        then
		echo unicorn is running
	else
		echo starting unicorn
		start_unicorn &
	fi

        if  ps aux | grep nginx | grep -v grep
        then
                echo nginx is running
        else
                echo Start nginx process
                start_nginx &
        fi

	run_cleanup_user_tokens_every4hours &

	if [ -e /tmp/mysql.sock ]
	then
		echo "MySQL sockets cloned file found"
	else
		if [ -e /run/mysqld/mysqld.sock ]
		then
			echo "Clonning MySQL sockets file"
			ln -s /run/mysqld/mysqld.sock /tmp/mysql.sock
		else
			echo "MySQL sockets file not found." 
		fi
	fi

	if  ps aux | grep julia | grep -v grep
        then
		echo julia is running
	else
		echo starting julia
		start_julia>> $log_file 2>&1 &
	fi
}

mysql_watchdog () {
	while true
	do
		check_for_exit
		/etc/init.d/mysql status | grep running
		sql_running=$?
		if [ $sql_running -eq 1 ]
		then
			echo MySql found down... Trying to restart MySQL service!
			service mysql restart
			sleep 100
		fi
		sleep 300
	done
}

mysql_watchdog_logged () {
	mysql_watchdog >> $log_file 2>&1
}

run_migrate_on_upgrade_logged () {
	run_migrate_on_upgrade >> $log_file 2>&1
}

bringup_wireless_interface () {
    if [ -e /sys/class/net/wlan0/operstate ]
    then
       wlanState=`cat /sys/class/net/wlan0/operstate`
       if [ "$wlanState" = "down" ];
       then
          echo "The current interface state is $wlanState, Try to bring up the wlan0 interface"
          ifup wlan0
       else
          echo "The WIFI interface wlan0 state is already $wlanState"
       fi
    fi
}

update_wireless_network () {
    if [ -e /sdcard/upgrade/interfaces ]
    then
       cp /sdcard/upgrade/interfaces /etc/network/interfaces
       rm /sdcard/upgrade/interfaces
    fi

    if [ -e /etc/udev/rules.d/80-net-setup-link.rules ]
    then
       echo "Symbolic link already exists for overriding predictable names for WIFI interface - wlanX"
    else
       echo "Make sure to override unpredictable naming for WIFI interface - Always use wlanX"
       ln -s /lib/udev/rules.d/80-net-setup-link.rules /etc/udev/rules.d/80-net-setup-link.rules
    fi

    if [ -e /sdcard/upgrade/70-persistent-net.rules ]
    then
       cp /sdcard/upgrade/70-persistent-net.rules /etc/udev/rules.d/70-persistent-net.rules
       rm /sdcard/upgrade/70-persistent-net.rules
    fi

    echo "Make sure to update fixed name for WiFi endpoint (wlan0)"
    if [ -e /sys/class/net/wlx*/address ]
    then
       address=`cat /sys/class/net/wlx*/address`
    elif [ -e /sys/class/net/wlan0/address ]
    then
       address=`cat /sys/class/net/wlan0/address`
    fi
    echo "The MAC address of wireless LAN dongle $address"

    if [ -e /etc/udev/rules.d/70-persistent-net.rules ]
    then
       if grep -q "wlan0" /etc/udev/rules.d/70-persistent-net.rules
       then
          wlantxt=$(grep wlan0 /etc/udev/rules.d/70-persistent-net.rules)
          macaddress=$(echo $wlantxt | sed -e 's/SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?\*", ATTR{address}=="\(.*\)", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="wlan\*", NAME="wlan0"/\1/g')
          echo Existing MAC address in the rules $macaddress
          if [ "$address" = "$macaddress" ]
          then
             echo "Rules file is already updated with fixed wireless LAN name (wlan0)"
          else
             original="SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?\*\", ATTR{address}==\".*\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"wlan\*\", NAME=\"wlan0\""
             replacement="SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"$address\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"wlan*\", NAME=\"wlan0\""
             echo "ORIGINAL.... $original"
             echo "REPLACEMENT.... $replacement"
             sed -i "s/$original/$replacement/g" /etc/udev/rules.d/70-persistent-net.rules
             echo "Updated MAC address for wlan0 network..."
          fi
       else
          echo "SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"$address\", ATTR{dev_id}==\"0x0\", ATTR{type}==\"1\", KERNEL==\"wlan*\", NAME=\"wlan0\"" >> /etc/udev/rules.d/70-persistent-net.rules
          echo "Done with updating wireless network rules..."
       fi
       bringup_wireless_interface
    fi
}

isEth0ConfiguredAsStaticIp () {
   if grep -q "iface eth0 inet static" /etc/network/interfaces;
   then
      echo "The interface eth0 configured as static IP"
      return 1
   else
      echo "The interface eth0 configured as dynamic IP"
      return 0
   fi
}

checkEth0IntefaceForStaticIP () {
   if [ ! -e /var/lib/chaibio ]
   then
      echo "Create the directory that holds interfaces to be ignored as they are configured as static IP address"
      mkdir -p /var/lib/chaibio
   fi

   if [ ! -e /var/lib/chaibio/network_watchdog_ignored_interfaces ]
   then
      touch /var/lib/chaibio/network_watchdog_ignored_interfaces
   fi

   if [ ! -e /var/lib/chaibio/prevstate_of_ethernet_config ]
   then
      touch /var/lib/chaibio/prevstate_of_ethernet_config
   fi

   isEth0ConfiguredAsStaticIp
   retVal=$?
   if [ $retVal = 1 ]
   then
      echo "eth0" > /var/lib/chaibio/network_watchdog_ignored_interfaces
      echo "static" > /var/lib/chaibio/prevstate_of_ethernet_config
      ps -ef | grep dhclient | grep -v grep | grep eth0
      result=$?
      if [ $result -eq 0 ]
      then
         echo killing previous eth0 instance.
         ps -ef | grep dhclient | grep -v grep | grep eth0 | awk '{print $2}' | xargs kill -9
         #ip addr flush dev eth0 && systemctl restart networking.service
      else
         echo no previous eth0 connection found.
      fi
   else
      echo "Check whether eth0 interface has been ignored previously"
      if grep -q "eth0" /var/lib/chaibio/network_watchdog_ignored_interfaces
      then
         echo "Delete the interface eth0 from ignore interface list"
         sed -i '/eth0/d' /var/lib/chaibio/network_watchdog_ignored_interfaces
         echo "dhcp" > /var/lib/chaibio/prevstate_of_ethernet_config
      else
         echo "No change required as the interface is configured as dynamic IP"
      fi

   fi
}

bringup_ethernet_interface () {
    if [ -e ${sdcard}/factory/upgrade_autorun.flag ] || [ -e ${sdcard}/upgrade/upgrade_autorun.flag ]
    then
       echo "Software upgrade in progress; Update Ethernet interface IP, if required"
       echo "Check whether static IP address was configured previously"
       if grep -q "eth0" /var/lib/chaibio/network_watchdog_ignored_interfaces
       then
          echo "Static IP address configuration found"
          echo "Force the switch from dynamic IP address to static IP address during upgrade"
          ifdown eth0 && ifup eth0
       fi
    fi
}

update_ethernet_network () {
    checkEth0IntefaceForStaticIP
    if [ -e /sys/class/net/eth0/carrier ]
    then
      LINK_STATUS=`cat /sys/class/net/eth0/carrier`
      echo $LINK_STATUS
      if [ "$LINK_STATUS" = "1" ]
      then
         echo "Ethernet cable is plugged in"
         bringup_ethernet_interface
      fi
    fi
}

create_swapfile () {
        swapfile=/sdcard/upgrade/swapfile
        freespace=$(($(stat -f --format="%a*%S" /tmp)))
        swapsize=$((freespace-50000000))        # 47.8MB of margine
        if [ $swapsize -gt 536870912 ]          # capped to 512MB
        then
                echo capping swap file to 512MB
                swapsize=536870912
        fi

        echo "swap file size (bytes) $swapsize"
        if [ $swapsize -lt 157286400 ]  # Minimum of 150M
        then
                echo No free space for the swap file under /tmp.
                echo creating a temporary swap file on sdcard
                swapsize=1G
        else
                echo creating swap file under /tmp.
                swapfile=/tmp/swapfile
        fi

        if [ ! -e $swapfile ]
        then
                if fallocate -l $swapsize $swapfile
                then
                        echo "swap file created successfully"
                else
                        echo "failed creating swap file"
                        return
                fi
        fi

        sudo chmod 600 $swapfile
        sudo mkswap $swapfile
        sudo swapon $swapfile

        echo verifying swap file is successfully added to $swapfile
        sudo swapon -s
        free -m
}

function replace_in_file () {
	filename=$1
	if [ -e $filename ]
	then
		echo Replacing strings in $filename
		if [ -e $filename.org ]
		then
			echo file processed before
		else
			cp $filename $filename.org
		fi
		full_string=$(cat $filename)
                search_string=$2
                replace_string=$3
		updated_file=${full_string/$search_string/$replace_string}
		echo "$updated_file">${filename}
	else
		echo File not found: $filename
	fi
}

function upgrade_interfaces () {
	if [ -e ${sdcard}/factory/upgrade_autorun.flag ] || [ -e ${sdcard}/upgrade/upgrade_autorun.flag ]
	then
		echo upgrading /etc/network/interfaces
		replace_in_file /etc/network/interfaces "auto wl" "allow-hotplug wl"
	fi
}

check_upgrade_autorun () {
	sdcard_dev=""
	if [ -e /dev/mmcblk0p3 ]
	then
        	sdcard_dev=/dev/mmcblk1
	elif [ -e /dev/mmcblk1p3 ]
	then
		sdcard_dev=/dev/mmcblk0
	else
		echo "No SDCard found!" >> $log_file
		return 1
	fi

	if [ -z ${sdcard_dev} ]
	then
		echo "No SDCard found! Cannot find ${sdcard_dev}" >> $log_file
		return 1
	fi

	if [ -e ${sdcard_dev} ]
	then
		echo "SDCard block device found at $sdcard_dev" >> $log_file

		if [ ! -e ${sdcard}/factory ]
		then
			mkdir -p ${sdcard}/factory>/dev/null || true
			mkdir -p ${sdcard}/upgrade>/dev/null || true
		fi

		mount -o ro ${sdcard_dev}p1 ${sdcard}/factory>/dev/null || true
		mount ${sdcard_dev}p2 ${sdcard}/upgrade>/dev/null || true
		if [ $? -gt 0 ]
		then
			echo "Second SDCard partition not found.. old version? ${sdcard}p2"  >> $log_file
		fi

		create_swapfile &
		upgrade_interfaces
                update_wireless_network
                update_ethernet_network
		change_root_password_on_factorysettings
#               retain_previous_user_credentials_on_upgrade
		run_migrate_on_upgrade_logged
		if [ -e /sdcard/upgrade/scripts/setup_touchcontroller.sh ]
		then
			/sdcard/upgrade/scripts/setup_touchcontroller.sh
		fi
		return 0
	fi

	change_root_password_on_factorysettings
	run_migrate_on_upgrade_logged
	return 1
}

check_corruption () {
	echo "Corruption test started!"
	sh $BASEDIR/check_sdcard.sh || true
	echo "Corruption test result: $?"
}

network_watchdog_interface() {
	iface=$1
	echo check loop starting for $iface

        while [ 1 ]
        do
		check_for_exit 
                checkEth0IntefaceForStaticIP
                
	        if grep "$iface" /var/lib/chaibio/network_watchdog_ignored_interfaces
        	then
                	echo Temprary ignoring the interface  $iface
			sleep 60
	                continue
	        fi

                ip_address=$(ifconfig $iface | grep 'inet addr:') || :
                if [ -z "$ip_address" ]
                then
                        echo "Network watchdog: No network found!"
			ps -ef | grep dhclient | grep -v grep | grep $iface
                        result=$?
                        if [ $result -eq 0 ]
                        then
                                echo killing previous $iface instance.
                                ps -ef | grep dhclient | grep -v grep | grep $iface | awk '{print $2}' | xargs kill -9
                        else
                                echo no previous $iface connection found.
                        fi
			lfile=/var/lib/dhcp/dhclient.$iface.leases
#			rm $lfile
			extras=""
                        if echo "$iface" | grep -q "wlan"
		        then
	        	        echo adding extra params for interface $iface
				extras="-cf /root/chaipcr/deploy/device/dhclient.wlan.conf"
			fi
			cmd="dhclient -1 -4 -d -v $iface -lf $lfile $extras"
			echo calling $cmd
			$cmd
			check_for_exit
			sleep 3
                else
                        echo "Network watchdog.. Network found: $ip_address"
			sleep 20
                fi
        done
	echo "Network watchdog: Exit!"
}

network_watchdog_interfaces() {
	while true
	do
		check_for_exit
	        read interface
        	if [ -z $interface ]
	        then
#               	echo Empty if $interface
        	        return
	        fi

	        #echo "Network watchdog for interface: $interface"
		if echo "$interface" | grep -q "lo"
	        then
        	        echo Invalid interface $interface
	                continue
        	fi
		if echo "$interface" | grep -q "can"
	        then
        	        echo Invalid interface $interface
	                continue
        	fi
                if echo "$interface" | grep -q "usb"
                then
                        echo For $interface there should be no dhcp discovery. The instrument is the dhcp server on that interface.
                        continue
                fi
	        echo "Network watchdog for interface: $interface"
		network_watchdog_interface $interface &
	done
}

network_watchdog() {
        echo "Network watchdog: Starting"
	pkill -9 dhclient
        ls /sys/class/net/ | network_watchdog_interfaces
}

NOW=$(date +"%m-%d-%Y %H:%M:%s")
log_file="/var/log/life_age.log"
sdcard=/sdcard

echo Restarting! >> $log_file
echo $NOW >>  $log_file

BASEDIR=$(dirname $0)

echo Mounting partitions! >> $log_file
if [ -e /data ]
then
        echo "/data folder found!"
else
        mkdir /data
fi
if [ -e /perm ]
then
        echo "/perm folder found!"
else
        mkdir /perm
fi

is_mounted=$(mount | grep /data)
echo "Mounting check is $is_mounted"
fat_partition_exits=$(mount | grep /boot/uboot)
if [ -z "$is_mounted" ]
then
	if [ -z "$fat_partition_exits" ]
	then
        	if [ -e /dev/mmcblk1p3 ]
	        then
			mount /dev/mmcblk1p3 /perm
                	mount /dev/mmcblk1p2 /data
	        elif [ -e /dev/mmcblk0p3 ]
        	then
			mount /dev/mmcblk0p3 /perm
	                mount /dev/mmcblk0p2 /data
        	else
                	echo "Unknown condition"
	        fi
	else
		if [ -e /dev/mmcblk0p3 ]
		then	
        		mount /dev/mmcblk0p3 /data
		elif [ -e /dev/mmcblk1p3 ]
		then
        		mount /dev/mmcblk1p3 /data
		else
        		echo "Unknown condition"
		fi

		if [ -e /dev/mmcblk0p4 ]
		then
	        	mount /dev/mmcblk0p4 /perm
		elif [ -e /dev/mmcblk1p4 ]
		then
		        mount /dev/mmcblk1p4 /perm
		fi
	fi
fi

pwm_setup_kernel49 >> $log_file 2>&1 || true
check_upgrade_autorun >> $log_file 2>&1 || true &
network_watchdog >> /dev/null 2>&1 || true
check_corruption >> $log_file 2>&1 || true
run_clean_user_tokens >> $log_file 2>&1 || true &
echo "Autorun script done!" >> $log_file

exit 0
