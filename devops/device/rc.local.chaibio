#!/bin/sh
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

run_migrate_on_upgrade () {
	echo "Checking for flag file: ${sdcard}/factory/upgrade_autorun.flag"
	if [ -e ${sdcard}/factory/upgrade_autorun.flag ]
	then
       		echo "Upgrade autorun flag found up"
		cd /root/chaipcr/web || :
		echo "changed folder to $(pwd).. executing migrate..."
		mysqladmin status | grep Uptime
		sql_running=$?

		while [ $sql_running -eq 1 ]
		do
			echo "mysql server not up yet.. code $sql_running. waiting 10 seconds."
			echo "MySql status:"
			mysqladmin status

			sleep 10
			mysqladmin status | grep Uptime
			sql_running=$?
		done

		echo mysql server is running

		RAILS_ENV=production /usr/local/bin/bundle exec /usr/local/bin/rake db:migrate || :
		echo "Execution result: $?, now executing seed_fu..."
		RAILS_ENV=production /usr/local/bin/bundle exec /usr/local/bin/rake db:seed_fu || :
		echo "Execution result $?, done executing scripts!"
       		rm ${sdcard}/factory/upgrade_autorun.flag
        	echo "Upgrade autorun flag down"
	else
		echo "No autorun flag found!"
	fi
}

run_cleanup_user_tokens_every4hours () {
	while true
	do
		echo Cleaning up every 4 hours.
		sleep 14400
		echo cleaning task due.
		cd /root/chaipcr/web || :
		RAILS_ENV=production ruby scripts/clean.rb
	done
}

run_clean_user_tokens () {
	echo "checking sql up status..."
	mysqladmin status | grep Uptime
	sql_running=$?
	while [ $sql_running -eq 1 ]
	do
		echo "mysql server not up yet.. code $sql_running. waiting 5 seconds."
		echo "MySql status:"
		mysqladmin status
		sleep 5
		mysqladmin status | grep Uptime
		sql_running=$?
	done

	echo mysql server is running.. executing startup script
	cd /root/chaipcr/web || :
        echo "changed folder to $(pwd)"
	echo date  is $(date)

	RAILS_ENV=production ruby scripts/startup.rb || :
	echo "Execution result: $?"
	run_cleanup_user_tokens_every4hours &
}

mysql_watchdog () {
	while true
	do
		/etc/init.d/mysql status | grep running
		sql_running=$?
		if [ $sql_running -eq 1 ]
		then
			echo MySql found down... Trying to restart MySQL service!
			service mysql restart
			sleep 100
		fi
		sleep 300
	done
}

mysql_watchdog_logged () {
	mysql_watchdog >> $log_file 2>&1
}

run_migrate_on_upgrade_logged () {
	run_migrate_on_upgrade >> $log_file 2>&1
}

check_upgrade_autorun () {
	sdcard_dev=""
	if [ -e /dev/mmcblk0p4 ]
	then
        	sdcard_dev=/dev/mmcblk1
	elif [ -e /dev/mmcblk1p4 ]
	then
		sdcard_dev=/dev/mmcblk0
	else
		echo "No SDCard found!" >> $log_file
		return 1
	fi

	if [ -z ${sdcard_dev} ]
	then
		echo "No SDCard found! Cannot find ${sdcard_dev}" >> $log_file
		return 1
	fi

	if [ -e ${sdcard_dev} ]
	then
		echo "SDCard block device found at $sdcard_dev" >> $log_file

		sdcard=/sdcard
		if [ ! -e ${sdcard}/factory ]
		then
			mkdir -p ${sdcard}/factory>/dev/null || true
			mkdir -p ${sdcard}/upgrade>/dev/null || true
		fi

		mount ${sdcard_dev}p1 ${sdcard}/factory>/dev/null || true
		mount ${sdcard_dev}p2 ${sdcard}/upgrade>/dev/null || true
		if [ $? -gt 0 ]
		then
			echo "Second SDCard partition not found.. old version? ${sdcard}p2"  >> $log_file
		fi

		run_migrate_on_upgrade_logged
		return 0
	fi

	run_migrate_on_upgrade_logged
	return 1
}

check_corruption () {
	echo "Corruption test started!"
	sh $BASEDIR/check_sdcard.sh || true
	echo "Corruption test result: $?"
}

network_watchdog_interface() {
	iface=$1
	echo check loop starting for $iface

        while [ 1 ]
        do
                ip_address=$(ifconfig $iface | grep 'inet addr:') || :
                if [ -z "$ip_address" ]
                then
                        echo "Network watchdog: No network found!"
			ps -ef | grep /sbin/dhclient | grep -v grep | awk '{print $2}' | xargs kill -9
#pkill -9 /sbin/dhclient
			lfile=/var/lib/dhcp/dhclient.$iface.leases 
			rm $lfile
			cmd="dhclient -1 -4 -d -v $iface -lf $lfile"
			echo calling $cmd
			$cmd
			sleep 3
                else
                        echo "Network watchdog.. Network found: $ip_address"
			sleep 20
                fi
        done
	echo "Network watchdog: Exit!"
}

network_watchdog_interfaces() {
while true
do
        read interface
        if [ -z $interface ]
        then
#               echo Empty if $interface
                return
        fi

        #echo "Network watchdog for interface: $interface"
        if [[ $interface =~ 'lo'.* ]] || [[ $interface =~ 'usb'.* ]]
        then
                echo Invalid interface $interface
                continue
        fi
        echo "Network watchdog for interface: $interface"
	network_watchdog_interface $interface &
done
}

network_watchdog() {
        echo "Network watchdog: Starting"
	pkill -9 dhclient
        ls /sys/class/net/ | network_watchdog_interfaces
}

BASEDIR=$(dirname $0)

network_watchdog >> /dev/null 2>&1

NOW=$(date +"%m-%d-%Y %H:%M:%s")
log_file="/var/log/life_age.log"

echo Restarting! >> $log_file
echo $NOW >>  $log_file
echo Mounting partitions! >> $log_file

#check_upgrade_autorun &

if [ -e /data ]
then
        echo "/data folder found!"
else
        mkdir /data
fi
if [ -e /perm ]
then
        echo "/perm folder found!"
else
        mkdir /perm
fi

is_mounted=$(mount | grep /data)

if [ -z "$is_mounted" ]
then
	if [ -e /dev/mmcblk0p3 ]
	then
        	mount /dev/mmcblk0p3 /data
	elif [ -e /dev/mmcblk1p3 ]
	then
        	mount /dev/mmcblk1p3 /data
	else
        	echo "Unknown condition"
	fi

	if [ -e /dev/mmcblk0p4 ]
	then
        	mount /dev/mmcblk0p4 /perm
	elif [ -e /dev/mmcblk1p4 ]
	then
	        mount /dev/mmcblk1p4 /perm
	fi
fi

check_corruption >> $log_file || true
check_upgrade_autorun &
run_clean_user_tokens &
echo "Autorun script done!" >> $log_file

exit 0
