#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

run_migrate_on_upgrade () {
	echo "Checking for flag file: ${sdcard}/factory/upgrade_autorun.flag"
	if [ -e ${sdcard}/factory/upgrade_autorun.flag ]
	then
       		echo "Upgrade autorun flag found up"
		cd /root/chaipcr/web || :
		echo "changed folder to $(pwd).. executing migrate..."
		mysqladmin status | grep Uptime
		sql_running=$?
		while [ $sql_running -eq 1 ]
		do
			echo mysql server not up yet... waiting 10 seconds!.. the following is mysql status:
			mysqladmin status

			sleep 10
			mysqladmin status | grep Uptime
			sql_running=$?
		done

		echo mysql server is running
		RAILS_ENV=production bundle exec rake db:migrate || :
		echo "Execution result: $?, now executing seed_fu..."
		RAILS_ENV=production bundle exec rake db:seed_fu || :
		echo "Execution result $?, done executing scripts!"
       		rm ${sdcard}/factory/upgrade_autorun.flag
        	echo "Upgrade autorun flag down"
	else
		echo "No autorun flag found!"
	fi
}

run_migrate_on_upgrade_logged () {
	run_migrate_on_upgrade >> $log_file 2>&1
}

check_upgrade_autorun () {
	sdcard_dev=""
	if [ -e /dev/mmcblk0p4 ]
	then
        	sdcard_dev=/dev/mmcblk1
	elif [ -e /dev/mmcblk1p4 ]
	then
		sdcard_dev=/dev/mmcblk0
	else
		echo "No SDCard found!" >> $log_file
		return 1
	fi

	if [ -z ${sdcard_dev} ]
	then
		echo "No SDCard found! Cannot find ${sdcard_dev}" >> $log_file
		return 1
	fi

	if [ -e ${sdcard_dev} ]
	then
		echo "SDCard block device found at $sdcard_dev" >> $log_file

		sdcard=/sdcard
		if [ ! -e ${sdcard}/factory ]
		then
			mkdir -p ${sdcard}/factory>/dev/null || true
			mkdir -p ${sdcard}/upgrade>/dev/null || true
		fi

		mount ${sdcard_dev}p1 ${sdcard}/factory>/dev/null || true
		mount ${sdcard_dev}p2 ${sdcard}/upgrade>/dev/null || true

		if [ $? -gt 0 ]
		then
			echo "Second SDCard partition not found.. old version? ${sdcard}p2"  >> $log_file
		fi

		run_migrate_on_upgrade_logged &

		return 0
	fi
	return 1
}

check_corruption () {
	echo "Corruption test started!"
	sh $BASEDIR/check_sdcard.sh || true
	echo "Corruption test result: $?"
}

network_watchdog() {
        echo "Network watchdog: Starting"
        while [ 1 ]
        do
                ip_address=$(ifconfig eth0 | grep 'inet addr:') || :
                if [ -z "$ip_address" ]
                then
                        echo "Network watchdog: No network found!"
	                sleep 5
                        dhclient eth0 || :
                else
                        echo "Network watchdog.. Network found: $ip_address"
			sleep 10
                fi
        done
	echo "Network watchdog: Exit!"
}

BASEDIR=$(dirname $0)

network_watchdog &
NOW=$(date +"%m-%d-%Y %H:%M:%s")
log_file="/var/log/life_age.log"

echo Restarting! >> $log_file
echo $NOW >>  $log_file
echo Mounting partitions! >> $log_file

#check_upgrade_autorun &

if [ -e /data ]
then
        echo "/data folder found!"
else
        mkdir /data
fi

if [ -e /dev/mmcblk0p3 ]
then
        mount /dev/mmcblk0p3 /data
elif [ -e /dev/mmcblk1p3 ]
then
        mount /dev/mmcblk1p3 /data
else
        echo "Unknown condition"
fi

if [ -e /perm ]
then
        echo "/perm folder found!"
else
        mkdir /perm
fi

if [ -e /dev/mmcblk0p4 ]
then
        mount /dev/mmcblk0p4 /perm
elif [ -e /dev/mmcblk1p4 ]
then
        mount /dev/mmcblk1p4 /perm
fi

check_corruption >> $log_file || true

check_upgrade_autorun &

echo "Autorun script done!" >> $log_file

exit 0
