/*
  filename: angular.integralui.treegrid.min.js
  version : 3.1.547
  Copyright ï¿½ 2014-2016 Lidor Systems. All rights reserved.

  This file is part of the "IntegralUI" Library.

  The contents of this file are subject to the IntegralUI Studio for Web License, and may not be used except in compliance with the License.
  A copy of the License should have been installed in the product's root installation directory or it can be found at
  http://www.lidorsystems.com/products/web/studio/license-agreement.aspx.

  This SOFTWARE is provided "AS IS", WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific language
  governing rights and limitations under the License. Any infringement will be prosecuted under applicable laws.
*/
angular.module("integralui").factory("IntegralUITreeGridService", ["$rootScope", function(c) {
    var e = null;
    return {
        addColumn: function(f, g) {
            c.$broadcast(f + "-add-column", g)
        },
        clearColumns: function(f) {
            c.$broadcast(f + "-clear-columns")
        },
        insertColumnAt: function(f, g, u) {
            c.$broadcast(f + "-insert-column-at", g, u)
        },
        insertColumnBefore: function(f, g, u) {
            c.$broadcast(f + "-insert-column-before", g, u)
        },
        insertColumnAfter: function(f, g, u) {
            c.$broadcast(f + "-insert-column-after", g, u)
        },
        removeColumn: function(f, g) {
            c.$broadcast(f + "-remove-column",
                g)
        },
        removeColumnAt: function(f, g) {
            c.$broadcast(f + "-remove-column-at", g)
        },
        addRow: function(f, g, u) {
            c.$broadcast(f + "-add-row", g, u)
        },
        clearRows: function(f, g) {
            c.$broadcast(f + "-clear-rows", g)
        },
        insertRowAt: function(f, g, u, l) {
            c.$broadcast(f + "-insert-row-at", g, u, l)
        },
        insertRowBefore: function(f, g, u) {
            c.$broadcast(f + "-insert-row-before", g, u)
        },
        insertRowAfter: function(f, g, u) {
            c.$broadcast(f + "-insert-row-after", g, u)
        },
        removeRow: function(f, g) {
            c.$broadcast(f + "-remove-row", g)
        },
        removeRowAt: function(f, g, u) {
            c.$broadcast(f + "-remove-row-at",
                g, u)
        },
        exportToJSON: function(f, g, u, l, e) {
            c.$broadcast(f + "-export-json", g, u, l, e);
            f = this.getTempData();
            this.clearTempData();
            return f ? f : ""
        },
        loadData: function(f, g, u, l, e) {
            c.$broadcast(f + "-load-data", g, u, l, e)
        },
        openEditor: function(f, g) {
            c.$broadcast(f + "-open-editor", g)
        },
        closeEditor: function(f, g) {
            c.$broadcast(f + "-close-editor", g)
        },
        collapse: function(f, g) {
            c.$broadcast(f + "-collapse", g)
        },
        expand: function(f, g) {
            c.$broadcast(f + "-expand", g)
        },
        expandColIndex: function(f, g) {
            c.$broadcast(f + "-expand-col-index", g)
        },
        toggle: function(f,
            g) {
            c.$broadcast(f + "-toggle", g)
        },
        filter: function(f, g, e) {
            c.$broadcast(f + "-filter", g, e)
        },
        findRowById: function(f, g) {
            c.$broadcast(f + "-find-row-by-id", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : null
        },
        findRowByPath: function(f, g, e) {
            c.$broadcast(f + "-find-row-by-path", g, e);
            f = this.getTempData();
            this.clearTempData();
            return f ? f : null
        },
        findRowByText: function(f, g) {
            c.$broadcast(f + "-find-row-by-text", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : null
        },
        getCellAt: function(f, g) {
            c.$broadcast(f +
                "-get-cell-at", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : null
        },
        getRowAt: function(f, g) {
            c.$broadcast(f + "-get-row-at", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : null
        },
        getRowParent: function(f, g) {
            c.$broadcast(f + "-get-row-parent", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : null
        },
        focus: function(f, g) {
            c.$broadcast(f + "-focus", g)
        },
        clearTempData: function() {
            e = null
        },
        ensureVisible: function(f, g) {
            c.$broadcast(f + "-ensure-visible", g)
        },
        getTempData: function() {
            return e
        },
        getRowLevel: function(f, g) {
            c.$broadcast(f + "-get-row-level", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : 0
        },
        getFlatList: function(f, g) {
            c.$broadcast(f + "-get-flat-list", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : []
        },
        getFullPath: function(f, g) {
            c.$broadcast(f + "-get-full-path", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : ""
        },
        getHoverColumn: function(f, g) {
            c.$broadcast(f + "-get-hover-column", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : null
        },
        getList: function(f,
            g) {
            c.$broadcast(f + "-get-list", g);
            var e = this.getTempData();
            this.clearTempData();
            return e ? e : []
        },
        setTempData: function(c) {
            e = c
        },
        topRow: function(f, g) {
            if (g) c.$broadcast(f + "-set-top-row", g);
            else return c.$broadcast(f + "-get-top-row"), g = this.getTempData(), this.clearTempData(), g ? g : null
        },
        beginLoad: function(f, g, e) {
            c.$broadcast(f + "-begin-load", g, e)
        },
        endLoad: function(f, g) {
            c.$broadcast(f + "-end-load", g)
        },
        moveColumn: function(f, g, e) {
            c.$broadcast(f + "-move-column", g, e)
        },
        moveRow: function(f, g, e, l, ia) {
            c.$broadcast(f + "-move-row",
                g, e, l, ia)
        },
        getScrollPos: function(f) {
            c.$broadcast(f + "-get-scroll-pos");
            f = this.getTempData();
            this.clearTempData();
            return f ? f : {
                x: 0,
                y: 0
            }
        },
        getMaxScrollPos: function(f) {
            c.$broadcast(f + "-get-max-scroll-pos");
            f = this.getTempData();
            this.clearTempData();
            return f ? f : {
                x: 0,
                y: 0
            }
        },
        setScrollPos: function(f, g) {
            c.$broadcast(f + "-set-scroll-pos", g)
        },
        scrollTo: function(f, g, e) {
            c.$broadcast(f + "-scroll-to", g, e)
        },
        currentPage: function(f, g) {
            if (void 0 != g && null != g) c.$broadcast(f + "-set-current-page", g);
            else {
                c.$broadcast(f + "-get-current-page");
                var e = this.getTempData();
                this.clearTempData();
                return void 0 != e ? e : -1
            }
        },
        firstPage: function(f) {
            c.$broadcast(f + "-first-page")
        },
        lastPage: function(f) {
            c.$broadcast(f + "-last-page")
        },
        nextPage: function(f) {
            c.$broadcast(f + "-next-page")
        },
        prevPage: function(f) {
            c.$broadcast(f + "-prev-page")
        },
        clearSelection: function(f) {
            c.$broadcast(f + "-clear-selection")
        },
        selectedColumn: function(f, g) {
            if (g) c.$broadcast(f + "-set-selected-column", g);
            else {
                c.$broadcast(f + "-get-selected-column");
                var e = this.getTempData();
                this.clearTempData();
                return e ? e : null
            }
        },
        selectedRow: function(f, e) {
            if (e) c.$broadcast(f + "-set-selected-row", e);
            else {
                c.$broadcast(f + "-get-selected-row");
                var u = this.getTempData();
                this.clearTempData();
                return u ? u : null
            }
        },
        selectedRows: function(f, e) {
            if (e) c.$broadcast(f + "-set-selected-rows", e);
            else {
                c.$broadcast(f + "-get-selected-rows");
                var u = this.getTempData();
                this.clearTempData();
                return u ? u : null
            }
        },
        sort: function(f, e, u, l) {
            c.$broadcast(f + "-sort", e, u, l)
        },
        refresh: function(f, e, u) {
            c.$broadcast(f + "-refresh", e, u)
        },
        resumeLayout: function(f,
            e) {
            c.$broadcast(f + "-resume-layout", e)
        },
        suspendLayout: function(f, e) {
            c.$broadcast(f + "-suspend-layout", e)
        },
        updateLayout: function(e, g) {
            c.$broadcast(e + "-update-layout", g)
        },
        updateView: function(e) {
            c.$broadcast(e + "-update-view")
        }
    }
}]).controller("IntegralUITreeGridController", ["$scope", "$element", "$timeout", "$window", "$interval", "IntegralUIInternalService", "IntegralUIDataService", "IntegralUITreeGridService", "IntegralUIDragDrop", "IntegralUIFilter", function(c, e, f, g, u, l, ia, k, p, cc) {
    var a = this;
    this.suppressProcess = !1;
    this.hoverCell = this.hoverRow = this.hoverColumn = null;
    a.defaultCheckBoxStyle = {
        general: "iui-checkbox",
        box: {
            general: "iui-checkbox-box",
            disabled: "iui-checkbox-box-disabled",
            checked: "iui-checkbox-checked",
            indeterminate: "iui-checkbox-indeterminate",
            unchecked: "iui-checkbox-unchecked"
        }
    };
    a.defaultStyle = {
        general: "iui-treegrid",
        column: {
            general: {
                content: "iui-treegrid-column-cell-content",
                disabled: "iui-treegrid-column-disabled",
                normal: "iui-treegrid-column",
                hovered: "iui-treegrid-column-hovered",
                selected: "iui-treegrid-column-selected"
            },
            header: {
                content: "iui-treegrid-column-header-cell-content",
                disabled: "iui-treegrid-column-header-disabled",
                normal: "iui-treegrid-column-header",
                hovered: "iui-treegrid-column-header-hovered",
                selected: "iui-treegrid-column-header-selected"
            },
            body: {
                content: "iui-treegrid-column-body-cell-content",
                disabled: "iui-treegrid-column-body-disabled",
                normal: "iui-treegrid-column-body",
                hovered: "iui-treegrid-column-body-hovered",
                selected: "iui-treegrid-column-body-selected"
            },
            footer: {
                content: "iui-treegrid-column-footer-cell-content",
                disabled: "iui-treegrid-column-footer-disabled",
                normal: "iui-treegrid-column-footer",
                hovered: "iui-treegrid-column-footer-hovered",
                selected: "iui-treegrid-column-footer-selected"
            }
        },
        row: {
            general: {
                disabled: "iui-treegrid-row-disabled",
                focused: "iui-treegrid-row-focused",
                normal: "iui-treegrid-row",
                hovered: "iui-treegrid-row-hovered",
                selected: "iui-treegrid-row-selected"
            },
            checkBox: {
                general: "iui-checkbox",
                box: {
                    general: "iui-checkbox-box",
                    disabled: "iui-checkbox-box-disabled",
                    checked: "iui-checkbox-checked",
                    indeterminate: "iui-checkbox-indeterminate",
                    unchecked: "iui-checkbox-unchecked"
                }
            },
            expandBox: {
                general: "iui-treegrid-expand-box",
                animated: "iui-treegrid-expand-box-load",
                expanded: "iui-treegrid-expand-box-open",
                collapsed: "iui-treegrid-expand-box-close"
            },
            cell: {
                content: "iui-treegrid-row-cell-content",
                general: "iui-treegrid-row-cell",
                disabled: "iui-treegrid-row-cell-disabled",
                focused: "iui-treegrid-row-cell-focused",
                normal: "iui-treegrid-row-cell",
                hovered: "iui-treegrid-row-cell-hovered",
                selected: "iui-treegrid-row-cell-selected"
            }
        },
        cell: {
            content: "iui-treegrid-row-cell-content",
            general: "iui-treegrid-row-cell",
            disabled: "iui-treegrid-row-cell-disabled",
            focused: "iui-treegrid-row-cell-focused",
            normal: "iui-treegrid-row-cell",
            hovered: "iui-treegrid-row-cell-hovered",
            selected: "iui-treegrid-row-cell-selected"
        }
    };
    this.updatePaging = function(b) {
        a.options.paging = b ? {
            enabled: l.isFieldAvailable(b.enabled, !1),
            showControlPanel: l.isFieldAvailable(b.showControlPanel, !0),
            pageSize: l.isFieldAvailable(b.pageSize, 100)
        } : {
            enabled: !1,
            showControlPanel: !0,
            pageSize: 100
        }
    };
    this.updateOptions = function(b) {
        b ?
            (a.options = {
                allowAnimation: l.isFieldAvailable(b.allowAnimation, !0),
                allowCellFocus: l.isFieldAvailable(b.allowCellFocus, !0),
                allowColumnReorder: l.isFieldAvailable(b.allowColumnReorder, !1),
                allowDrag: l.isFieldAvailable(b.allowDrag, !1),
                allowDrop: l.isFieldAvailable(b.allowDrop, !0),
                allowFilter: l.isFieldAvailable(b.allowFilter, !1),
                allowFocus: l.isFieldAvailable(b.allowFocus, !0),
                animationSpeed: 200,
                autoExpand: l.isFieldAvailable(b.autoExpand, !0),
                controlStyle: a.defaultStyle,
                displayMode: l.isFieldAvailable(b.displayMode,
                    "normal"),
                editorSettings: {
                    activate: "click"
                },
                enabled: l.isFieldAvailable(b.enabled, !0),
                expandColIndex: l.isFieldAvailable(b.expandColIndex, void 0 != a.options.expandColIndex ? a.options.expandColIndex : 0),
                fillSpace: l.isFieldAvailable(b.fillSpace, !1),
                gridLines: l.isFieldAvailable(b.gridLines, "both"),
                hoverSelection: l.isFieldAvailable(b.hoverSelection, !1),
                indent: l.isFieldAvailable(b.indent, 15),
                labelEdit: l.isFieldAvailable(b.labelEdit, !1),
                loadRows: [],
                pathSeparator: l.isFieldAvailable(b.pathSeparator, "\\"),
                rowHeight: l.isFieldAvailable(b.rowHeight, -1),
                rtl: l.isFieldAvailable(b.rtl, !1),
                selectedColumn: l.isFieldAvailable(b.selectedColumn, a.options.selectedColumn ? a.options.selectedColumn : null),
                selectedIndex: -1,
                selectedRow: l.isFieldAvailable(b.selectedRow, a.options.selectedRow ? a.options.selectedRow : null),
                selectedRows: a.options.selectedRows ? a.options.selectedRows : [],
                selectionMode: l.isFieldAvailable(b.selectionMode, "one"),
                showExpandBoxes: l.isFieldAvailable(b.showExpandBoxes, !0),
                showFooter: l.isFieldAvailable(b.showFooter, !0),
                showHeader: l.isFieldAvailable(b.showHeader, !0),
                showIcons: l.isFieldAvailable(b.showIcons, !0),
                sorting: l.isFieldAvailable(b.sorting, "none")
            }, a.updatePaging(b.paging), a.updateDataFields(b.dataFields), a.updateControlStyle(b.controlStyle)) : (a.options = {
                allowAnimation: !0,
                allowCellFocus: !0,
                allowColumnReorder: !1,
                allowDrag: !1,
                allowDrop: !0,
                allowFilter: !1,
                allowFocus: !0,
                animationSpeed: 200,
                autoExpand: !0,
                controlStyle: a.defaultStyle,
                displayMode: "normal",
                editorSettings: {
                    activate: "click"
                },
                enabled: !0,
                expandColIndex: 0,
                fillSpace: !1,
                gridLines: "both",
                hoverSelection: !1,
                indent: 15,
                labelEdit: !1,
                loadRows: [],
                pathSeparator: "\\",
                rowHeight: -1,
                rtl: !1,
                selectedColumn: null,
                selectedIndex: -1,
                selectedRow: null,
                selectedRows: [],
                selectionMode: "one",
                showExpandBoxes: !0,
                showFooter: !0,
                showHeader: !0,
                showIcons: !0,
                sorting: "none"
            }, a.updatePaging(), a.updateDataFields())
    };
    a.options = {};
    this.updateColumnFields = function(b) {
        a.options.columnFields = b ? {
            allowDrag: b.allowDrag ? b.allowDrag : "allowDrag",
            allowDrop: b.allowDrop ? b.allowDrop : "allowDrop",
            allowFilter: b.allowFilter ? b.allowFilter : "allowFilter",
            cellTemplateUrl: b.cellTemplateUrl ? b.cellTemplateUrl : "cellTemplateUrl",
            comparer: b.comparer ? b.comparer : "comparer",
            contentAlignment: b.contentAlignment ? b.contentAlignment : "contentAlignment",
            contextMenu: b.contextMenu ? b.contextMenu : "contextMenu",
            editorType: b.editorType ? b.editorType : "editorType",
            editorSettings: b.editorSettings ? b.editorSettings : "editorSettings",
            editorTemplate: b.editorTemplate ? b.editorTemplate : "editorTemplate",
            filterParams: b.filterParams ? b.filterParams : "filterParams",
            filterTemplate: b.filterTemplate ?
                b.filterTemplate : "filterTemplate",
            fixed: b.fixed ? b.fixed : "fixed",
            fixedWidth: b.fixedWidth ? b.fixedWidth : "fixedWidth",
            footerAlignment: b.footerAlignment ? b.footerAlignment : "footerAlignment",
            footerContent: b.footerContent ? b.footerContent : "footerContent",
            footerTemplate: b.footerTemplate ? b.footerTemplate : "footerTemplate",
            footerTemplateModel: b.footerTemplateModel ? b.footerTemplateModel : "footerTemplateModel",
            footerText: b.footerText ? b.footerText : "footerText",
            footerTooltip: b.footerTooltip ? b.footerTooltip : "footerTooltip",
            headerAlignment: b.headerAlignment ? b.headerAlignment : "headerAlignment",
            headerContent: b.headerContent ? b.headerContent : "headerContent",
            headerTemplate: b.headerTemplate ? b.headerTemplate : "headerTemplate",
            headerTemplateModel: b.headerTemplateModel ? b.headerTemplateModel : "headerTemplateModel",
            headerTemplateModel: b.headerTemplateModel ? b.headerTemplateModel : "headerTemplateModel",
            headerText: b.headerText ? b.headerText : "headerText",
            headerTooltip: b.headerTooltip ? b.headerTooltip : "headerTooltip",
            icon: b.icon ? b.icon : "icon",
            id: b.id ? b.id : "id",
            minWidth: b.minWidth ? b.minWidth : "minWidth",
            maxWidth: b.maxWidth ? b.maxWidth : "maxWidth",
            selected: b.selected ? b.selected : "selected",
            style: b.style ? b.style : "style",
            templateSettings: b.templateSettings ? b.templateSettings : "templateSettings",
            visible: b.visible ? b.visible : "visible",
            width: b.width ? b.width : "width"
        } : {
            allowDrag: "allowDrag",
            allowDrop: "allowDrop",
            allowFilter: "allowFilter",
            cellTemplateUrl: "cellTemplateUrl",
            comparer: "comparer",
            contentAlignment: "contentAlignment",
            contextMenu: "contextMenu",
            editorType: "editorType",
            editorSettings: "editorSettings",
            editorTemplate: "editorTemplate",
            filterParams: "filterParams",
            filterTemplate: "filterTemplate",
            fixed: "fixed",
            fixedWidth: "fixedWidth",
            footerAlignment: "footerAlignment",
            footerContent: "footerContent",
            footerTemplate: "footerTemplate",
            footerTemplateModel: "footerTemplateModel",
            footerTemplateObj: "footerTemplateObj",
            footerText: "footerText",
            footerTooltip: "footerTooltip",
            headerAlignment: "headerAlignment",
            headerContent: "headerContent",
            headerTemplate: "headerTemplate",
            headerTemplateModel: "headerTemplateModel",
            headerTemplateObj: "headerTemplateObj",
            headerText: "headerText",
            headerTooltip: "headerTooltip",
            icon: "icon",
            id: "id",
            minWidth: "minWidth",
            maxWidth: "maxWidth",
            selected: "selected",
            style: "style",
            templateSettings: "templateSettings",
            visible: "visible",
            width: "width"
        };
        a.columnsObj && a.columnsObj.updateDataFields(a.options.columnFields)
    };
    this.updateRowFields = function(b) {
        a.options.rowFields = b ? {
            allowDrag: b.allowDrag ? b.allowDrag : "allowDrag",
            allowDrop: b.allowDrop ? b.allowDrop : "allowDrop",
            allowFocus: b.allowFocus ? b.allowFocus : "allowFocus",
            cells: b.cells ? b.cells : "cells",
            content: b.content ? b.content : "content",
            contextMenu: b.contextMenu ? b.contextMenu : "contextMenu",
            enabled: b.enabled ? b.enabled : "enabled",
            expanded: b.expanded ? b.expanded : "expanded",
            hasChildren: b.hasChildren ? b.hasChildren : "hasChildren",
            icon: b.icon ? b.icon : "icon",
            id: b.id ? b.id : "id",
            objects: b.rows ? b.rows : "rows",
            pid: b.pid ? b.pid : "pid",
            rows: b.rows ? b.rows : "rows",
            selected: b.selected ? b.selected : "selected",
            statusIcon: b.statusIcon ?
                b.statusIcon : "statusIcon",
            style: b.style ? b.style : "style",
            subobjects: b.cells ? b.cells : "cells",
            text: b.text ? b.text : "text",
            tooltip: b.tooltip ? b.tooltip : "tooltip"
        } : {
            allowDrag: "allowDrag",
            allowDrop: "allowDrop",
            allowFocus: "allowFocus",
            cells: "cells",
            content: "content",
            contextMenu: "contextMenu",
            enabled: "enabled",
            expanded: "expanded",
            hasChildren: "hasChildren",
            icon: "icon",
            id: "id",
            objects: "rows",
            pid: "pid",
            rows: "rows",
            selected: "selected",
            style: "style",
            subobjects: "cells",
            text: "text",
            tooltip: "tooltip"
        };
        a.rowsObj && a.rowsObj.updateDataFields(a.options.rowFields)
    };
    this.updateCellFields = function(b) {
        a.options.cellFields = b ? {
            allowEdit: b.allowEdit ? b.allowEdit : "allowEdit",
            cid: b.cid ? b.cid : "cid",
            content: b.content ? b.content : "content",
            contextMenu: b.contextMenu ? b.contextMenu : "contextMenu",
            enabled: b.enabled ? b.enabled : "enabled",
            labelEdit: b.labelEdit ? b.labelEdit : "labelEdit",
            rid: b.rid ? b.rid : "rid",
            selected: b.selected ? b.selected : "selected",
            style: b.style ? b.style : "style",
            templateObj: b.templateObj ? b.templateObj : "templateObj",
            text: b.text ? b.text : "text",
            tooltip: b.tooltip ? b.tooltip : "tooltip",
            value: b.value ? b.value : "value"
        } : {
            allowEdit: "allowEdit",
            cid: "cid",
            content: "content",
            contextMenu: "contextMenu",
            enabled: "enabled",
            labelEdit: "labelEdit",
            rid: "rid",
            selected: "selected",
            style: "style",
            templateObj: "templateObj",
            text: "text",
            tooltip: "tooltip",
            value: "value"
        }
    };
    this.updateDataFields = function(b) {
        b ? (a.updateColumnFields(b.column), a.updateRowFields(b.row), a.updateCellFields(b.cell)) : (a.updateColumnFields(), a.updateRowFields(), a.updateCellFields())
    };
    a.updateOptions();
    c.$on(c.name + "-add-column",
        function(b, d) {
            a.columnsObj.insertAt(d, -1, null, a.columnIsAdded)
        });
    c.$on(c.name + "-clear-columns", function(b) {
        a.columnsObj.clear(null, a.columnsAreCleared)
    });
    c.$on(c.name + "-insert-column-at", function(b, d, c) {
        a.columnsObj.insertAt(d, c, null, a.columnIsAdded)
    });
    c.$on(c.name + "-insert-column-after", function(b, d, c) {
        a.columnsObj.insertByRef(d, c, !0, a.columnIsAdded)
    });
    c.$on(c.name + "-insert-column-before", function(b, d, c) {
        a.columnsObj.insertByRef(d, c, !1, a.columnIsAdded)
    });
    c.$on(c.name + "-remove-column", function(b,
        d) {
        a.columnsObj.removeAt(d, -1, null, a.columnIsRemoved)
    });
    c.$on(c.name + "-remove-column-at", function(b, d) {
        a.columnsObj.removeAt(null, d, null, a.columnIsRemoved)
    });
    this.columnsAreCleared = function(b) {
        a.options.selectedColumn && (a.options.selectedColumn[a.options.columnFields.selected] = !1);
        a.options.selectedColumn = null;
        a.updateLayout()
    };
    a.columnIsAdded = function() {
        a.updateLayout()
    };
    a.columnIsRemoved = function(b, d) {
        a.updateLayout()
    };
    c.$on(c.name + "-add-row", function(b, d, c) {
        a.rowsObj.insertAt(d, -1, c, a.rowIsAdded)
    });
    c.$on(c.name + "-clear-rows", function(b, d) {
        a.rowsObj.clear(d, a.rowsAreCleared)
    });
    c.$on(c.name + "-insert-row-at", function(b, d, c, h) {
        a.rowsObj.insertAt(d, c, h, a.rowIsAdded)
    });
    c.$on(c.name + "-insert-row-after", function(b, d, c) {
        a.rowsObj.insertByRef(d, c, !0, a.rowIsAdded)
    });
    c.$on(c.name + "-insert-row-before", function(b, d, c) {
        a.rowsObj.insertByRef(d, c, !1, a.rowIsAdded)
    });
    c.$on(c.name + "-remove-row", function(b, d) {
        a.rowsObj.removeAt(d, -1, null, a.rowIsRemoved)
    });
    c.$on(c.name + "-remove-row-at", function(b, d, c) {
        a.rowsObj.removeAt(null,
            d, c, a.rowIsRemoved)
    });
    this.rowsAreCleared = function(b) {
        b || (a.clearPrevSelection(), a.options.selectedRow = null, a.setScrollPos({
            x: 0,
            y: 0
        }));
        a.updateCurrentLayout()
    };
    this.rowIsAdded = function() {
        a.updateCurrentLayout()
    };
    this.rowIsRemoved = function(b, d, c) {
        a.updateCurrentLayout()
    };
    this.objIsRemoved = function(b, d, c) {
        a.updateCurrentLayout()
    };
    a.columnList = [];
    a.columnFilterList = [];
    a.isThereLeftFixedColumns = !1;
    a.isThereRightFixedColumns = !1;
    this.updateColumnList = function() {
        a.columnList.length = 0;
        a.columnFilterList.length =
            0;
        a.isThereLeftFixedColumns = !1;
        a.isThereRightFixedColumns = !1;
        var b = a.columnsObj.getList();
        if (b)
            for (var d = 0; d < b.length; d++) {
                var c = b[d];
                c.type = "column";
                c[a.options.columnFields.id] || (c[a.options.columnFields.id] = l.getUniqueId());
                if (0 != c[a.options.columnFields.visible]) {
                    var h = c[a.options.columnFields.filterParams],
                        h = h ? cc.createTree(h.conditions, h.formula) : null;
                    a.columnFilterList.push({
                        cid: c[a.options.columnFields.id],
                        tree: h
                    });
                    a.columnList.push(c);
                    switch (c[a.options.columnFields.fixed]) {
                        case "left":
                            a.isThereLeftFixedColumns ||
                                (a.isThereLeftFixedColumns = !0);
                            break;
                        case "right":
                            a.isThereRightFixedColumns || (a.isThereRightFixedColumns = !0)
                    }
                }
            }
    };
    var Fc = function(b) {
            for (var d = null, c = 0; c < a.columnFilterList.length; c++)
                if (a.columnFilterList[c].cid == b) {
                    d = a.columnFilterList[c].tree;
                    break
                }
            return d
        },
        X = function(b, d) {
            if (0 == a.options.allowFilter) return !0;
            var c = !0;
            if (b)
                for (var h, t, e, f = 0; f < b[a.options.rowFields.cells].length; f++) {
                    c = !0;
                    e = b[a.options.rowFields.cells][f];
                    h = e[a.options.cellFields.cid];
                    t = a.getColumnById(h);
                    !t && f < a.columnList.length &&
                        (t = a.columnList[f]);
                    if (t && t[a.options.columnFields.filterParams]) {
                        t = t[a.options.columnFields.filterParams];
                        var l = e[a.options.cellFields.value] ? e[a.options.cellFields.value] : e[a.options.cellFields.text];
                        t && (c = t.callback ? t.callback(l, e, b) : cc.match(l, t.conditions, t.formula, Fc(h)))
                    }
                    if (!c) break
                }
            return c
        },
        W = a.options.indent;
    a.currentPageList = [];
    a.pageList = [];
    a.onlyCurrentPage = !1;
    a.currentList = [];
    a.fullIndentList = [];
    a.fullList = [];
    a.indentList = [];
    a.longestRow = null;
    a.isThereChildRows = !1;
    a.pageRowCount = 0;
    a.pageNumber =
        0;
    a.currentPageNumber = 1;
    this.isThereVisibleChildren = function(b) {
        var d = !1;
        if (b && (b = b[a.options.rowFields.rows]) && 0 < b.length)
            for (var c = 0; c < b.length; c++)
                if (X(b[c])) {
                    d = !0;
                    break
                }
        return d
    };
    var I = function(b, d, c, h) {
            b.type = "row";
            b[a.options.rowFields.id] || (b[a.options.rowFields.id] = l.getUniqueId());
            c && (b[a.options.rowFields.pid] = c);
            c = !0;
            var t = b[a.options.rowFields.cells];
            if (t && 0 < t.length) {
                c = X(b, h);
                for (var e, f, g, k = 0; k < a.columnList.length; k++) {
                    g = a.columnList[k];
                    e = g[a.options.columnFields.id];
                    f = g[a.options.columnFields.editorType];
                    g = g[a.options.columnFields.editorSettings];
                    var p = k;
                    e && (p = a.getCellIndexById(t, k, e));
                    0 <= p && p < t.length && (t[p].type = "cell", t[p][a.options.cellFields.rid] = b[a.options.rowFields.id], a.setDefaultCellValue(t[p], f, g))
                }
            }
            c && (h ? (a.fullList.push(b), a.fullIndentList.push(d)) : a.options.paging.enabled ? a.onlyCurrentPage ? a.currentPageList.push({
                row: b,
                indent: d
            }) : (b[a.options.rowFields.pid] || a.pageRowCount++, a.pageRowCount > a.options.paging.pageSize && (a.pageRowCount = 1, a.pageNumber++, a.pageList.push([])), a.pageList[a.pageNumber].push({
                row: b,
                indent: d
            })) : (a.currentList.push(b), a.indentList.push(d)));
            return c
        },
        A = function(b, d, c, h) {
            if (!b[a.options.rowFields.rows]) return c = I(b, d, c, h);
            if (c = I(b, d, c, h)) {
                var t = 0,
                    e;
                if (h || a.isRowExpanded(b)) {
                    var f = b[a.options.rowFields.rows];
                    if (f) {
                        a.applySorting(f);
                        for (var g = 0; g < f.length; g++)(e = A(f[g], d + W, b[a.options.rowFields.id], h)) && t++
                    }
                }
                h || a.isThereChildRows || !(0 < t || !a.isRowExpanded(b) && b[a.options.rowFields.rows] && 0 < b[a.options.rowFields.rows].length && a.isThereVisibleChildren(b)) || (a.isThereChildRows = !0)
            }
            return c
        };
    this.getFullList = function() {
        a.fullList.length = 0;
        a.fullIndentList.length = 0;
        for (var b = a.rowsObj.getList(), d = 0; d < b.length; d++) A(b[d], 0, null, !0);
        return a.fullList
    };
    this.getCurrentList = function() {
        return a.currentList
    };
    this.updateCurrentList = function() {
        a.currentList.length = 0;
        a.indentList.length = 0;
        W = a.options.indent;
        if (a.options.paging.enabled) {
            if (1 <= a.currentPageNumber && a.currentPageNumber <= a.pageList.length)
                for (var b = 0; b < a.pageList[a.currentPageNumber - 1].length; b++) a.currentList.push(a.pageList[a.currentPageNumber -
                    1][b].row), a.indentList.push(a.pageList[a.currentPageNumber - 1][b].indent)
        } else {
            a.isThereChildRows = !1;
            var d = a.rowsObj.getList();
            if (d)
                for (a.applySorting(d), b = 0; b < d.length; b++) A(d[b], 0, null, !1)
        }
    };
    this.updateCurrentPageList = function() {
        a.currentPageList.length = 0;
        a.isThereChildRows = !1;
        a.onlyCurrentPage = !0;
        W = a.options.indent;
        if (1 < a.currentPageNumber) {
            var b = a.pageList[a.currentPageNumber - 1];
            if (b && 0 < b.length) {
                a.applySorting(b);
                for (var d = 0; d < b.length; d++) A(b[d], 0, null, !1)
            }
            a.pageList[a.currentPageNumber - 1] =
                a.currentPageList
        }
        a.onlyCurrentPage = !1
    };
    this.updatePageList = function() {
        a.pageList.length = 0;
        a.pageRowCount = 0;
        a.pageNumber = 0;
        a.isThereChildRows = !1;
        W = a.options.indent;
        var b = a.rowsObj.getList();
        if (b && 0 < b.length) {
            a.applySorting(b);
            a.pageList.push([]);
            for (var d = 0; d < b.length; d++) A(b[d], 0, null, !1);
            0 < a.pageList.length && 0 == a.pageList[a.pageList.length - 1].length && a.pageList.splice(a.pageList.length - 1, 1)
        }
    };
    this.columnEvents = {
        clear: function(a) {
            return angular.isDefined(c.events) && c.events.clearColumns ? c.events.clearColumns({
                    parent: a.e.parent
                }) :
                c.clearColumns(a)
        },
        objAdded: function(a) {
            return angular.isDefined(c.events) && c.events.columnAdded ? c.events.columnAdded({
                column: a.e.column
            }) : c.columnAdded(a)
        },
        objAdding: function(a) {
            return angular.isDefined(c.events) && c.events.rowAdding ? c.events.columnAdding({
                column: a.e.column
            }) : c.columnAdding(a)
        },
        objRemoved: function(a) {
            return angular.isDefined(c.events) && c.events.rowRemoved ? c.events.columnRemoved({
                column: a.e.column
            }) : c.columnRemoved(a)
        },
        objRemoving: function(a) {
            return angular.isDefined(c.events) && c.events.rowRemoving ?
                c.events.columnRemoving({
                    column: a.e.column
                }) : c.columnRemoving(a)
        }
    };
    this.rowEvents = {
        clear: function(a) {
            return angular.isDefined(c.events) && c.events.clearRows ? c.events.clearRows({
                parent: a.e.parent
            }) : c.clearRows(a)
        },
        objAdded: function(a) {
            return angular.isDefined(c.events) && c.events.rowAdded ? c.events.rowAdded({
                row: a.e.row
            }) : c.rowAdded(a)
        },
        objAdding: function(a) {
            return angular.isDefined(c.events) && c.events.rowAdding ? c.events.rowAdding({
                row: a.e.row
            }) : c.rowAdding(a)
        },
        objRemoved: function(a) {
            return angular.isDefined(c.events) &&
                c.events.rowRemoved ? c.events.rowRemoved({
                    row: a.e.row
                }) : c.rowRemoved(a)
        },
        objRemoving: function(a) {
            return angular.isDefined(c.events) && c.events.rowRemoving ? c.events.rowRemoving({
                row: a.e.row
            }) : c.rowRemoving(a)
        }
    };
    this.getRowFields = function(a) {
        return {
            content: a.content ? a.content : "content",
            icon: a.icon ? a.icon : "icon",
            id: a.id ? a.id : "id",
            pid: a.pid ? a.pid : "pid",
            objects: a.rows ? a.rows : "rows",
            subobjects: a.cells ? a.cells : "cells",
            text: a.text ? a.text : "text"
        }
    };
    a.columnsObj = new ia({
        objects: c.columns,
        events: a.columnEvents,
        fields: a.options.columnFields
    });
    a.rowsObj = new ia({
        objects: c.rows,
        events: a.rowEvents,
        fields: a.getRowFields(a.options.rowFields)
    });
    c.$on(c.name + "-load-data", function(b, d, c, h, t) {
        a.loadData(d, c, h, t)
    });
    c.$on(c.name + "-export-json", function(b, d, c, h, t) {
        k.setTempData(a.exportToJSON(d, c, h, t))
    });
    this.exportToJSON = function(b, d, c, h) {
        var t = h,
            t = t ? t : null,
            e = a.columnsObj.getList();
        b = JSON.stringify(e, b ? b : [a.options.columnFields.allowDrag, a.options.columnFields.allowDrop, a.options.columnFields.allowFilter, a.options.columnFields.cellTemplateUrl,
            a.options.columnFields.contentAlignment, a.options.columnFields.contextMenu, a.options.columnFields.editorType, a.options.columnFields.editorSettings, a.options.columnFields.editorTemplate, a.options.columnFields.filterParams, a.options.columnFields.filterTemplate, a.options.columnFields.fixed, a.options.columnFields.fixedWidth, a.options.columnFields.footerAlignment, a.options.columnFields.footerContent, a.options.columnFields.footerTemplate, a.options.columnFields.footerTooltip, a.options.columnFields.footerText,
            a.options.columnFields.headerAlignment, a.options.columnFields.headerContent, a.options.columnFields.headerTemplate, a.options.columnFields.headerText, a.options.columnFields.headerTooltip, a.options.columnFields.icon, a.options.columnFields.id, a.options.columnFields.selected, a.options.columnFields.style, a.options.columnFields.templateSettings, a.options.columnFields.visible, a.options.columnFields.width
        ], t);
        h = h ? h : null;
        t = !1 !== c ? a.getFullList() : a.rowsObj.getList();
        d = d ? d : [a.options.rowFields.allowCellFocus,
            a.options.rowFields.allowDrag, a.options.rowFields.allowDrop, a.options.rowFields.allowFocus, a.options.rowFields.cells, a.options.rowFields.content, a.options.rowFields.contextMenu, a.options.rowFields.enabled, a.options.rowFields.expanded, a.options.rowFields.hasChildren, a.options.rowFields.icon, a.options.rowFields.id, a.options.rowFields.pid, a.options.rowFields.selected, a.options.rowFields.style, a.options.rowFields.text, a.options.rowFields.tooltip, a.options.cellFields.rid
        ];
        0 == c && d.push(a.options.rowFields.rows);
        c = JSON.stringify(t, d, h);
        return '[\n{ "columns": ' + b + ' },\n{ "rows": ' + c + " }\n]"
    };
    this.loadData = function(b, d, G, h) {
        a.suspendLayout();
        a.updateDataFields(G);
        var t = [],
            e = a.options.rowFields;
        a.rowsObj.clear(d, a.rowsAreCleared);
        if (b)
            if (!1 !== h) {
                var f = [];
                b.forEach(function(a, b) {
                    var d = a[e.pid];
                    f[d] ? (f[d][e.rows] || (f[d][e.rows] = []), f[a[e.id]] = a, f[d][e.rows].push(a)) : (f[a[e.id]] = a, t.push(a))
                });
                f.length = 0
            } else t = b;
        if (d)
            for (d[a.options.rowFields.rows] = t, b = 0; b < d[a.options.rowFields.rows].length; b++) d[a.options.rowFields.rows][b][a.options.rowFields.pid] =
                d[a.options.rowFields.id];
        else if (angular.isDefined(c.rows))
            for (b = c.rows.length = 0; b < t.length; b++) c.rows.push(t[b]);
        a.rowsObj = new ia({
            objects: c.rows,
            events: a.rowEvents,
            fields: a.getRowFields(a.options.rowFields)
        });
        a.resumeLayout()
    };
    this.updateData = function() {
        a.options.rowFields.dataSource && (a.loadData(a.options.rowFields.dataSource), a.rowsObj = new ia({
            objects: c.rows,
            events: a.rowEvents,
            fields: a.getRowFields(a.options.rowFields)
        }))
    };
    var ya = !1;
    this.dragDropStatus = function(a) {
        if (void 0 != a) ya = a;
        else return ya
    };
    this.getDnDSource = function(a) {
        return {
            text: a.dataTransfer ? a.dataTransfer.getData("text") : a.originalEvent.dataTransfer ? a.originalEvent.dataTransfer.getData("text") : ""
        }
    };
    this.getTouchData = function(a) {
        return a.changedTouches ? a.changedTouches : a.originalEvent ? a.originalEvent.changedTouches : null
    };
    var Ha = angular.element('<div class="iui-drop-marker" data-element="dropmark"></div>');
    this.getDropMarkLine = function() {
        return dropMarkLine
    };
    a.getMousePos = function(a) {
        return {
            x: a.pageX ? a.pageX : a.originalEvent ? a.originalEvent.pageX : 0,
            y: a.pageY ? a.pageY : a.originalEvent ? a.originalEvent.pageY : 0
        }
    };
    this.getCtrlName = function() {
        return angular.isDefined(c.name) ? c.name : ""
    };
    e.bind("dragenter", function(b) {
        b.preventDefault();
        if (a.options.enabled) {
            var d = p.getData();
            d.source || (d.source = a.getDnDSource(b));
            b = {
                event: b,
                sourceTree: d.sourceCtrl ? d.sourceCtrl.getCtrlName() : "",
                dragRow: d.source,
                targetTree: a.getCtrlName(),
                targetRow: d.target,
                mousePos: a.getMousePos(b)
            };
            a.callDragEnter(b)
        }
    });
    e.bind("dragover", function(b) {
        b.preventDefault();
        if (a.options.enabled &&
            a.isDropInRange(b)) {
            var d = !0;
            b.dataTransfer ? d = "none" === b.dataTransfer.effectAllowed ? !1 : !0 : b.originalEvent && b.originalEvent.dataTransfer && (d = "none" === b.originalEvent.dataTransfer.effectAllowed ? !1 : !0);
            if (d)
                if (b.dataTransfer ? b.dataTransfer.dropEffect = a.options.allowDrop ? "move" : "none" : b.originalEvent && b.originalEvent.dataTransfer && (b.originalEvent.dataTransfer.dropEffect = a.options.allowDrop ? "move" : "none"), d = p.getData(), d.source || (d.source = a.getDnDSource(b)), p.setData({
                        source: d.source,
                        sourceCtrl: d.sourceCtrl,
                        target: null,
                        dropPos: -1
                    }), d = {
                        event: b,
                        sourceTree: d.sourceCtrl ? d.sourceCtrl.getCtrlName() : "",
                        dragRow: d.source,
                        targetTree: a.getCtrlName(),
                        targetRow: null,
                        isDropAllowed: a.options.allowDrop,
                        dropPos: -1,
                        mousePos: a.getMousePos(b)
                    }, 0 == a.callDragOver(d)) b.dataTransfer ? b.dataTransfer.dropEffect = "none" : b.originalEvent && b.originalEvent.dataTransfer && (b.originalEvent.dataTransfer.dropEffect = "none"), a.dropMark();
                else {
                    d = a.getMousePos(b);
                    b = d.y + 16;
                    var d = d.x + 20,
                        G = a.getDropMarkWindow();
                    G.empty();
                    G.append("<span class='iui-drop-marker-move-end'></span><span class='iui-drop-marker-title'>" +
                        (c.name ? c.name : "TreeGrid") + "</span>");
                    a.updateDropMarkElem(a.getDropMarkWindow(), {
                        top: b,
                        left: d
                    });
                    a.dropMark(!0)
                }
        } else a.dropMark(), b.dataTransfer ? b.dataTransfer.dropEffect = "none" : b.originalEvent && b.originalEvent.dataTransfer && (b.originalEvent.dataTransfer.dropEffect = "none")
    });
    e.bind("drop", function(b) {
        b.preventDefault();
        if (a.options.enabled) {
            a.dropMark();
            if (a.isDropInRange(b)) {
                var d = !0;
                b.dataTransfer ? d = "none" === b.dataTransfer.effectAllowed ? !1 : !0 : b.originalEvent && b.originalEvent.dataTransfer && (d = "none" ===
                    b.originalEvent.dataTransfer.effectAllowed ? !1 : !0);
                if (d && (d = p.getData(), d.source || (d.source = a.getDnDSource(b)), d.source)) {
                    var G = {
                        event: b,
                        sourceTree: d.sourceCtrl ? d.sourceCtrl.getCtrlName() : "",
                        dragRow: d.source,
                        targetTree: a.getCtrlName(),
                        targetRow: null,
                        isDropAllowed: a.options.allowDrop,
                        dropPos: -1,
                        mousePos: a.getMousePos(b)
                    };
                    !1 !== a.callDragDrop(G) && (a.drop(d), c.$$phase || c.$apply())
                }
            }
            p.clearData()
        }
        b.stopPropagation()
    });
    e.bind("dragleave", function(b) {
        b.preventDefault();
        if (a.options.enabled) {
            a.dropMark();
            var d = p.getData();
            d.source || (d.source = a.getDnDSource(b));
            b = {
                event: b,
                sourceTree: d.sourceCtrl ? d.sourceCtrl.getCtrlName() : "",
                dragRow: d.source,
                targetTree: a.getCtrlName(),
                targetRow: d.target,
                mousePos: a.getMousePos(b)
            };
            a.callDragLeave(b)
        }
        a.cancelScrollTimer()
    });
    e.bind("dragend", function(b) {
        b.preventDefault();
        a.options.enabled && (a.dropMark(), p.getData().source || p.clearData(), a.dragDropStatus(!1))
    });
    e.bind("mouseleave", function(b) {
        b.preventDefault();
        a.options.enabled && (a.dropMark(), a.hoverColumn = null, a.hoverRow =
            null, a.hoverCell = null)
    });
    this.containsMousePos = function(a, d) {
        return p.hitTest(a, d, {
            left: 0,
            top: 0,
            right: e[0].clientWidth,
            bottom: e[0].clientHeight
        })
    };
    this.isPopupActive = function() {
        return !1
    };
    var za = function(b, d) {
            var c = a.options.rowFields;
            if (!b[c.cells]) {
                b[c.cells] = [];
                var h = {};
                h[a.options.cellFields.text] = b[d.text];
                b[c.cells].push(h)
            }
            b[c.rows] || (b[c.rows] = []);
            b[c.rows].length = 0;
            if (b[d.items] && 0 < b[d.items].length)
                for (h = 0; h < b[d.items].length; h++) b[c.rows].push(za(b[d.items][h], d));
            return b
        },
        Aa = function(b,
            d) {
            var c = !1;
            d.sourceCtrl && (c = d.sourceCollection.removeAt(b, -1, null, d.sourceCtrl.objIsRemoved));
            c && ("item" == b.type && (b = za(b, d.sourceCtrl.options.dataFields)), 0 === d.dropPos ? a.rowsObj.insertAt(b, -1, d.target, a.rowIsAdded) : 1 === d.dropPos || 2 === d.dropPos ? 1 === d.dropPos ? a.rowsObj.insertByRef(b, d.target, !1, a.rowIsAdded) : a.rowsObj.insertByRef(b, d.target, !0, a.rowIsAdded) : a.rowsObj.insertAt(b, -1, null, a.rowIsAdded))
        };
    this.setDropSelection = function(b, d) {
        var c = b;
        !c && 0 <= d && d < a.currentList.length && (c = a.currentList[d]);
        a.clearPrevSelection(c);
        a.rowSelection(c)
    };
    this.drop = function(b) {
        if (b && b.sourceCtrl) {
            b.sourceCtrl.suppressProcess = !0;
            a.allowUpdate = !1;
            b.sourceCtrl.allowUpdate = !1;
            var d = b.source,
                c = -1;
            if (Array.isArray(b.source)) {
                0 < b.source.length && (c = b.sourceCtrl.getObjCurrentIndex(b.source[b.source.length - 1]));
                for (var h = [], t = 0; t < b.source.length; t++) {
                    for (var e = !1, g = b.sourceCollection.getParent(b.source[t]); g;) {
                        if (b.sourceCtrl.isObjInSelList(g)) {
                            e = !0;
                            break
                        }
                        g = b.sourceCollection.getParent(g)
                    }
                    e || h.push(b.source[t])
                }
                if (0 <
                    h.length)
                    if (d = h[h.length - 1], t = b.sourceCtrl.getObjCurrentIndex(h[0]), e = b.sourceCtrl.getObjCurrentIndex(d), t <= e)
                        for (t = 0; t < h.length; t++) Aa(h[t], b);
                    else
                        for (t = h.length - 1; 0 <= t; t--) Aa(h[t], b)
            } else c = b.sourceCtrl.getObjCurrentIndex(b.source), Aa(b.source, b);
            b.sourceCtrl !== a ? (a.allowUpdate = !0, b.sourceCtrl.allowUpdate = !0, a.updateCurrentLayout(), b.sourceCtrl.updateCurrentLayout()) : (a.allowUpdate = !0, a.updateCurrentLayout());
            b.sourceCtrl.multiSelection(!1);
            var l = f(function() {
                b.sourceCtrl !== a && b.sourceCtrl.setDropSelection(null,
                    c);
                a.setDropSelection(d);
                a.updateFocus(a.getObjCurrentIndex(d), 0);
                f.cancel(l)
            }, 1);
            b.sourceCtrl.suppressProcess = !1
        }
    };
    this.isDragAllowed = function(b) {
        return a.options.allowDrag ? b && (b[a.options.rowFields.allowDrag] || void 0 === b[a.options.rowFields.allowDrag]) ? !0 : !1 : !1
    };
    this.isChildOf = function(b, d) {
        var c = !1;
        if (b && d) {
            var h = d[a.options.rowFields.rows];
            if (h && 0 < h.length)
                for (var e = 0; e < h.length; e++) {
                    if (l.isEqual(b[a.options.rowFields.id], h[e][a.options.rowFields.id])) {
                        c = !0;
                        break
                    } else c = a.isChildOf(b, h[e]);
                    if (c) break
                }
        }
        return c
    };
    this.isParentOf = function(b, d) {
        var c = a.rowsObj.getParent(d);
        return b && d && c && l.isEqual(b[a.options.rowFields.id], c[a.options.rowFields.id]) ? !0 : !1
    };
    this.isDropAllowed = function(b, d, c) {
        var h = a.options.allowDrop;
        if (h && b && d && (h = d[a.options.rowFields.allowDrop] || void 0 === d[a.options.rowFields.allowDrop] ? !0 : !1))
            if (Array.isArray(b))
                for (var e = 0; e < b.length; e++) {
                    if (l.isEqual(b[e][a.options.rowFields.id], d[a.options.rowFields.id]) || 0 === c && a.isParentOf(d, b[e]) || a.isChildOf(d, b[e])) {
                        h = !1;
                        break
                    }
                    if (!h) break
                } else if (l.isEqual(b[a.options.rowFields.id],
                        d[a.options.rowFields.id]) || 0 === c && a.isParentOf(d, b) || a.isChildOf(d, b)) h = !1;
        return h
    };
    this.getDropMarkWindow = function() {
        for (var a = Ha, d = angular.element(document.body).children(), c = 0; c < d.length; c++) {
            var h = angular.element(d[c]);
            if (h[0].attributes && h[0].attributes["data-element"] && "dropmark" === h[0].attributes["data-element"].value) {
                a = h;
                break
            }
        }
        return a
    };
    this.dropMark = function(b, d) {
        d || (d = a.getDropMarkWindow());
        if (d) {
            var c = "none";
            this.options.allowDrop && (c = b ? "block" : "none");
            angular.element(d).css("display",
                c)
        }
    };
    this.updateDropMarkElem = function(a, d) {
        a && d && (a.css("top", d.top + "px"), a.css("left", d.left + "px"), a.css("width", d.width + "px"))
    };
    c.$on(c.name + "-open-editor", function(b, d) {
        a.openEditor(d)
    });
    c.$on(c.name + "-close-editor", function(b, d) {
        a.closeEditor(d)
    });
    this.updateEditorSettings = function(b) {
        a.options.editorSettings = b ? {
            activate: l.isFieldAvailable(b.activate, "click")
        } : {
            activate: "click"
        }
    };
    this.allowEvents = !0;
    this.callAfterCollapse = function(a) {
        angular.isDefined(c.events) && c.events.afterCollapse && c.events.afterCollapse({
            row: a
        });
        c.afterCollapse({
            e: {
                row: a
            }
        })
    };
    this.callAfterExpand = function(a) {
        angular.isDefined(c.events) && c.events.afterExpand && c.events.afterExpand({
            row: a
        });
        c.afterExpand({
            e: {
                row: a
            }
        })
    };
    this.callAfterEdit = function(a) {
        angular.isDefined(c.events) && c.events.afterEdit && c.events.afterEdit({
            cell: a
        });
        c.afterEdit({
            e: {
                cell: a
            }
        })
    };
    this.callAfterLabelEdit = function(a) {
        angular.isDefined(c.events) && c.events.afterLabelEdit && c.events.afterLabelEdit({
            cell: a
        });
        c.afterLabelEdit({
            e: {
                cell: a
            }
        })
    };
    this.callAfterSelect = function(a) {
        angular.isDefined(c.events) &&
            c.events.afterSelect ? c.events.afterSelect({
                object: a
            }) : c.afterSelect({
                e: {
                    object: a
                }
            });
        angular.isDefined(c.events) && c.events.selectionChanged ? c.events.selectionChanged({
            object: a
        }) : c.selectionChanged({
            e: {
                object: a
            }
        })
    };
    this.callBeforeCollapse = function(a) {
        return angular.isDefined(c.events) && c.events.beforeCollapse ? c.events.beforeCollapse({
            row: a
        }) : c.beforeCollapse({
            e: {
                row: a
            }
        })
    };
    this.callBeforeExpand = function(a) {
        return angular.isDefined(c.events) && c.events.beforeExpand ? c.events.beforeExpand({
            row: a
        }) : c.beforeExpand({
            e: {
                row: a
            }
        })
    };
    this.callBeforeEdit = function(a) {
        return angular.isDefined(c.events) && c.events.beforeEdit ? c.events.beforeEdit({
            cell: a
        }) : c.beforeEdit({
            e: {
                cell: a
            }
        })
    };
    this.callBeforeLabelEdit = function(a) {
        return angular.isDefined(c.events) && c.events.beforeLabelEdit ? c.events.beforeLabelEdit({
            cell: a
        }) : c.beforeLabelEdit({
            e: {
                cell: a
            }
        })
    };
    this.callCellValueChanging = function(b, d, G) {
        var h = !0;
        a.allowEvents && (h = angular.isDefined(c.events) && c.events.cellvalueChanging ? c.events.cellvalueChanging({
            row: b,
            cell: d,
            value: G
        }) : c.cellvalueChanging({
            e: {
                row: b,
                cell: d,
                value: G
            }
        }));
        return h
    };
    this.callCellValueChanged = function(b, d, G) {
        a.allowEvents && (angular.isDefined(c.events) && c.events.cellvalueChanged ? c.events.cellvalueChanged({
            row: b,
            cell: d,
            value: G
        }) : c.cellvalueChanged({
            e: {
                row: b,
                cell: d,
                value: G
            }
        }))
    };
    this.callChange = function() {
        angular.isDefined(c.events) && c.events.change ? c.events.change() : c.change()
    };
    this.callColumnClick = function(a, d) {
        angular.isDefined(c.events) && c.events.columnClick && c.events.columnClick({
            column: a,
            mousePos: d
        });
        c.columnClick({
            e: {
                column: a,
                mousePos: d
            }
        })
    };
    this.callColumnDblClick = function(a, d) {
        angular.isDefined(c.events) && c.events.columnDblclick && c.events.columnDblclick({
            column: a,
            mousePos: d
        });
        c.columnDblclick({
            e: {
                column: a,
                mousePos: d
            }
        })
    };
    this.callColumnHover = function(a) {
        angular.isDefined(c.events) && c.events.columnHover && c.events.columnHover({
            column: a
        });
        c.columnHover({
            e: {
                column: a
            }
        })
    };
    this.callColumnPosChanging = function(a, d) {
        return angular.isDefined(c.events) && c.events.columnPoschanging ? c.events.columnPoschanging({
            sourceColumn: a,
            targetColumn: d
        }) : c.columnPoschanging({
            e: {
                sourceColumn: a,
                targetColumn: d
            }
        })
    };
    this.callColumnPosChanged = function(a, d) {
        angular.isDefined(c.events) && c.events.columnPoschanged && c.events.columnPoschanged({
            sourceColumn: a,
            targetColumn: d
        });
        c.columnPoschanged({
            e: {
                sourceColumn: a,
                targetColumn: d
            }
        })
    };
    this.callColumnRightClick = function(a, d) {
        angular.isDefined(c.events) && c.events.columnRightclick && c.events.columnRightclick({
            column: a,
            mousePos: d
        });
        c.columnRightclick({
            e: {
                column: a,
                mousePos: d
            }
        })
    };
    this.callColumnSizeChanged = function(a, d) {
        angular.isDefined(c.events) && c.events.columnSizechanged &&
            c.events.columnSizechanged({
                column: a
            });
        c.columnSizechanged({
            e: {
                column: a
            }
        })
    };
    this.callDragEnter = function(a) {
        angular.isDefined(c.events) && c.events.dragEnter ? c.events.dragEnter({
            event: a.event,
            sourceTree: a.sourceTree,
            dragRow: a.dragRow,
            targetTree: a.targetTree,
            targetRow: a.targetRow,
            mousePos: a.mousePos
        }) : c.dragEnter({
            e: {
                event: a.event,
                sourceTree: a.sourceTree,
                dragRow: a.dragRow,
                targetTree: a.targetTree,
                targetRow: a.targetRow,
                mousePos: a.mousePos
            }
        })
    };
    this.callDragOver = function(b) {
        var d = a.getCellAt(b.mousePos.x,
            b.mousePos.y);
        return angular.isDefined(c.events) && c.events.dragOver ? c.events.dragOver({
            event: b.event,
            sourceTree: b.sourceTree,
            dragRow: b.dragRow,
            targetTree: b.targetTree,
            targetRow: b.targetRow,
            targetCell: d,
            isDropAllowed: b.isDropAllowed,
            dropPos: b.dropPos,
            mousePos: b.mousePos
        }) : c.dragOver({
            e: {
                event: b.event,
                sourceTree: b.sourceTree,
                dragRow: b.dragRow,
                targetTree: b.targetTree,
                targetRow: b.targetRow,
                targetCell: d,
                isDropAllowed: b.isDropAllowed,
                dropPos: b.dropPos,
                mousePos: b.mousePos
            }
        })
    };
    this.callDragDrop = function(b) {
        var d =
            a.getCellAt(b.mousePos.x, b.mousePos.y);
        return angular.isDefined(c.events) && c.events.dragDrop ? c.events.dragDrop({
            event: b.event,
            sourceTree: b.sourceTree,
            dragRow: b.dragRow,
            targetTree: b.targetTree,
            targetRow: b.targetRow,
            targetCell: d,
            isDropAllowed: b.isDropAllowed,
            dropPos: b.dropPos,
            mousePos: b.mousePos
        }) : c.dragDrop({
            e: {
                event: b.event,
                sourceTree: b.sourceTree,
                dragRow: b.dragRow,
                targetTree: b.targetTree,
                targetRow: b.targetRow,
                targetCell: d,
                isDropAllowed: b.isDropAllowed,
                dropPos: b.dropPos,
                mousePos: b.mousePos
            }
        })
    };
    this.callDragLeave =
        function(a) {
            angular.isDefined(c.events) && c.events.dragLeave ? c.events.dragLeave({
                event: a.event,
                sourceTree: a.sourceTree,
                dragRow: a.dragRow,
                targetTree: a.targetTree,
                targetRow: a.targetRow,
                mousePos: a.mousePos
            }) : c.dragLeave({
                e: {
                    event: a.event,
                    sourceTree: a.sourceTree,
                    dragRow: a.dragRow,
                    targetTree: a.targetTree,
                    targetRow: a.targetRow,
                    mousePos: a.mousePos
                }
            })
        };
    this.callCellClick = function(a, d, G, h) {
        angular.isDefined(c.events) && c.events.cellClick && c.events.cellClick({
            event: a,
            row: d,
            cell: G,
            mousePos: h
        });
        c.cellClick({
            e: {
                event: a,
                row: d,
                cell: G,
                mousePos: h
            }
        })
    };
    this.callCellHover = function(a, d) {
        angular.isDefined(c.events) && c.events.cellHover ? c.events.cellHover({
            event: a,
            cell: d
        }) : c.cellHover({
            e: {
                event: a,
                cell: d
            }
        })
    };
    this.callEnabledChanged = function(a) {
        angular.isDefined(c.events) && c.events.enabledChanged ? c.events.enabledChanged({
            enabled: a
        }) : c.enabledChanged({
            e: {
                enabled: a
            }
        })
    };
    this.callRowClick = function(a, d, G) {
        angular.isDefined(c.events) && c.events.rowClick ? c.events.rowClick({
            event: a,
            row: d,
            mousePos: G
        }) : c.rowClick({
            e: {
                event: a,
                row: d,
                mousePos: G
            }
        })
    };
    this.callRowDblClick = function(a, d) {
        return angular.isDefined(c.events) && c.events.rowDblClick ? c.events.rowDblClick({
            row: a,
            mousePos: d
        }) : c.rowDblclick({
            e: {
                row: a,
                mousePos: d
            }
        })
    };
    this.callRowHover = function(a, d) {
        angular.isDefined(c.events) && c.events.rowHover ? c.events.rowHover({
            event: a,
            row: d
        }) : c.rowHover({
            e: {
                event: a,
                row: d
            }
        })
    };
    this.callRowRightClick = function(a, d) {
        angular.isDefined(c.events) && c.events.rowRightClick && c.events.rowRightClick({
            row: a,
            mousePos: d
        });
        c.rowRightclick({
            e: {
                row: a,
                mousePos: d
            }
        })
    };
    this.callKeyDown =
        function(a, d) {
            angular.isDefined(c.events) && c.events.keyDown ? c.events.keyDown({
                event: a,
                row: d
            }) : c.keyDown({
                e: {
                    event: a,
                    row: d
                }
            })
        };
    this.callKeyPress = function(a, d) {
        angular.isDefined(c.events) && c.events.keyPress ? c.events.keyPress({
            event: a,
            row: d
        }) : c.keyPress({
            e: {
                event: a,
                row: d
            }
        })
    };
    this.callKeyUp = function(a, d) {
        angular.isDefined(c.events) && c.events.keyUp ? c.events.keyUp({
            event: a,
            row: d
        }) : c.keyUp({
            e: {
                event: a,
                row: d
            }
        })
    };
    this.callScrollPosChanged = function() {
        angular.isDefined(c.events) && c.events.scrollPosChanged ? c.events.scrollPosChanged({
                scrollPos: a.scrollPos
            }) :
            c.scrollposChanged({
                e: {
                    scrollPos: a.scrollPos
                }
            })
    };
    e.bind("click", function(b) {
        a.options.enabled && 1 === b.which && a.callRowClick(b, null, a.getMousePos(b))
    });
    e.bind("dblclick", function(b) {
        b.preventDefault();
        a.options.enabled && 1 === b.which && a.callRowDblClick(null, a.getMousePos(b));
        b.stopPropagation()
    });
    e.bind("mousedown", function(b) {
        a.options.enabled && 3 === b.which && a.callRowRightClick(null, a.getMousePos(b));
        a.removeDropDownList();
        a.closeFilterWindow();
        a.closeEditor();
        b.stopPropagation()
    });
    this.expandList = [];
    this.expandIndentList = [];
    var tb = function(b, d, c) {
            b.type = "row";
            b[a.options.rowFields.id] || (b[a.options.rowFields.id] = l.getUniqueId());
            c && (b[a.options.rowFields.pid] = c);
            c = !0;
            var h = b[a.options.rowFields.cells];
            if (h && 0 < h.length) {
                c = X(b);
                for (var e, f, g, k = 0; k < a.columnList.length; k++) {
                    g = a.columnList[k];
                    e = g[a.options.columnFields.id];
                    f = g[a.options.columnFields.editorType];
                    g = g[a.options.columnFields.editorSettings];
                    var p = k;
                    e && (p = a.getCellIndexById(h, k, e));
                    0 <= p && p < h.length && (h[p].type = "cell", a.setDefaultCellValue(h[p],
                        f, g))
                }
            }
            c && (a.expandList.push(b), a.expandIndentList.push(d));
            return c
        },
        B = function(b, d, c) {
            if (!b[a.options.rowFields.rows]) return c = tb(b, d + W, c);
            if (c = tb(b, d + W, c)) {
                var h = 0,
                    e;
                if (a.isRowExpanded(b)) {
                    var f = b[a.options.rowFields.rows];
                    if (f) {
                        a.applySorting(f);
                        for (var g = 0; g < f.length; g++)(e = B(f[g], d + W, b[a.options.rowFields.id])) && h++
                    }
                }!a.isThereChildRows && (0 < h || !a.isRowExpanded(b) && b[a.options.rowFields.rows] && 0 < b[a.options.rowFields.rows].length && a.isThereVisibleChildren(b)) && (a.isThereChildRows = !0)
            }
            return c
        };
    this.expand = function(b) {
        a.expandList.length = [];
        a.expandIndentList.length = [];
        if (!a.isRowExpanded(b)) {
            var d = a.getRowCurrentIndex(b);
            if (b = a.getList(b)) {
                a.applySorting(b);
                for (var c = 0; c < b.length; c++) B(b[c], a.indentList[d], null)
            }
            if (0 < a.expandList.length) {
                a.allowEvents = !1;
                d++;
                Array.prototype.splice.apply(a.currentList, [d, 0].concat(a.expandList));
                Array.prototype.splice.apply(a.indentList, [d, 0].concat(a.expandIndentList));
                a.getRowScope() ? a.updateView() : a.updateLayout();
                var h = f(function() {
                    a.updateViewSize();
                    a.updateViewSize();
                    a.updateScrollVisibility();
                    a.updateScrollView();
                    f.cancel(h);
                    a.allowEvents = !0
                }, 1)
            }
        }
    };
    this.collapse = function(b) {
        a.expandList.length = [];
        a.expandIndentList.length = [];
        if (a.isRowExpanded(b)) {
            var d = null,
                c = !1,
                h = b,
                e = -1,
                g = a.getRowCurrentIndex(b);
            for (b = a.getParent(b); b && !c;) {
                d = a.getList(b);
                for (e = d.indexOf(h) + 1; !c && e < d.length;) h = d[e], 0 < a.getRowCurrentIndex(h) && (c = !0), e++;
                c || (h = b);
                b = a.getParent(b)
            }
            if (!c && h)
                for (d = a.getList(), e = d.indexOf(h) + 1; e < d.length;)
                    if (h = d[e], 0 < a.getRowCurrentIndex(h)) {
                        c = !0;
                        break
                    } else e++;
            g++;
            d = a.currentList.length - g;
            c && (d = a.getRowCurrentIndex(h) - g);
            if (0 < d) {
                a.currentList.splice(g, d);
                a.indentList.splice(g, d);
                a.getRowScope() ? a.updateView() : a.updateLayout();
                var l = f(function() {
                    a.updateViewSize();
                    a.updateViewSize();
                    a.updateScrollVisibility();
                    a.updateScrollView();
                    f.cancel(l);
                    a.allowEvents = !0
                }, 1)
            }
        }
    };
    this.toggle = function(b, d) {
        if (b) {
            if (b[a.options.rowFields.hasChildren] || b[a.options.rowFields.rows] && 0 != b[a.options.rowFields.rows].length)
                if (!d || 0 == b[a.options.rowFields.expanded])
                    if (!1 !==
                        d || 0 != b[a.options.rowFields.expanded]) {
                        a.updateType = "view";
                        var c = void 0 !== d ? d : !1 !== b[a.options.rowFields.expanded] ? !0 : !1;
                        !1 !== (void 0 !== d ? d ? a.callBeforeExpand(b) : a.callBeforeCollapse(b) : c ? a.callBeforeCollapse(b) : a.callBeforeExpand(b)) && (c = void 0 != d ? d : !c, c != b[a.options.rowFields.expanded] && (0 != c ? a.expand(b) : a.collapse(b), b[a.options.rowFields.expanded] = c), a.isRowExpanded(b) ? a.callAfterExpand(b) : a.callAfterCollapse(b))
                    }
        } else {
            for (var c = a.getFullList(), h = 0; h < c.length; h++) c[h][a.options.rowFields.expanded] =
                d;
            a.updateCurrentLayout()
        }
    };
    c.$on(c.name + "-collapse", function(b, d) {
        a.toggle(d, !1)
    });
    c.$on(c.name + "-expand", function(b, d) {
        a.toggle(d, !0)
    });
    c.$on(c.name + "-expand-col-index", function(b, d) {
        0 <= d && d < a.columnList.length && (a.options.expandColIndex = d)
    });
    c.$on(c.name + "-toggle", function(b, d) {
        a.toggle(d)
    });
    this.isFilteringAllowed = function(b) {
        return b && b[a.options.columnFields.allowFilter]
    };
    c.$on(c.name + "-filter", function(b, d, c) {
        a.filter(d, c)
    });
    this.filter = function(b, d) {
        if (b) b[a.options.columnFields.filterParams] =
            d;
        else
            for (var c = 0; c < a.columnList.length; c++) a.columnList[c][a.options.columnFields.filterParams] = null;
        a.closeFilterWindow();
        a.updateCurrentLayout();
        a.callChange()
    };
    this.callGotFocus = function(a, d, e, h, f) {
        angular.isDefined(c.events) && c.events.gotFocus ? c.events.gotFocus({
            event: a,
            row: d,
            cell: e,
            edit: void 0 != h ? !0 : !1,
            editValue: f
        }) : c.gotFocus({
            e: {
                event: a,
                row: d,
                cell: e,
                edit: void 0 != h ? !0 : !1,
                editValue: f
            }
        })
    };
    this.callLostFocus = function(a, d, e, h, f) {
        angular.isDefined(c.events) && c.events.lostFocus ? c.events.lostFocus({
            event: a,
            row: d,
            cell: e,
            edit: void 0 != h ? !0 : !1,
            editValue: f
        }) : c.lostFocus({
            e: {
                event: a,
                row: d,
                cell: e,
                edit: void 0 != h ? !0 : !1,
                editValue: f
            }
        })
    };
    this.getTabIndex = function() {
        return e[0].attributes && e[0].attributes.tabindex ? e[0].attributes.tabindex.value : ""
    };
    this.updateFocus = function(b, d) {
        if (1 == a.options.allowFocus) var c = f(function() {
            if (a.isRowIndexInRange(b)) {
                var h = "none";
                0 <= d && d < a.columnList.length && (h = a.columnList[d][a.options.columnFields.fixed]);
                var g = a.getElemFromRow(a.currentList[b], h);
                g && (1 == a.options.allowCellFocus &&
                    0 <= d && d < a.columnList.length ? (h = a.getElemFromCell(b, d, h)) && h[0].focus() : g[0].focus())
            } else e[0].focus();
            f.cancel(c)
        }, 5)
    };
    c.$on(c.name + "-focus", function(b, d) {
        if (d) {
            var c, h;
            switch (d.type) {
                case "row":
                    c = a.getRowCurrentIndex(d);
                    a.updateFocus(c);
                    break;
                case "cell":
                    c = a.getCellRowIndex(d), h = a.getCellColumnIndex(d), a.updateFocus(c, h)
            }
        } else a.updateFocus()
    });
    var $a = !1;
    this.getCell = function(b, d) {
        if (0 <= b && b < a.currentList.length) {
            var c = a.currentList[b],
                h = a.getColumnRealIndex(d);
            0 <= d && d < a.columnList.length && (h = a.getCellIndexById(c[a.options.rowFields.cells],
                d, a.columnList[d].id));
            if (c[a.options.rowFields.cells] && 0 <= h && h < c[a.options.rowFields.cells].length) return c[a.options.rowFields.cells][h]
        }
        return null
    };
    this.getCellObject = function(b, d) {
        if (0 <= b && b < a.currentList.length) {
            var c = a.currentList[b],
                h = a.getColumnRealIndex(d);
            0 <= d && d < a.columnList.length && (h = a.getCellIndexById(c[a.options.rowFields.cells], d, a.columnList[d].id));
            if (c[a.options.rowFields.cells] && 0 <= h && h < c[a.options.rowFields.cells].length) return c[a.options.rowFields.cells][h]
        }
        return null
    };
    this.getCellIndexById =
        function(b, d, c) {
            var h = -1;
            if (b) {
                d = a.getColumnRealIndex(d);
                for (var e = 0; e < b.length; e++)
                    if (void 0 == b[e][a.options.cellFields.cid]) {
                        h = d;
                        break
                    } else if (b[e][a.options.cellFields.cid] == c) {
                    h = e;
                    break
                }
            }
            return h
        };
    this.getCellIndexFromRow = function(b, d) {
        var c = -1;
        if (b && d && d[a.options.rowFields.cells])
            for (var h = 0; h < d[a.options.rowFields.cells].length; h++)
                if (d[a.options.rowFields.cells][h] == b) {
                    c = h;
                    break
                }
        return c
    };
    this.getCellColumnIndex = function(b) {
        if (b)
            if (b[a.options.cellFields.cid]) {
                if (b = a.getColumnById(b[a.options.cellFields.cid])) return a.getColumnCurrentIndex(b)
            } else return a.getCellColumnIndexFromRow(b);
        return -1
    };
    this.getCellColumnIndexFromRow = function(b) {
        if (b && b[a.options.cellFields.rid]) {
            var d = a.findRowById(b[a.options.cellFields.rid]);
            if (d && (d = d[a.options.rowFields.cells]) && 0 < d.length) return d.indexOf(b)
        }
        return -1
    };
    this.getCellRowIndex = function(b) {
        return b && b[a.options.cellFields.rid] && (b = a.findRowById(b[a.options.cellFields.rid])) ? a.getRowCurrentIndex(b) : -1
    };
    this.getColumnById = function(b) {
        for (var d = null, c = 0; c < a.columnList.length; c++)
            if (a.columnList[c][a.options.columnFields.id] == b) {
                d = a.columnList[c];
                break
            }
        return d
    };
    this.getColumnObject = function(b) {
        return 0 <= b && b < a.columnList.length ? a.columnList[b] : null
    };
    this.getRowObject = function(b) {
        return 0 <= b && b < a.currentList.length ? a.currentList[b] : null
    };
    this.isRowExpanded = function(b) {
        return b ? b[a.options.rowFields.expanded] || void 0 === b[a.options.rowFields.expanded] ? !0 : !1 : !0
    };
    this.getContentElement = function(a, d) {
        var c = null;
        d || (d = "cell-content");
        if (a && 0 < a.children().length)
            for (var h = a.children(), e = 0; e < h.length; e++) {
                var f = angular.element(h.eq(e));
                if (f[0].attributes &&
                    f[0].attributes["data-element"] && f[0].attributes["data-element"].value == d) {
                    c = f;
                    break
                }
            }
        return c
    };
    this.getElement = function(a, d) {
        var c = null;
        d || (d = "cell-content");
        if (a && 0 < a.children().length) {
            a = a.children().eq(0);
            for (var h = a.children(), e = 0; e < h.length; e++) {
                var f = angular.element(h.eq(e));
                if (f[0].attributes && f[0].attributes["data-element"] && f[0].attributes["data-element"].value == d) {
                    c = f;
                    break
                }
            }
        }
        return c
    };
    this.getChildElement = function(a, c) {
        var e = null;
        c || (c = "content");
        if (a && 0 < a.children().length)
            for (var h =
                    a.children(), f = 0; f < h.length; f++) {
                var g = angular.element(h.eq(f));
                if (g[0].attributes && g[0].attributes["data-element"] && g[0].attributes["data-element"].value == c) {
                    e = g;
                    break
                }
            }
        return e
    };
    this.getElemFromColumn = function(b, c, e) {
        var h = null;
        if (b) {
            b = a.getColumnCurrentIndex(b);
            var f = a.getHeaderElem(c);
            "footer" == e && (f = a.getFooterElem(c));
            if (f && (c = f.find("td")) && 0 < c.length)
                for (e = 0; e < c.length; e++)
                    if (f = angular.element(c[e]), f[0].attributes["data-index"] && f[0].attributes["data-index"].value.toString() === b.toString()) {
                        h =
                            f;
                        break
                    }
        }
        return h
    };
    this.getElemFromRow = function(b, c) {
        var e = null;
        if (b) {
            var h = a.getRowCurrentIndex(b),
                f = a.getRowElems(c);
            if (f && 0 < f.length)
                for (var g = 0; g < f.length; g++) {
                    var l = angular.element(f[g]);
                    if (l[0].attributes["data-index"] && l[0].attributes["data-index"].value.toString() === h.toString()) {
                        e = l;
                        break
                    }
                }
        }
        return e
    };
    this.getElemFromCell = function(b, c, e) {
        var h = null;
        if (0 <= b && b < a.currentList.length && (b = a.getElemFromRow(a.currentList[b], e)) && (b = b.find("td")) && 0 < b.length)
            for (e = 0; e < b.length; e++) {
                var f = angular.element(b[e]);
                if (f[0].attributes["data-index"] && f[0].attributes["data-index"].value.toString() === c.toString()) {
                    h = f;
                    break
                }
            }
        return h
    };
    this.getElemFromColumnCell = function(b, c, e) {
        var h = null;
        if ((c = e ? a.getFooterElem(c) : a.getHeaderElem(c)) && (c = c.find("td")) && 0 < c.length)
            for (e = 0; e < c.length; e++) {
                var f = angular.element(c[e]);
                if (f[0].attributes["data-index"] && f[0].attributes["data-index"].value.toString() === b.toString()) {
                    h = f;
                    break
                }
            }
        return h
    };
    this.getIndent = function(b) {
        var c = 0;
        if (b)
            for (parent = a.rowsObj.getParent(b); parent;) c +=
                a.options.indent, parent = a.rowsObj.getParent(parent);
        return c
    };
    this.getObjState = function(b) {
        if (b) switch (b.type) {
            case "column":
                if (0 == a.options.enabled) return "disabled";
                if (1 == b[a.options.columnFields.selected]) return "selected";
                if (b == a.hoverColumn) return "hovered";
                break;
            case "row":
                if (0 == a.options.enabled || 0 == b[a.options.rowFields.enabled]) return "disabled";
                if (1 == b[a.options.rowFields.selected]) return "selected";
                if (b == a.hoverRow) return "hovered";
                break;
            case "cell":
                if (0 == a.options.enabled || 0 == b[a.options.cellFields.enabled]) return "disabled";
                if (1 == b[a.options.cellFields.selected]) return "selected";
                if (b == a.hoverCell) return "hovered"
        }
        return "normal"
    };
    this.getColumnAt = function(b, c) {
        if (void 0 == b || void 0 == c) return a.hoverColumn;
        var e, h, f = null;
        e = "left";
        for (var g = 0; !f && 3 > g;) {
            if (e = a.getHeaderElem(e)) {
                var k = e.find("td");
                if (k && 0 < k.length)
                    for (var p = 0; p < k.length; p++)
                        if (e = angular.element(k[p]), h = l.getPageRect(e), l.checkHit(b, c, h)) {
                            f = a.getColumnFromElem(e);
                            break
                        }
            }
            g++;
            e = 1 == g ? "right" : "none"
        }
        return f
    };
    this.getCellAt = function(b, c) {
        var e = null,
            h = a.getRowAt(b,
                c);
        if (h) {
            var f, g, k = a.getElemFromRow(h).find("td");
            if (k && 0 < k.length)
                for (var p = 0; p < k.length && !(f = angular.element(k[p]), g = l.getPageRect(f), l.checkHit(b, c, g) && (e = a.getRowCurrentIndex(h), f = a.getIndexFromElem(f), e = a.getCellObject(e, f))); p++);
        }
        return e
    };
    this.getRowAt = function(b, c) {
        var e, h, f = null;
        e = "none";
        for (var g = 0; !f && 3 > g;) {
            var k = a.getRowElems(e);
            if (k && 0 < k.length)
                for (var p = 0; p < k.length; p++)
                    if (e = angular.element(k[p]), h = l.getPageRect(e), l.checkHit(b, c, h)) {
                        f = a.getRowFromElem(e);
                        break
                    }
            g++;
            e = 1 == g ? "left" : "right"
        }
        return f
    };
    this.getRowCurrentIndex = function(b) {
        return b && a.currentList ? a.currentList.indexOf(b) : -1
    };
    this.getObjCurrentIndex = function(b) {
        return a.getRowCurrentIndex(b)
    };
    this.getRowFromChildElem = function(b) {
        if (b && (b = angular.element(b))) {
            for (b = b.parent(); b && b[0].tagName && "tr" !== b[0].tagName.toLowerCase();) b = b.parent();
            return b ? a.getRowFromElem(b) : null
        }
        return null
    };
    this.getColumnCurrentIndex = function(b) {
        return b && a.columnList ? a.columnList.indexOf(b) : -1
    };
    this.getFullColumnList = function() {
        return a.columnsObj.getList()
    };
    this.getColumnRealIndex = function(b) {
        var c = a.getFullColumnList();
        return 0 <= b && b < c.length && b < a.columnList.length ? c.indexOf(a.columnList[b]) : -1
    };
    this.getColumnFromChildElem = function(b) {
        return b ? a.getColumnFromElem(b) : null
    };
    this.getColumnFromElem = function(b) {
        return b && (b = angular.element(b)) && b[0].attributes["data-index"] && (b = b[0].attributes["data-index"].value, 0 <= b && b < a.columnList.length) ? a.columnList[b] : null
    };
    this.getIndexFromElem = function(a) {
        return a && (a = angular.element(a)) && a[0].attributes["data-index"] ?
            a[0].attributes["data-index"].value : -1
    };
    this.getRowFromElem = function(b) {
        if (b && (b = angular.element(b)) && b[0].attributes["data-index"] && (b = b[0].attributes["data-index"].value, a.isRowIndexInRange(b))) return a.currentList[b]
    };
    this.isRowIndexInRange = function(b) {
        return 0 <= b && b < a.currentList.length
    };
    this.isColIndexInRange = function(b) {
        return 0 <= b && b < a.columnList.length
    };
    this.isRowEnabled = function(b) {
        return b && 1 == a.options.enabled && l.isEnabled(b[a.options.rowFields.enabled])
    };
    this.mouseButtonStatus = function(a) {
        $a =
            a
    };
    c.$on(c.name + "-ensure-visible", function(b, c) {
        a.ensureVisible(c)
    });
    c.$on(c.name + "-find-row-by-id", function(b, c) {
        k.setTempData(a.findRowById(c))
    });
    c.$on(c.name + "-find-row-by-path", function(b, c, e) {
        k.setTempData(a.findRowByPath(c, e))
    });
    c.$on(c.name + "-find-row-by-text", function(b, c) {
        k.setTempData(a.findRowByText(c))
    });
    c.$on(c.name + "-get-full-path", function(b, c) {
        k.setTempData(a.getFullPath(c))
    });
    c.$on(c.name + "-get-cell-at", function(b, c) {
        c ? k.setTempData(a.getCellAt(c.x, c.y)) : k.setTempData(null)
    });
    c.$on(c.name +
        "-get-row-at",
        function(b, c) {
            c ? k.setTempData(a.getRowAt(c.x, c.y)) : k.setTempData(null)
        });
    c.$on(c.name + "-get-row-level", function(b, c) {
        k.setTempData(a.getLevel(c))
    });
    c.$on(c.name + "-get-row-parent", function(b, c) {
        k.setTempData(a.getParent(c))
    });
    c.$on(c.name + "-get-flat-list", function(b, c) {
        c ? k.setTempData(a.getFullList()) : k.setTempData(a.currentList)
    });
    c.$on(c.name + "-get-list", function(b, c) {
        k.setTempData(a.getList(c))
    });
    c.$on(c.name + "-get-top-row", function(b) {
        k.setTempData(a.getTopRow())
    });
    c.$on(c.name + "-set-top-row",
        function(b, c) {
            a.ensureVisible(c)
        });
    this.ensureVisible = function(b, c) {
        if (b) {
            for (var e = [], h = a.getParent(b); h;) e.push(h), h = a.getParent(h);
            for (h = e.length - 1; 0 <= h; h--) e[h][a.options.rowFields.expanded] = !0;
            a.updateCurrentLayout();
            var g = f(function() {
                c = void 0 != c ? c : "center";
                a.scrollTo(b, c);
                f.cancel(g)
            }, 100)
        }
    };
    this.findRowById = function(b) {
        return a.rowsObj.findObjectById(b)
    };
    this.findRowByText = function(b) {
        return a.rowsObj.findObjectByText(b)
    };
    this.findRowByPath = function(b, c) {
        var e = null;
        c || (c = a.getFullList());
        for (var h = 0; h < c.length; h++)
            if (a.getFullPath(c[h]) == b) {
                e = c[h];
                break
            }
        return e
    };
    this.getFullPath = function(b) {
        var c = "";
        if (b)
            for (c = b[a.options.rowFields.text], b = a.getParent(b); b;) c = [b[a.options.rowFields.text], a.options.pathSeparator, c].join(""), b = a.getParent(b);
        return c
    };
    this.getLevel = function(a) {
        var c = 0;
        for (a = this.getParent(a); a;) c++, a = this.getParent(a);
        return c
    };
    this.getParent = function(b) {
        return a.rowsObj.getParent(b)
    };
    this.getList = function(b) {
        return a.rowsObj.getList(b)
    };
    this.getFirstRow = function() {
        for (var b =
                null, c = 0; c < a.currentList.length; c++)
            if (l.isEnabled(a.currentList[c][a.options.rowFields.enabled])) {
                b = a.currentList[c];
                break
            }
        return b
    };
    this.getPrevRow = function(b) {
        var c = null;
        if (0 <= b && b < a.currentList.length)
            for (--b; 0 <= b; b--)
                if (l.isEnabled(a.currentList[b][a.options.rowFields.enabled])) {
                    c = a.currentList[b];
                    break
                }
        return c
    };
    this.getNextRow = function(b) {
        var c = null;
        for (b += 1; b < a.currentList.length; b++)
            if (l.isEnabled(a.currentList[b][a.options.rowFields.enabled])) {
                c = a.currentList[b];
                break
            }
        return c
    };
    this.getLastRow =
        function() {
            for (var b = null, c = a.currentList.length - 1; 0 <= c; c--)
                if (l.isEnabled(a.currentList[c][a.options.rowFields.enabled])) {
                    b = a.currentList[c];
                    break
                }
            return b
        };
    this.updateSelectionStatus = function(b) {
        switch (b) {
            case "shift":
                switch (a.options.selectionMode) {
                    case "multi-simple":
                        a.multiSelection(!0);
                        break;
                    case "multi-extended":
                        a.multiSelection(!0);
                        break;
                    default:
                        a.multiSelection(!1)
                }
                break;
            case "ctrl":
                switch (a.options.selectionMode) {
                    case "multi-simple":
                        a.multiSelection(!0);
                        break;
                    case "multi-extended":
                        a.multiSelection(!0);
                        break;
                    default:
                        a.multiSelection(!1)
                }
        }
    };
    e.bind("keydown", function(b) {
        if (a.options.enabled) switch (b.keyCode) {
            case 16:
                a.updateSelectionStatus("shift");
                break;
            case 17:
                a.updateSelectionStatus("ctrl");
                break;
            default:
                (b.ctrlKey || b.metaKey) && a.updateSelectionStatus("ctrl"), b.shiftKey && a.updateSelectionStatus("shift")
        }
    });
    this.allowUpdate = !0;
    this.updateType = "all";
    this.suspendLayout = function(b) {
        a.allowUpdate = !1
    };
    this.resumeLayout = function(b) {
        a.allowUpdate = !0;
        b ? a.updateCurrentLayout() : a.updateLayout()
    };
    c.$on(c.name +
        "-refresh",
        function(b, c, e) {
            a.refresh(c, e)
        });
    c.$on(c.name + "-resume-layout", function(b, c) {
        a.resumeLayout(c)
    });
    c.$on(c.name + "-suspend-layout", function(b, c) {
        a.suspendLayout(c)
    });
    c.$on(c.name + "-update-layout", function(b, c) {
        c ? a.updateCurrentLayout() : a.updateLayout()
    });
    c.$on(c.name + "-update-view", function(b) {
        a.updateView()
    });
    c.$on(c.name + "-begin-load", function(b, c, e) {
        c ? (0 > a.options.loadRows.indexOf(c) && a.options.loadRows.push(c), a.updateView()) : a.beginLoad(e)
    });
    c.$on(c.name + "-end-load", function(b, c) {
        a.endLoad(c)
    });
    this.callLoadComplete = function(a) {
        angular.isDefined(c.events) && c.events.loadComplete ? c.events.loadComplete() : c.loadComplete()
    };
    this.callUpdateComplete = function() {
        angular.isDefined(c.events) && c.events.updateComplete ? c.events.updateComplete() : c.updateComplete()
    };
    c.$on(c.name + "-get-current-page", function(b) {
        k.setTempData(a.currentPageNumber)
    });
    c.$on(c.name + "-set-current-page", function(b, c) {
        a.setCurrentPage(c)
    });
    c.$on(c.name + "-first-page", function(b) {
        a.firstPage()
    });
    c.$on(c.name + "-last-page", function(b) {
        a.lastPage()
    });
    c.$on(c.name + "-next-page", function(b) {
        a.nextPage()
    });
    c.$on(c.name + "-prev-page", function(b) {
        a.prevPage()
    });
    this.setCurrentPage = function(b) {
        a.currentPageNumber != b && 1 <= b && b <= a.pageList.length && (a.currentPageNumber = b, a.updateCurrentLayout())
    };
    this.firstPage = function() {
        1 != a.currentPageNumber && (a.currentPageNumber = 1, a.updateCurrentLayout())
    };
    this.lastPage = function() {
        a.currentPageNumber != a.pageList.length && (a.currentPageNumber = a.pageList.length, a.updateCurrentLayout())
    };
    this.nextPage = function() {
        a.currentPageNumber <
            a.pageList.length && (a.currentPageNumber++, a.updateCurrentLayout())
    };
    this.prevPage = function() {
        1 < a.currentPageNumber && (a.currentPageNumber--, a.updateCurrentLayout())
    };
    c.$on(c.name + "-get-max-scroll-pos", function(b) {
        k.setTempData(a.getMaxScrollPos())
    });
    c.$on(c.name + "-get-scroll-pos", function(b) {
        k.setTempData(a.getScrollPos())
    });
    c.$on(c.name + "-set-scroll-pos", function(b, c) {
        a.setScrollPos(c)
    });
    c.$on(c.name + "-scroll-to", function(b, c, e) {
        a.scrollTo(c, e)
    });
    var ra = !1;
    this.multiSelection = function(a) {
        if (void 0 !=
            a) ra = a;
        else return ra
    };
    this.columnSelection = function(b, d) {
        if (b) {
            var e = !0;
            a.options.selectedColumn && (e = !l.isEqual(a.options.selectedColumn[a.options.columnFields.id], b[a.options.columnFields.id]));
            var h;
            h = angular.isDefined(c.events) && c.events.beforeSelect ? c.events.beforeSelect({
                object: b
            }) : c.beforeSelect({
                e: {
                    object: b
                }
            });
            e && !1 !== h && (a.options.selectedColumn && (a.options.selectedColumn[a.options.columnFields.selected] = !1, a.refresh(a.options.selectedColumn)), a.options.selectedColumn = b, b.selected = !0, angular.isDefined(c.selectedColumn) &&
                (c.selectedColumn = b), a.refresh(a.options.selectedColumn), a.callAfterSelect(b))
        } else return a.options.selectedColumn
    };
    this.isRowSelected = function(a) {
        return l.isSelected(a)
    };
    this.clearPrevSelection = function(b) {
        for (var c = 0; c < a.options.selectedRows.length; c++) b && !l.isEqual(a.options.selectedRows[c][a.options.rowFields.id], b[a.options.rowFields.id]) ? a.options.selectedRows[c][a.options.rowFields.selected] = !1 : b || (a.options.selectedRows[c][a.options.rowFields.selected] = !1);
        a.options.selectedRows.length = 0;
        b && 0 != b[a.options.rowFields.enabled] && a.options.selectedRows.push(b);
        a.refreshRows()
    };
    this.markSelColumn = function() {
        for (var b = 0; b < a.columnList.length; b++) a.refresh(a.columnList[b])
    };
    this.updateSelectionList = function() {
        for (var b = a.options.selectedRows.length - 1; 0 <= b;) 0 == a.options.selectedRows[b][a.options.rowFields.enabled] && a.options.selectedRows.splice(b, 1), b--
    };
    this.rowSelection = function(b, d, e, h, f) {
        if (b) {
            if ("none" != a.options.selectionMode)
                if (a.isRowEnabled(b)) {
                    var g = a.rowSelection(),
                        k = !0;
                    g && (k = !l.isEqual(g[a.options.rowFields.id],
                        b[a.options.rowFields.id]) || e || h);
                    var p = !0,
                        p = angular.isDefined(c.events) && c.events.beforeSelect ? c.events.beforeSelect({
                            object: b
                        }) : c.beforeSelect({
                            e: {
                                object: b
                            }
                        });
                    if (!1 !== p)
                        if (e = d || e || h ? !0 : !1, k) {
                            k = !0;
                            "multi-extended" == a.options.selectionMode && (k = !a.isObjInSelList(b) || !e);
                            k && ("one" == a.options.selectionMode ? a.clearPrevSelection() : $a && d ? a.clearPrevSelection() : ra || e || "multi-simple" === a.options.selectionMode || a.clearPrevSelection());
                            a.options.selectedRow = b;
                            if ($a && d && "one" != a.options.selectionMode) {
                                if (d =
                                    a.getRowCurrentIndex(g), f = a.getRowCurrentIndex(b), d > f && (g = d, d = f, f = g), a.isRowIndexInRange(d) && a.isRowIndexInRange(f))
                                    for (; d <= f; d++) a.currentList[d][a.options.rowFields.selected] = !0, a.options.selectedRows.push(a.currentList[d])
                            } else $a && (ra || e || "multi-simple" === a.options.selectionMode) ? (d = null === b[a.options.rowFields.selected] || "undefined" === b[a.options.rowFields.selected] ? !1 : b[a.options.rowFields.selected], b[a.options.rowFields.selected] = !d, b[a.options.rowFields.selected] ? a.isObjInSelList(b) || a.options.selectedRows.push(b) :
                                a.options.selectedRows = a.options.selectedRows.filter(function(a) {
                                    return a != b
                                })) : (b[a.options.rowFields.selected] = !0, a.isObjInSelList(b) || a.options.selectedRows.push(b));
                            angular.isDefined(c.selectedRow) && (c.selectedRow = b);
                            a.callAfterSelect(b);
                            a.refresh(null, null, !0)
                        } else if (ra || e || "multi-simple" === a.options.selectionMode) d = null === b[a.options.rowFields.selected] || "undefined" === b[a.options.rowFields.selected] ? !1 : b[a.options.rowFields.selected], f && "undefined" !== f && (d = f), b[a.options.rowFields.selected] = !d, b[a.options.rowFields.selected] ? a.isObjInSelList(b) || a.options.selectedRows.push(b) : a.options.selectedRows = a.options.selectedRows.filter(function(a) {
                        return a != b
                    }), a.callAfterSelect(b), a.refresh(null, null, !0)
                } else a.clearPrevSelection()
        } else return a.options.selectedRow
    };
    this.updateSelection = function(b, c, e) {
        b = b && (b.shiftKey || b.ctrlKey || b.metaKey) ? !0 : !1;
        "multi-extended" == a.options.selectionMode && 0 < a.options.selectedRows.length && !e && !ra && !b && (a.clearPrevSelection(), c[a.options.rowFields.selected] = !0, a.options.selectedRows.push(c), a.callAfterSelect(c), a.refresh(null, null, !0))
    };
    this.isObjInSelList = function(b) {
        var c = !1,
            e = a.options.selectedRows;
        if (b && e)
            for (var f = 0; f < e.length; f++)
                if (l.isEqual(e[f][a.options.rowFields.id], b[a.options.rowFields.id])) {
                    c = !0;
                    break
                }
        return c
    };
    c.$on(c.name + "-clear-selection", function(b) {
        a.options.selectedColumn && (a.options.selectedColumn[a.options.columnFields.selected] = !1);
        a.options.selectedColumn = null;
        a.clearPrevSelection();
        a.options.selectedRow = null
    });
    c.$on(c.name +
        "-get-hover-column",
        function(b, c) {
            a.hoverColumn ? k.setTempData(a.hoverColumn) : c && k.setTempData(a.getColumnAt({
                x: c.x,
                y: c.y
            }))
        });
    c.$on(c.name + "-get-selected-column", function(b) {
        k.setTempData(a.columnSelection())
    });
    c.$on(c.name + "-set-selected-column", function(b, c) {
        a.columnSelection(c)
    });
    c.$on(c.name + "-get-selected-row", function(b) {
        k.setTempData(a.rowSelection())
    });
    c.$on(c.name + "-set-selected-row", function(b, c) {
        var e = f(function() {
            a.rowSelection(c);
            f.cancel(e)
        }, 1)
    });
    c.$on(c.name + "-get-selected-rows", function(b) {
        k.setTempData(a.options.selectedRows)
    });
    c.$on(c.name + "-set-selected-rows", function(b, c) {
        c && Array.isArray(c) && f(function() {
            for (var b = a.options.selectedRows.length = 0; b < c.length; b++) c[b][a.options.rowFields.selected] = !0, a.options.selectedRows.push(c[b]);
            0 < c.length ? (a.options.selectedRow = c[c.length - 1], a.callAfterSelect(a.options.selectedRow)) : a.options.selectedRow = null;
            a.refresh(null, null, !0)
        }, 1)
    });
    c.$on(c.name + "-move-column", function(b, c, e) {
        a.moveColumn(c, e)
    });
    c.$on(c.name + "-move-row", function(b, c, e, f, g) {
        a.moveRow(c, e, f, g)
    });
    c.$watch("options",
        function(b, c) {
            b !== c && (a.updateOptions(b), a.updateLayout())
        }, !0);
    c.$watch("allowCellFocus", function(b, c) {
        b !== c && (a.options.allowCellFocus = b)
    });
    c.$watch("allowColumnReorder", function(b, c) {
        b !== c && (a.options.allowColumnReorder = b)
    });
    c.$watch("allowFilter", function(b, c) {
        b !== c && (a.options.allowFilter = b)
    });
    c.$watch("allowFocus", function(b, c) {
        b !== c && (a.options.allowFocus = b)
    });
    c.$watch("allowDrag", function(b, c) {
        b !== c && (a.options.allowDrag = b, a.updateView())
    });
    c.$watch("allowDrop", function(b, c) {
        b !== c && (a.options.allowDrop =
            b, a.updateView())
    });
    c.$watch("autoExpand", function(b, c) {
        b !== c && (a.options.autoExpand = b)
    });
    c.$watch("controlStyle", function(b, c) {
        b !== c && a.updateControlStyle(b)
    });
    c.$watch("displayMode", function(b, c) {
        b !== c && (a.options.displayMode = b, a.updateLayout())
    });
    c.$watch("editorSettings", function(b, c) {
        b !== c && a.updateEditorSettings(b)
    });
    c.$watch("enabled", function(b, c) {
        b !== c && (a.options.enabled = b, a.updateView(), a.options.paging.enabled && a.options.paging.showControlPanel && a.updatePaginationPanel(), a.callEnabledChanged(b))
    });
    c.$watch("expandingColumnIndex", function(b, c) {
        b !== c && (a.options.expandColIndex = b)
    });
    c.$watch("fields", function(b, c) {
        b !== c && (a.updateDataFields(b), a.UpdateData())
    });
    c.$watch("fillSpace", function(b, c) {
        b !== c && (a.options.fillSpace = b)
    });
    c.$watch("gridLines", function(b, c) {
        b !== c && (a.options.gridLines = b, a.updateView())
    });
    c.$watch("hoverSelection", function(b, c) {
        b !== c && (a.options.hoverSelection = b)
    });
    c.$watch("indent", function(b, c) {
        b !== c && (a.options.indent = b, a.updateLayout())
    });
    c.$watch("rowHeight", function(b,
        c) {
        b !== c && (a.options.rowHeight = b, a.updateLayout())
    });
    c.$watch("rowIcon", function(b, c) {
        b !== c && (a.options.rowIcon = b, a.updateLayout())
    });
    c.$watch("labelEdit", function(b, c) {
        b !== c && (a.options.labelEdit = b)
    });
    c.$watch("paging", function(b, c) {
        b !== c && (a.updatePaging(b), a.resetPageNumber(), a.updateCurrentLayout())
    }, !0);
    c.$watch("pathSeparator", function(b, c) {
        b !== c && (a.options.pathSeparator = b)
    });
    c.$watch("rtl", function(b, c) {
        b !== c && (a.options.rtl = b, a.updateLayout())
    });
    a.resetSelection = function() {
        switch (a.options.selectionMode) {
            case "none":
                a.clearPrevSelection();
                break;
            default:
                a.clearPrevSelection(a.rowSelection())
        }
    };
    c.$watch("selectionMode", function(b, c) {
        b !== c && (a.options.selectionMode = b, a.resetSelection())
    });
    c.$watch("showExpandBoxes", function(b, c) {
        b !== c && (a.options.showExpandBoxes = b, a.updateLayout())
    });
    c.$watch("showFooter", function(b, c) {
        b !== c && (a.options.showFooter = b, a.updateLayout())
    });
    c.$watch("showHeader", function(b, c) {
        b !== c && (a.options.showHeader = b, a.updateLayout())
    });
    c.$watch("showIcons", function(b, c) {
        b !== c && (a.options.showIcons = b, a.updateLayout())
    });
    c.$watch("selectedRow", function(b, c) {
        b !== c && (c && (c[a.options.rowFields.selected] = !1), a.options.selectedRow = b, a.callAfterSelect(b))
    });
    this.sortComparer = this.sortColumn = null;
    c.$watch("sorting", function(b, c) {
        b !== c && (a.options.sorting = b)
    });
    c.$on(c.name + "-sort", function(b, c, e, f) {
        a.sort(c, e, f)
    });
    this.sort = function(b, c, e) {
        a.sortColumn = b;
        a.sortComparer = e;
        if ("ascending" == c || "descending" == c || "none" == c) a.options.sorting = c;
        a.updateCurrentLayout();
        a.callChange()
    };
    this.getCellIndexInCollection = function(b, c, e) {
        var f = -1;
        if (b)
            for (var g = 0; g < b.length; g++)
                if (void 0 == b[g][a.options.cellFields.cid]) {
                    f = c;
                    break
                } else if (b[g][a.options.cellFields.cid] == e) {
            f = g;
            break
        }
        return f
    };
    this.isSortingAllowed = function() {
        return "ascending" == a.options.sorting || "descending" == a.options.sorting
    };
    this.applySorting = function(b) {
        if (b && (!a.sortColumn || 0 != a.sortColumn[a.options.columnFields.visible])) {
            var c = a.getColumnCurrentIndex(a.sortColumn),
                e = 0 <= c ? c : a.options.expandColIndex;
            if (e < a.columnList.length) {
                var f = a.columnList[e][a.options.columnFields.id];
                a.sortColumn && a.sortColumn[a.options.columnFields.comparer] ? b.sort(a.sortColumn[a.options.columnFields.comparer]) : a.sortComparer ? b.sort(a.sortComparer) : a.isSortingAllowed() && b.sort(function(b, c) {
                    var d = null,
                        g = null;
                    if (b[a.options.rowFields.cells]) {
                        var k = a.getCellIndexInCollection(b[a.options.rowFields.cells], e, f);
                        0 <= k && ((d = b[a.options.rowFields.cells][k][a.options.cellFields.value]) || (d = b[a.options.rowFields.cells][k][a.options.cellFields.text]), l.isObject(d) && (d = d.value ? d.value : d.text))
                    }
                    c[a.options.rowFields.cells] &&
                        (k = a.getCellIndexInCollection(c[a.options.rowFields.cells], e, f), 0 <= k && ((g = c[a.options.rowFields.cells][k][a.options.cellFields.value]) || (g = c[a.options.rowFields.cells][k][a.options.cellFields.text]), l.isObject(g) && (g = g.value ? g.value : g.text)));
                    d = void 0 != d ? d : null;
                    g = void 0 != g ? g : null;
                    switch (a.options.sorting) {
                        case "ascending":
                            if (d < g) return -1;
                            if (d > g) return 1;
                            break;
                        case "descending":
                            if (d > g) return -1;
                            if (d < g) return 1;
                            break;
                        default:
                            return 0
                    }
                })
            }
        }
    };
    var F = function(b) {
        if (b) {
            var c = l.isFieldAvailable(b.general, "iui-treegrid-column"),
                e;
            e = (e = b.header) ? {
                content: l.isFieldAvailable(e.content, "iui-treegrid-column-header-cell-content"),
                disabled: l.isFieldAvailable(e.disabled, "iui-treegrid-column-header-disabled"),
                normal: l.isFieldAvailable(e.normal, "iui-treegrid-column-header"),
                hovered: l.isFieldAvailable(e.hovered, "iui-treegrid-column-header-hovered"),
                selected: l.isFieldAvailable(e.selected, "iui-treegrid-column-header-selected")
            } : a.options.controlStyle.column.header;
            b = (b = b.footer) ? {
                content: l.isFieldAvailable(b.content, "iui-treegrid-column-footer-cell-content"),
                disabled: l.isFieldAvailable(b.disabled, "iui-treegrid-column-footer-disabled"),
                normal: l.isFieldAvailable(b.normal, "iui-treegrid-column-footer"),
                hovered: l.isFieldAvailable(b.hovered, "iui-treegrid-column-footer-hovered"),
                selected: l.isFieldAvailable(b.selected, "iui-treegrid-column-footer-selected")
            } : a.options.controlStyle.column.footer;
            return {
                general: c,
                header: e,
                footer: b
            }
        }
        return a.options.controlStyle.column
    };
    this.getExpandBoxStyle = function(b) {
        return b ? {
            general: l.isFieldAvailable(b.general, "iui-treegrid-expand-box"),
            animated: l.isFieldAvailable(b.animated, "iui-treegrid-expand-box-load"),
            expanded: l.isFieldAvailable(b.expanded, "iui-treegrid-expand-box-open"),
            collapsed: l.isFieldAvailable(b.collapsed, "iui-treegrid-expand-box-close")
        } : a.options.controlStyle.row.expandBox
    };
    var ub = function(b) {
            if (b) {
                var c;
                c = (c = b.general) ? {
                    disabled: l.isFieldAvailable(c.disabled, "iui-treegrid-row-disabled"),
                    focused: l.isFieldAvailable(c.focused, "iui-treegrid-row-focused"),
                    normal: l.isFieldAvailable(c.normal, "iui-treegrid-row"),
                    hovered: l.isFieldAvailable(c.hovered,
                        "iui-treegrid-row-hovered"),
                    selected: l.isFieldAvailable(c.selected, "iui-treegrid-row-selected")
                } : a.options.controlStyle.row.general;
                var e;
                var f = b.checkBox;
                f ? (e = l.isFieldAvailable(f.general, "iui-checkbox"), f = (f = f.box) ? {
                    general: l.isFieldAvailable(f.general, "iui-checkbox-box"),
                    disabled: l.isFieldAvailable(f.disabled, "iui-checkbox-disabled"),
                    checked: l.isFieldAvailable(f.checked, "iui-checkbox-checked"),
                    indeterminate: l.isFieldAvailable(f.indeterminate, "iui-checkbox-indeterminate"),
                    unchecked: l.isFieldAvailable(f.unchecked,
                        "iui-checkbox-unchecked")
                } : a.options.controlStyle.row.checkBox.box, e = {
                    general: e,
                    box: f
                }) : e = a.options.controlStyle.row.checkBox;
                f = a.getExpandBoxStyle(b.expandBox);
                b = (b = b.cell) ? {
                    content: l.isFieldAvailable(b.content, "iui-treegrid-row-cell-content"),
                    general: l.isFieldAvailable(b.general, "iui-treegrid-row-cell"),
                    disabled: l.isFieldAvailable(b.disabled, "iui-treegrid-row-cell-disabled"),
                    focused: l.isFieldAvailable(b.focused, "iui-treegrid-row-cell-focused"),
                    normal: l.isFieldAvailable(b.normal, "iui-treegrid-row-cell"),
                    hovered: l.isFieldAvailable(b.hovered, "iui-treegrid-row-cell-hovered"),
                    selected: l.isFieldAvailable(b.selected, "iui-treegrid-row-cell-selected")
                } : a.options.controlStyle.row.cell;
                return {
                    general: c,
                    checkBox: e,
                    expandBox: f,
                    cell: b
                }
            }
            return a.options.controlStyle.row
        },
        z = function(b) {
            return b ? {
                content: l.isFieldAvailable(b.content, "iui-treegrid-row-cell-content"),
                general: l.isFieldAvailable(b.general, "iui-treegrid-row-cell"),
                disabled: l.isFieldAvailable(b.disabled, "iui-treegrid-row-cell-disabled"),
                focused: l.isFieldAvailable(b.focused,
                    "iui-treegrid-row-cell-focused"),
                normal: l.isFieldAvailable(b.normal, "iui-treegrid-row-cell"),
                hovered: l.isFieldAvailable(b.hovered, "iui-treegrid-row-cell-hovered"),
                selected: l.isFieldAvailable(b.selected, "iui-treegrid-row-cell-selected")
            } : a.options.controlStyle.cell
        };
    this.updateControlStyle = function(b) {
        a.options.controlStyle = b ? {
            general: l.isFieldAvailable(b.general, "iui-treegrid"),
            column: F(b.column),
            row: ub(b.row),
            cell: z(b.cell)
        } : {
            general: l.isFieldAvailable(a.defaultStyle.general, "iui-treegrid"),
            column: F(a.defaultStyle.column),
            row: ub(a.defaultStyle.row),
            cell: z(a.defaultStyle.cell)
        }
    };
    this.getCurrentColumnStyle = function(b, c, e) {
        var f = a.options.controlStyle.column;
        b && b.style && (f = b.style);
        b = a.options.controlStyle.column.body;
        var g = f.body;
        switch (c) {
            case "header":
                b = a.options.controlStyle.column.header;
                g = f.header;
                break;
            case "footer":
                b = a.options.controlStyle.column.footer, g = f.footer
        }
        if (e) switch (e) {
            case "content":
                return g && g.content ? g.content : b.content;
            case "disabled":
                return g && g.disabled ? g.disabled : b.disabled;
            case "hovered":
                return g &&
                    g.hovered ? g.hovered : b.hovered;
            case "selected":
                return g && g.selected ? g.selected : b.selected;
            default:
                return g && g.normal ? g.normal : b.normal
        } else return c ? g ? g : b : f ? f : a.options.controlStyle.column
    };
    this.getCurrentRowStyle = function(b, c) {
        var e = a.options.controlStyle.row;
        if (b) switch (b[a.options.rowFields.style]) {
            case "initial":
                break;
            case "parent":
                return a.getCurrentRowStyle(a.getParent(b), c);
            default:
                null != b.style && (e = b.style)
        }
        if (c) {
            if (l.isString(e.general)) return e.general;
            switch (c) {
                case "disabled":
                    return e.general &&
                        e.general.disabled ? e.general.disabled : a.options.controlStyle.row.general.disabled;
                case "focused":
                    return e.general && e.general.focused ? e.general.focused : a.options.controlStyle.row.general.focused;
                case "hovered":
                    return e.general && e.general.hovered ? e.general.hovered : a.options.controlStyle.row.general.hovered;
                case "selected":
                    return e.general && e.general.selected ? e.general.selected : a.options.controlStyle.row.general.selected;
                default:
                    return e.general && e.general.normal ? e.general.normal : a.options.controlStyle.row.general.normal
            }
        } else return e ?
            e : a.options.controlStyle.row
    };
    this.getDefaultCellContentClass = function() {
        return "iui-treegrid-row-cell-content"
    };
    this.getDefaultCellLabelClass = function() {
        return "iui-treegrid-row-cell-label"
    };
    this.getDefaultCellBorderClass = function() {
        return "iui-treegrid-lines-both"
    };
    this.getCurrentCellStyle = function(b, c, e) {
        var f = a.options.controlStyle.row.cell;
        if (c) switch (c[a.options.cellFields.style]) {
            case "initial":
                break;
            case "parent":
                b && (f = z(a.getCurrentRowStyle(b)));
                break;
            default:
                c.style && (f = c.style)
        }
        if (e) switch (e) {
            case "content":
                return f.content ?
                    f.content : a.options.controlStyle.cell.content;
            case "disabled":
                return f.disabled ? f.disabled : a.options.controlStyle.cell.disabled;
            case "focused":
                return f.focused ? f.focused : a.options.controlStyle.cell.focused;
            case "hovered":
                return f.hovered ? f.hovered : a.options.controlStyle.cell.hovered;
            case "selected":
                return f.selected ? f.selected : a.options.controlStyle.cell.selected;
            default:
                return f.normal ? f.normal : a.options.controlStyle.cell.normal
        } else return f ? f : a.options.controlStyle.row.cell
    }
}]).directive("iuiTreegrid", ["$compile", "$timeout", "$interval", "IntegralUIInternalService", "IntegralUIDragDrop", "$window", "IntegralUIListCtrlService", function(c, e, f, g, u, l, ia) {
    return {
        restrict: "EA",
        controller: "IntegralUITreeGridController",
        transclude: !0,
        replace: !0,
        template: '<div class="iui-treegrid" data-element="treegrid"><div class="iui-treegrid-block"></div></div>',
        scope: {
            allowAnimation: "=",
            allowCellFocus: "=",
            allowColumnReorder: "=",
            allowFilter: "=",
            allowFocus: "=",
            allowDrag: "=",
            allowDrop: "=",
            animationSpeed: "=",
            autoExpand: "=",
            columns: "=",
            controlStyle: "=",
            displayMode: "@",
            editorSettings: "=",
            enabled: "=",
            expandingColumnIndex: "=",
            fields: "=",
            fillSpace: "=",
            gridLines: "=",
            hoverSelection: "=",
            indent: "=",
            labelEdit: "=",
            name: "@",
            options: "=?",
            paging: "=?",
            pathSeparator: "@",
            rowHeight: "=",
            rowIcon: "=",
            rows: "=",
            selectedIndex: "=",
            selectedRow: "=",
            selectionMode: "@",
            showExpandBoxes: "=",
            showFooter: "=",
            showHeader: "=",
            showIcons: "=",
            sorting: "@",
            afterCollapse: "&",
            afterEdit: "&",
            afterExpand: "&",
            afterLabelEdit: "&",
            afterSelect: "&",
            beforeCollapse: "&",
            beforeEdit: "&",
            beforeExpand: "&",
            beforeLabelEdit: "&",
            beforeSelect: "&",
            cellClick: "&",
            cellHover: "&",
            cellvalueChanged: "&",
            cellvalueChanging: "&",
            change: "&",
            clearColumns: "&",
            clearRows: "&",
            columnAdded: "&",
            columnAdding: "&",
            columnClick: "&",
            columnDblclick: "&",
            columnHover: "&",
            columnPoschanging: "&",
            columnPoschanged: "&",
            columnRemoved: "&",
            columnRemoving: "&",
            columnRightclick: "&",
            columnSizechanged: "&",
            dragDrop: "&",
            dragEnter: "&",
            dragLeave: "&",
            dragOver: "&",
            enabledChanged: "&",
            events: "=?",
            gotFocus: "&",
            keyDown: "&",
            keyPress: "&",
            keyUp: "&",
            loadComplete: "&",
            lostFocus: "&",
            rowAdded: "&",
            rowAdding: "&",
            rowClick: "&",
            rowDblclick: "&",
            rowHover: "&",
            rowRemoved: "&",
            rowRemoving: "&",
            rowRightclick: "&",
            scrollposChanged: "&",
            selectionChanged: "&",
            updateComplete: "&"
        },
        link: function(k, p, cc, a, Fc) {
            var X = this,
                W = p.children().eq(0),
                I = angular.element('<div class="iui-scrollbar-vertical"><div class="iui-scroll-button-thumb-vertical"></div></div>'),
                A = angular.element('<div class="iui-scrollbar-horizontal"><div class="iui-scroll-button-thumb-horizontal"></div></div>'),
                ya = angular.element('<div class="iui-scrollbar-corner"></div>'),
                Ha = null,
                za = null,
                Aa = null,
                tb = !1,
                B = angular.element('<input type="text" class="iui-label-editor" draggable="false" />');
            a.labelEditStatus = function(a) {
                if (void 0 != a) tb = a;
                else return tb
            };
            var $a = function() {
                var b = "iui-treegrid-block";
                a.options.showStatusIcons && (b += " " + b + "-shift-left");
                a.options.rtl && (b += " " + b + "-rtl");
                return b
            };
            k.$on("$destroy", function(a) {
                Ba && (e.cancel(Ba), Ba = null);
                ja && ja.unbind("mousedown");
                p.unbind("click dblclick dragenter dragleave dragend drop keydown mousedown mouseleave mousemove mousewheel scroll touchstart touchmove touchend");
                angular.element(l).unbind("dragenter", Gc);
                angular.element(l).unbind("dragover", Hc);
                angular.element(l).unbind("dragend", Ic);
                angular.element(l).unbind("keyup", Jc);
                angular.element(l).unbind("mousemove", Kc);
                angular.element(l).unbind("mousedown", Lc);
                angular.element(l).unbind("mouseup", Mc);
                B && B.unbind("blur focus keydown mousedown");
                Nc();
                v && v.$destroy();
                x && x.$destroy()
            });
            a.dragIcon = document.createElement("img");
            a.dragIcon.width = 1;
            p.append(a.getDropMarkWindow());
            a.dropMark();
            var ra = function() {
                Ha && (e.cancel(Ha),
                    Ha = null)
            };
            a.addDropMark = function() {
                var b;
                b = p[0];
                for (var c = null; b;) {
                    if (b === document.getElementsByTagName("body")[0]) {
                        c = b;
                        break
                    }
                    b = b.offsetParent
                }
                if (b = c) angular.element(b).append(a.getDropMarkWindow()), a.dropMark()
            };
            a.removeDropMark = function() {
                a.getDropMarkWindow().remove()
            };
            a.isDropInRange = function(b) {
                b = a.getMousePos(b);
                var c = p[0].getBoundingClientRect();
                b.x -= angular.element(l)[0].pageXOffset;
                b.y -= angular.element(l)[0].pageYOffset;
                var n = c.top + C,
                    c = c.bottom - N;
                H && A && (c -= A[0].offsetHeight);
                return b.y < n ||
                    b.y > c ? !1 : !0
            };
            var F = angular.element('<div style="opacity:0.75;position:absolute;z-index:999"></div>'),
                ub = function() {
                    F && (F.remove(), F.css("top", "-9999999px"), F.css("left", "-9999999px"))
                };
            a.getCellElemFromRow = function(b) {
                return b && (b = a.getElemFromRow(b)) ? a.getChildElement(b, "cell") : null
            };
            a.openEditor = function(b, c) {
                if (b) switch (b.type) {
                    case "cell":
                        c || (c = a.getColumnById(b[a.options.cellFields.cid]));
                        if (!c) {
                            var n = a.getCellColumnIndex(b),
                                r = a.columnsObj.getList();
                            r && 0 <= n && n < r.length && (c = r[n])
                        }
                        if (c) {
                            var n =
                                a.getCellType(b, a.getColumnRealIndex(c)),
                                r = a.getCellRowIndex(b),
                                w = a.getCellColumnIndex(b);
                            if (r = a.getElemFromCell(r, w, c[a.options.columnFields.fixed])) switch (n) {
                                case "checkbox":
                                    break;
                                case "combobox":
                                    break;
                                case "incell":
                                    a.openInCellEditor(r, b, c);
                                    break;
                                case "dropdown":
                                    a.openDropDownEditor(r, b, c);
                                    break;
                                default:
                                    0 != b[a.options.cellFields.allowEdit] && vb(null, r, 0)
                            }
                        }
                }
            };
            a.closeEditor = function(b, c, n) {
                if (b) switch (b.type) {
                    case "cell":
                        if (c || (c = a.getColumnById(b[a.options.cellFields.cid])), c) switch (a.getCellType(b,
                            a.getColumnRealIndex(c))) {
                            case "incell":
                                a.closeActiveEditor(b);
                                break;
                            case "dropdown":
                                a.closeActiveEditor(b)
                        } else a.closeActiveEditor()
                } else a.closeActiveEditor();
                n || "optimal" != a.options.displayMode || a.updateView();
                d = null
            };
            var z = null,
                b = !1,
                d = null,
                G = null,
                h = angular.element('<span class="iui-edit-mark"></span>');
            a.openInCellEditor = function(m, q, n) {
                b && a.closeActiveEditor(q, !0);
                t();
                if (q && n && (d = q, n = '<div ng-include="' + n[a.options.columnFields.editorTemplate] + '"></div>', z = angular.element('<div class="iui-incell-editor"></div>'),
                        z.append(c(n)(k.$parent)), 0 != a.callBeforeEdit(q))) {
                    m.children().eq(0).append(z);
                    b = !0;
                    G = "incell";
                    sb();
                    z.bind("mousedown", function(a) {
                        a.stopPropagation()
                    });
                    z.bind("mouseup", function(a) {
                        a.stopPropagation()
                    });
                    z.bind("click", function(a) {
                        a.stopPropagation()
                    });
                    z.bind("keydown", function(b) {
                        switch (b.keyCode) {
                            case 27:
                                a.closeActiveEditor(d)
                        }
                        b.stopPropagation()
                    });
                    z.bind("keypress", function(a) {
                        a.stopPropagation()
                    });
                    z.bind("keyup", function(a) {
                        a.stopPropagation()
                    });
                    var r = e(function() {
                        var a = g.getPadding(m[0]),
                            b =
                            parseInt(getComputedStyle(m[0]).width, 10) - (a.left + a.right),
                            a = parseInt(getComputedStyle(m[0]).height, 10) + 2;
                        z.css("width", b + "px");
                        z.css("height", a + "px");
                        z.css("top", m[0].offsetTop + "px");
                        k.$apply();
                        z.children && 1 == z.children().length && (b = z.children().eq(0), b.children && 1 == b.children().length && b.children().eq(0).css("height", a + "px"));
                        e.cancel(r)
                    }, 1)
                }
            };
            a.openDropDownEditor = function(m, q, n) {
                b && a.closeActiveEditor(q, !0);
                t();
                if (q && n && (d = q, n = '<div ng-include="' + n[a.options.columnFields.editorTemplate] + '"></div>',
                        z = angular.element('<div class="iui-dropdown-editor"></div>'), z.append(c(n)(k.$parent)), 0 != a.callBeforeEdit(q))) var r = e(function() {
                    angular.element(Ua).append(z);
                    z.bind("mousedown", function(a) {
                        a.stopPropagation()
                    });
                    z.bind("mouseup", function(a) {
                        a.stopPropagation()
                    });
                    z.bind("click", function(a) {
                        a.stopPropagation()
                    });
                    b = !0;
                    G = "dropdown";
                    var a = m[0].getBoundingClientRect(),
                        c = angular.element(l)[0].pageXOffset,
                        q = angular.element(l)[0].pageYOffset,
                        n = e(function() {
                            var b = g.getPadding(m[0]),
                                b = parseInt(getComputedStyle(m[0]).width,
                                    10) + (b.left + b.right),
                                r = g.getPadding(z[0]),
                                b = b - (r.left + r.right),
                                r = parseInt(getComputedStyle(z[0]).width, 10);
                            b < r && (b = r);
                            r = a.right - (b + 3) + c;
                            z.css("top", a.bottom + q + "px");
                            z.css("left", r + "px");
                            z.css("width", b + "px");
                            k.$apply();
                            e.cancel(n)
                        }, 1);
                    e.cancel(r)
                }, 1)
            };
            a.closeActiveEditor = function(c, q) {
                b = !1;
                t();
                z && z.remove();
                G = d = null;
                q || a.callAfterEdit(c)
            };
            var t = function() {
                    z && z.unbind("click keydown keypress keyup mousedown mouseup")
                },
                Jb = function(a, b) {
                    a && (h.addClass("iui-edit-mark iui-edit-mark-" + b), a.append(h), h.css("left",
                        a[0].offsetLeft + a[0].offsetWidth - h[0].offsetWidth - 2 + "px"), h.css("top", a[0].offsetTop + (a[0].offsetHeight - h[0].offsetHeight) / 2 + "px"))
                },
                sb = function() {
                    h && ("dropdown" != G || "dropdown" == G && !b) && (h.removeAttr("class"), h.remove())
                },
                dc = null,
                Ga = angular.element('<div class="iui-dropdown-mark"><span></span></div>'),
                ec = function(a, b) {
                    !a || ab && !b || (a.append(Ga), Ga.css("top", a[0].offsetTop + "px"), Ga.css("left", a[0].offsetLeft + a[0].offsetWidth - Ga[0].offsetWidth + "px"), Ga.css("height", getComputedStyle(a[0]).height))
                },
                Ia =
                function(a) {
                    !Ga || ab && !a || Ga.remove()
                };
            a.getCellType = function(b, c) {
                var n = null,
                    r = "label";
                b && (n = a.getColumnById(b[a.options.cellFields.cid]));
                !n && 0 <= c && c < a.columnList.length && (n = a.columnList[c]);
                n && (r = n[a.options.columnFields.editorType]);
                return r
            };
            var Ua = g.getBodyElem(p[0]),
                wb = g.getUniqueId(4),
                ca = null,
                ab = !1,
                xb = 0,
                Cd = function(b, q, n) {
                    if (Ua && b.items && 0 < b.items.length) {
                        b = g.getUniqueId(4);
                        var r = c('<iui-list name="' + b + '" style="position:absolute;top:-99px;height:100px" items="data[' + q + "].column." + a.options.columnFields.editorSettings +
                            '.items"></iui-list>')(v);
                        angular.element(Ua).append(r);
                        ia.updateLayout(b);
                        var w = e(function() {
                            if (0 < r.children().length) {
                                var a = r.children().eq(0);
                                0 < a.children().length && (xb = angular.element(a.children().eq(0))[0].offsetHeight, n && (n.avgItemHeight = xb))
                            }
                            r.remove();
                            e.cancel(w)
                        }, 1)
                    }
                },
                Va = null,
                Kb = function(b, q, n, r) {
                    var w = a.getCell(n, r);
                    if (w != dc && (dc = w, ca && ca.remove(), Va && Va.$destroy(), Ua)) {
                        Va = k.$new();
                        Va.data = a.columnList[r];
                        d = w;
                        var f = '<iui-list name="' + wb + '" style="position:absolute;"',
                            f = f + (' items="data.' +
                                a.options.columnFields.editorSettings + '.items"'),
                            f = f + (' item-icon="data.' + a.options.columnFields.editorSettings + '.itemIcon"'),
                            f = f + (' show-icons="data.' + a.options.columnFields.editorSettings + '.showIcons"'),
                            f = f + (' checkbox-settings="data.' + a.options.columnFields.editorSettings + '.checkBoxSettings"'),
                            f = f + (' show-check-boxes="data.' + a.options.columnFields.editorSettings + '.checkBoxSettings.showCheckBoxes"');
                        ca = c(f + (' nav-selection="false" before-select="onCellValueChanging(e, ' + n + ", " + r + ')" after-select="onCellValueChanged(e, ' +
                            n + ", " + r + ')"></iui-list>'))(Va);
                        xb = 0;
                        bb && r < bb.length && (xb = bb[r].avgItemHeight);
                        var Bd = e(function() {
                            angular.element(Ua).append(ca);
                            var c = b[0].getBoundingClientRect(),
                                r = angular.element(l)[0].pageXOffset,
                                n = angular.element(l)[0].pageYOffset,
                                n = c.bottom + n - 1,
                                c = c.left + r,
                                r = b.children().eq(0),
                                d = g.getPadding(r[0]),
                                r = parseInt(getComputedStyle(r[0]).width, 10) + (d.left + d.right),
                                d = g.getPadding(ca[0]),
                                r = r - (d.left + d.right);
                            void 0 != q.dropDownWidth && r < q.dropDownWidth && (r = q.dropDownWidth);
                            d = void 0 != q.dropDownHeight ? q.dropDownHeight :
                                100;
                            void 0 != q.maxDropDownItems && (d = xb * q.maxDropDownItems);
                            ca.css("top", n + "px");
                            ca.css("left", c + "px");
                            ca.css("width", r + "px");
                            ca.css("height", d + "px");
                            ca.css("z-index", "999");
                            w && w[a.options.cellFields.value] && ia.selectedItem(wb, w[a.options.cellFields.value]);
                            ia.updateLayout(wb);
                            var f = e(function() {
                                if (w && w[a.options.cellFields.value]) {
                                    ia.ensureVisible(wb, w[a.options.cellFields.value]);
                                    var b = e(function() {
                                        ia.focus(wb, w[a.options.cellFields.value]);
                                        e.cancel(b)
                                    }, 1)
                                }
                                e.cancel(f)
                            }, 10);
                            Ga && (Ia(!0), ec(b, !0));
                            ab = !0;
                            Dd();
                            e.cancel(Bd)
                        }, 1)
                    }
                };
            a.removeDropDownList = function(a) {
                ca && (dc = null, ca.remove(), ab = !1, a || Ia(), ca.unbind("keydown"));
                Va && Va.$destroy();
                d = null
            };
            var Dd = function() {
                    ca.bind("keydown", function(b) {
                        switch (b.keyCode) {
                            case 27:
                                a.removeDropDownList(), Ia()
                        }
                    })
                },
                vb = function(b, c, n) {
                    a.options.labelEdit && (void 0 === n && (n = 500), za = e(function() {
                        if (za) var a = e(function() {
                            Lb(b, c, !0);
                            e.cancel(a)
                        }, n);
                        e.cancel(za)
                    }, n / 3))
                },
                Mb = function() {
                    za && (e.cancel(za), za = null)
                },
                cb = null,
                db = null,
                Lb = function(b, c, n) {
                    if (a.dragDropStatus()) g =
                        B[0].value, a.labelEditStatus(!1), B.unbind("blur focus keydown mousedown"), B.remove(), db = cb = null;
                    else {
                        var r = a.getRowFromChildElem(c);
                        if (r) {
                            var w = a.getRowCurrentIndex(r),
                                d = a.getIndexFromElem(c),
                                f = a.getCellObject(w, d),
                                g = "",
                                g = c.children().eq(0);
                            if (f)
                                if (n) {
                                    if (0 != a.callBeforeLabelEdit(f)) {
                                        cb = r;
                                        db = f;
                                        a.labelEditStatus(!0);
                                        B.unbind("blur focus keydown mousedown");
                                        b = parseInt(getComputedStyle(c[0]).width, 10) - 4;
                                        n = parseInt(getComputedStyle(c[0]).height, 10) - 3;
                                        B.css("top", c[0].offsetTop + "px");
                                        B.css("left", c[0].offsetLeft +
                                            "px");
                                        B.css("width", b + "px");
                                        B.css("height", n + "px");
                                        g.append(B);
                                        B[0].value = f[a.options.cellFields.text];
                                        B.bind("keydown", function(b) {
                                            switch (b.keyCode) {
                                                case 13:
                                                    f[a.options.cellFields.text] = B[0].value ? B[0].value : "null";
                                                    Lb(b, c, !1);
                                                    break;
                                                case 27:
                                                    Lb(b, c, !1)
                                            }
                                            b.stopPropagation()
                                        });
                                        B.bind("focus", function(b) {
                                            var c = angular.element(this);
                                            a.callGotFocus(b, cb, db, !0, c[0].value)
                                        });
                                        B.bind("blur", function(a) {
                                            Lb(a)
                                        });
                                        B.bind("mousedown", function(a) {
                                            a.stopPropagation()
                                        });
                                        var h = e(function() {
                                            B[0].focus();
                                            B[0].select();
                                            e.cancel(h)
                                        }, 10)
                                    }
                                } else g = B[0].value, a.labelEditStatus(!1), B.unbind("blur focus keydown mousedown"), B.remove(), a.updateView(), a.updateFocus(w, d), a.callAfterLabelEdit(f), a.callLostFocus(b, r, f, !0, g), db = cb = null
                        } else g = B[0].value, a.labelEditStatus(!1), B.unbind("blur focus keydown mousedown"), B.remove(), a.callAfterLabelEdit(), a.updateView(), a.callLostFocus(b, cb, db, !0, g), db = cb = null
                    }
                },
                Oc = function(b) {
                    var c = "";
                    if (a.options.showExpandBoxes) {
                        var n = a.defaultStyle.row.expandBox.general;
                        b[a.options.rowFields.style] &&
                            b[a.options.rowFields.style].expandBox && b[a.options.rowFields.style].expandBox.general != n ? n += " " + b[a.options.rowFields.style].expandBox.general : a.options.controlStyle.row.expandBox.general != n && (n += " " + a.options.controlStyle.row.expandBox.general);
                        var r = a.getCurrentRowStyle(b),
                            r = a.getExpandBoxStyle(r.expandBox);
                        if (a.isThereChildRows || b && b[a.options.rowFields.hasChildren]) c = n;
                        n = b[a.options.rowFields.hasChildren] && (a.isThereVisibleChildren(b) || !b[a.options.rowFields.rows] || b[a.options.rowFields.rows] &&
                            0 == b[a.options.rowFields.rows].length);
                        b && (n || a.isThereVisibleChildren(b)) && (0 <= a.options.loadRows.indexOf(b) ? c += " " + r.animated : (c = b[a.options.rowFields.hasChildren] && void 0 === b[a.options.rowFields.expanded] ? c + (" " + r.expanded) : !1 !== b[a.options.rowFields.expanded] ? c + (" " + r.collapsed) : c + (" " + r.expanded), !0 === a.options.rtl && (c += "-rtl"), a.options.enabled && a.isRowEnabled(b) || (c += "-disabled")))
                    }
                    return c
                };
            p.bind("mousemove", function(b) {
                if (a.options.enabled && 0 === b.button && ma && O) {
                    a.getColumnCurrentIndex(O);
                    var c = a.getMousePos(b),
                        n = c.y + 16,
                        c = c.x + 20;
                    sa.empty();
                    sa.append("<span>" + O[a.options.columnFields.headerText] + "</span>");
                    sa.css("top", n + "px");
                    sa.css("left", c + "px");
                    sa.css("display", "block");
                    Pc();
                    b.stopPropagation()
                }
            });
            var Tc = function() {
                    for (var b = 0, c = "none"; 3 > b;) {
                        if ((c = a.getRowElems(c)) && 0 < c.length)
                            for (var n = 0; n < c.length; n++) {
                                var r = angular.element(c[n]);
                                Qc(r);
                                for (var r = r.find("td"), w = 0; w < r.length; w++) {
                                    var d = angular.element(r[w]);
                                    Rc(a.getElement(d, "expandbox"));
                                    Sc(d)
                                }
                            }
                        b++;
                        c = 1 == b ? "left" : "right"
                    }
                },
                Nc = function() {
                    t();
                    for (var b = 0, c = "none"; 3 > b;) {
                        var n = a.getRowElems(c);
                        if (n && 0 < n.length)
                            for (var r = 0; r < n.length; r++) {
                                var w = angular.element(n[r]);
                                Qc(w);
                                for (var w = w.find("td"), d = 0; d < w.length; d++) {
                                    var e = angular.element(w[d]);
                                    Rc(a.getElement(e, "expandbox"));
                                    Sc(e)
                                }
                            }
                        if ((n = a.getHeaderElem(c)) && 0 < n.length)
                            for (r = 0; r < n.length; r++)
                                for (w = angular.element(n[r]), w = w.find("td"), d = 0; d < w.length; d++)(e = angular.element(w[d])) && (c = a.getChildElement(e, "column-header-cell")) && (c = a.getContentElement(c, "filter-button")) && c.unbind("mousedown");
                        b++;
                        c = 1 == b ? "left" : "right"
                    }
                },
                Hd = function() {
                    Tc();
                    for (var b = 0, c = "none"; 3 > b;) {
                        if ((c = a.getRowElems(c)) && 0 < c.length)
                            for (var n, r = c.length - 1, w = 0; w <= r; w++) {
                                n = angular.element(c[w]);
                                Ed(n);
                                for (var d = n.find("td"), e = 0; e < d.length; e++) {
                                    var f = angular.element(d[e]);
                                    Fd(a.getElement(f, "expandbox"));
                                    Gd(f, a.getRowFromElem(n), e)
                                }
                            }
                        b++;
                        c = 1 == b ? "left" : "right"
                    }
                },
                ma = !1,
                O = null,
                eb = -1,
                Nb = function(b, c) {
                    if (b) {
                        var n = a.getColumnCurrentIndex(b),
                            r = a.getColumnWidth(b);
                        return a.isColumnWithFixedWidth(n) || 10 < c.x && c.x < r - 10
                    }
                    return !1
                },
                hc = function(b) {
                    b =
                        b.find("td");
                    for (var c = 0; c < b.length; c++) currentElem = angular.element(b[c]), currentElem.bind("click", function(b) {
                            if (a.options.enabled && 1 === b.which) {
                                var c = g.getClientMousePos(b, this),
                                    m = a.getColumnFromElem(this);
                                m && Nb(m, c) && a.callColumnClick(m, a.getMousePos(b))
                            }
                            b.stopPropagation()
                        }), currentElem.bind("dblclick", function(b) {
                            b.preventDefault();
                            if (a.options.enabled && 1 === b.which) {
                                var c = g.getClientMousePos(b, this),
                                    m = a.getColumnFromElem(this);
                                m && Nb(m, c) && a.callColumnDblClick(m, a.getMousePos(b))
                            }
                            b.stopPropagation()
                        }),
                        currentElem.bind("mouseenter", function(b) {
                            if (a.options.enabled && !Q && !na) {
                                var c = a.getColumnFromElem(this);
                                c && (a.hoverColumn = c, a.refresh(c), a.callColumnHover(c));
                                if (1 === b.which && ma && O && a.hoverColumn && 0 != a.hoverColumn[a.options.columnFields.allowDrop] && da && (da.remove(), a.hoverColumn != O)) {
                                    var m = angular.element(this);
                                    m.append(da);
                                    b = parseInt(getComputedStyle(m[0]).height, 10);
                                    c = parseInt(getComputedStyle(da[0]).height, 10);
                                    m = g.getPadding(m[0]);
                                    da.css("top", (b + m.top + m.bottom - c) / 2 + "px")
                                }
                            }
                        }), currentElem.bind("mouseleave",
                            function(b) {
                                !a.options.enabled || Q || na || (a.hoverColumn = null, (b = a.getColumnFromElem(this)) && a.refresh(b), da && da.remove(), Q || p.css("cursor", "default"))
                            }), currentElem.bind("mousemove", function(b) {
                            if (a.options.enabled) {
                                var c = angular.element(this);
                                if (1 === b.which && ma && O && a.hoverColumn && a.hoverColumn != O && 0 != a.hoverColumn[a.options.columnFields.allowDrop] && O[a.options.columnFields.fixed] == a.hoverColumn[a.options.columnFields.fixed]) c = parseInt(getComputedStyle(c[0]).width, 10), da.empty(), eb = -1, b.offsetX > c / 2 ?
                                    (eb = 2, da.append('<span class="iui-treegrid-column-reorder-mark-right"></span>'), da.css("left", "auto"), da.css("right", "0")) : (eb = 1, da.append('<span class="iui-treegrid-column-reorder-mark-left"></span>'), da.css("left", "0"), da.css("right", "auto"));
                                else {
                                    b = g.getClientMousePos(b, this);
                                    var c = parseInt(a.getIndexFromElem(this), 10),
                                        m = a.getColumnWidth(a.columnList[c]),
                                        q = 10;
                                    a.isFilteringAllowed(a.columnList[c]) && (q = 0);
                                    10 > b.x && !a.isColumnWithFixedWidth(c - 1) && Uc(c, "left") ? (p.css("cursor", "ew-resize"), Ca = "left") :
                                        b.x > m - q && !a.isColumnWithFixedWidth(c) && Uc(c, "right") ? (p.css("cursor", "ew-resize"), Ca = "right") : Q || (p.css("cursor", "default"), Ca = "none")
                                }
                            }
                        }), currentElem.bind("mouseup", function(b) {
                            if (a.options.enabled) {
                                if (1 === b.which && ma && O && a.hoverColumn && a.hoverColumn != O && 0 != a.hoverColumn[a.options.columnFields.allowDrop] && O[a.options.columnFields.fixed] == a.hoverColumn[a.options.columnFields.fixed] && 0 != a.callColumnPosChanging(O, a.hoverColumn)) {
                                    b = a.columnList[0];
                                    0 <= a.options.expandColIndex && a.options.expandColIndex <
                                        a.columnList.length && (b = a.columnList[a.options.expandColIndex]);
                                    var c = a.getColumnCurrentIndex(O),
                                        c = a.getColumnRealIndex(c),
                                        m = a.getColumnCurrentIndex(a.hoverColumn),
                                        m = a.getColumnRealIndex(m);
                                    c != m && (c < m ? 1 == eb && m-- : c > m && 2 == eb && m++, a.columnsObj.moveObject(c, m), a.updateColumnList(), b = a.getColumnCurrentIndex(b), b != a.options.expandColIndex && (a.options.expandColIndex = b), a.updateLayout(), a.callColumnPosChanged(O, a.hoverColumn))
                                }
                                O = null;
                                eb = -1;
                                Q = ma = !1;
                                p.css("cursor", "default")
                            }
                        }), currentElem.bind("mousedown",
                            function(b) {
                                if (a.options.enabled) {
                                    a.removeDropDownList();
                                    a.closeFilterWindow();
                                    a.closeEditor();
                                    g.getClientMousePos(b, this);
                                    var c = parseInt(a.getIndexFromElem(this), 10);
                                    if (0 === b.button && !Q) {
                                        var m = c,
                                            q = "none";
                                        0 <= c && c < a.columnList.length && (q = a.columnList[c][a.options.columnFields.fixed]);
                                        switch (Ca) {
                                            case "left":
                                                "right" == q ? m = c : (c = fc(m - 1, q)) ? (m = a.getColumnCurrentIndex(c), 0 <= m && m < a.columnList.length && (a.columnList[m][a.options.columnFields.fixed] != q ? (m = -1, Q = !1) : Q = !0)) : Q = !1;
                                                0 <= m && (Q = !0);
                                                break;
                                            case "right":
                                                "right" ==
                                                q ? (c = gc(m + 1, q)) ? (m = a.getColumnCurrentIndex(c), 0 <= m && m < a.columnList.length && (a.columnList[m][a.options.columnFields.fixed] != q ? (m = -1, Q = !1) : Q = !0)) : Q = !1 : (m = c, Q = !0)
                                        }!a.isColumnWithFixedWidth(m) && Q ? a.setColumnResizingParams(m, Ca, a.getMousePos(b).x) : Q = !1
                                    }
                                    if (!Q && (m = a.getColumnFromChildElem(this))) switch (q = g.getClientMousePos(b, this), Nb(m, q) && a.columnSelection(m), b.which) {
                                        case 1:
                                            a.options.allowColumnReorder && 0 != m[a.options.columnFields.allowDrag] && 0 == ma && (O = m, a.getMousePos(b), ma = !0, (m = g.getBodyElem(p[0])) &&
                                                angular.element(m).append(sa));
                                            break;
                                        case 3:
                                            Nb(m, q) && a.callColumnRightClick(m, a.getMousePos(b))
                                    }
                                }
                                b.stopPropagation()
                            }),
                        function(b) {
                            b && (b = a.getChildElement(b, "column-header-cell")) && (b = a.getContentElement(b, "filter-button")) && b.bind("mousedown", function(a) {
                                1 == a.which && Id(this);
                                a.stopPropagation()
                            })
                        }(currentElem)
                },
                ja = null,
                Id = function(b) {
                    a.closeFilterWindow();
                    var q = a.getColumnFromChildElem(b);
                    if (q) {
                        var n = angular.element(b),
                            r = n.parent().parent();
                        if (Ua) {
                            b = '<div ng-include="' + q[a.options.columnFields.filterTemplate] +
                                '"></div>';
                            ja = angular.element('<div class="iui-filter-window"></div>');
                            ja.append(c(b)(k.$parent));
                            var w = e(function() {
                                angular.element(Ua).append(ja);
                                ja.bind("mousedown", function(a) {
                                    a.stopPropagation()
                                });
                                n[0].getBoundingClientRect();
                                var b = r[0].getBoundingClientRect(),
                                    c = angular.element(l)[0].pageXOffset,
                                    m = angular.element(l)[0].pageYOffset,
                                    d = e(function() {
                                        var r = b.bottom + m,
                                            n = b.right - (parseInt(getComputedStyle(ja[0]).width, 10) + 3) + c;
                                        q[a.options.columnFields.filterParams] && "left" == q[a.options.columnFields.filterParams].templateAlignment &&
                                            (n = b.left + c);
                                        ja.css("top", r + "px");
                                        ja.css("left", n + "px");
                                        e.cancel(d)
                                    }, 1);
                                e.cancel(w)
                            }, 1)
                        }
                    }
                };
            a.closeFilterWindow = function() {
                ja && (ja.unbind("mousedown"), ja.remove())
            };
            var Qc = function(a) {
                    a && a.unbind("blur dragover dragend focus keydown keyup keypress mousedown mouseenter mouseleave")
                },
                Ed = function(b) {
                    b && (b.bind("dragover", function(b) {
                        var c = a.getRowFromElem(this);
                        if (c && a.isRowEnabled(c)) {
                            if (a.isScrollBarVisible("vertical")) {
                                var c = a.getMousePos(b),
                                    m = p[0].getBoundingClientRect();
                                c.x -= angular.element(l)[0].pageXOffset;
                                c.y -= angular.element(l)[0].pageYOffset;
                                var w = m.top + C + 25,
                                    m = m.bottom - N - 25;
                                H && A && (m -= A[0].offsetHeight);
                                c.y < w ? Ob(!1) : c.y > m ? Ob(!0) : fb()
                            } else fb();
                            b.stopPropagation()
                        }
                    }), b.bind("dragend", function(b) {
                        var c = a.getRowFromElem(this);
                        c && a.isRowEnabled(c) && (b.preventDefault(), a.dragDropStatus(!1), a.dropMark(), u.getData().source || u.clearData())
                    }), b.bind("mouseenter", function(b) {
                        if (!na) {
                            var c = a.getRowFromElem(this);
                            c && a.isRowEnabled(c) && !ma && (a.hoverRow = c, a.refreshHover(c), a.callRowHover(b, c), a.options.hoverSelection &&
                                (Aa = e(function() {
                                    Aa && a.rowSelection(c, b.shiftKey, b.ctrlKey, b.metaKey)
                                }, 500)))
                        }
                    }), b.bind("mouseleave", function(b) {
                        na || (a.hoverRow = null, (b = a.getRowFromElem(this)) && a.isRowEnabled(b) && a.refreshHover(b), Aa && (e.cancel(Aa), Aa = null))
                    }), b.bind("keydown", function(b) {
                        var c = a.getRowFromElem(this);
                        if (c && a.isRowEnabled(c)) {
                            var m = !0;
                            a.callKeyDown(b, c);
                            var w = a.getRowCurrentIndex(c);
                            switch (b.keyCode) {
                                case 9:
                                    Vc(b, c, w);
                                    break;
                                case 16:
                                    a.updateSelectionStatus("shift");
                                    break;
                                case 17:
                                    a.updateSelectionStatus("ctrl");
                                    break;
                                case 27:
                                    m = !1;
                                    break;
                                case 33:
                                    Wc(b, w);
                                    break;
                                case 34:
                                    Xc(b, w);
                                    break;
                                case 35:
                                    Yc(b, w);
                                    break;
                                case 36:
                                    Zc(b, w);
                                    break;
                                case 37:
                                    $c(b, c, w);
                                    break;
                                case 32:
                                    ad(b, c);
                                    break;
                                case 38:
                                    ic(b, w);
                                    break;
                                case 39:
                                    bd(b, c, w);
                                    break;
                                case 40:
                                    jc(b, w);
                                    break;
                                default:
                                    (b.ctrlKey || b.metaKey) && a.updateSelectionStatus("ctrl"), b.shiftKey && a.updateSelectionStatus("shift")
                            }
                            m && b.stopPropagation()
                        }
                    }), b.bind("keyup", function(b) {
                        var c = a.getRowFromElem(this);
                        if (c && a.isRowEnabled(c)) {
                            switch (b.keyCode) {
                                case 16:
                                    a.multiSelection(!1);
                                    break;
                                case 17:
                                    a.multiSelection(!1);
                                    break;
                                default:
                                    b.ctrlKey || b.metaKey || a.multiSelection(!1), b.shiftKey || a.multiSelection(!1)
                            }
                            a.callKeyUp(b, c)
                        }
                    }), b.bind("keypress", function(b) {
                        var c = a.getRowFromElem(this);
                        c && a.isRowEnabled(c) && a.callKeyPress(b, c)
                    }), b.bind("mousedown", function(b) {
                        a.removeDropDownList();
                        a.closeFilterWindow();
                        a.closeEditor()
                    }), b.bind("focus", function(b) {
                        var c = a.getRowFromElem(this);
                        c && a.isRowEnabled(c) ? a.callGotFocus(b, c) : a.updateFocus()
                    }), b.bind("blur", function(b) {
                        var c = a.getRowFromElem(this);
                        c && a.isRowEnabled(c) && a.callLostFocus(b,
                            c)
                    }))
                },
                Fd = function(b) {
                    b && (b.bind("dblclick", function(b) {
                        var c = a.getRowFromChildElem(this);
                        c && a.isRowEnabled(c) && (a.toggle(c), a.updateFocus(a.getRowCurrentIndex(c), a.options.expandColIndex), b.stopPropagation())
                    }), b.bind("click", function(b) {
                        var c = a.getRowFromChildElem(this);
                        c && a.isRowEnabled(c) && (a.toggle(c), a.updateFocus(a.getRowCurrentIndex(c), a.options.expandColIndex), b.stopPropagation())
                    }), b.bind("touchend", function(b) {
                        b.preventDefault();
                        var c = a.getRowFromChildElem(this);
                        c && a.isRowEnabled(c) && (a.toggle(c),
                            a.updateFocus(a.getRowCurrentIndex(c), a.options.expandColIndex), b.stopPropagation())
                    }))
                },
                Rc = function(a) {
                    a && a.unbind("click dblclick touchend")
                },
                Pb = {
                    x: 0,
                    y: 0
                },
                gb = {
                    x: 0,
                    y: 0
                },
                hb = !1,
                kc = !1,
                Da = null,
                cd = function() {
                    return {
                        x: angular.element(l)[0].pageXOffset,
                        y: angular.element(l)[0].pageYOffset
                    }
                },
                ib = function(a) {
                    var b = cd();
                    return {
                        x: a.x - b.x,
                        y: a.y - b.y
                    }
                },
                Gd = function(c, q, n) {
                    c && (c.bind("dragstart", function(b) {
                            if (a.labelEditStatus()) b.preventDefault();
                            else {
                                document.activeElement && document.activeElement.blur();
                                u.clearData();
                                var c = a.getRowFromChildElem(this);
                                if (c && a.isRowEnabled(c))
                                    if (Mb(), a.isDragAllowed(c)) {
                                        a.dragDropStatus(!0);
                                        a.addDropMark();
                                        b.dataTransfer ? (b.dataTransfer.effectAllowed = "move", b.dataTransfer.setData("text", c[a.options.rowFields.id] ? c[a.options.rowFields.id].toString() : "")) : b.originalEvent && b.originalEvent.dataTransfer && (b.originalEvent.dataTransfer.effectAllowed = "move", b.originalEvent.dataTransfer.setData("text", c[a.options.rowFields.id] ? c[a.options.rowFields.id].toString() : ""));
                                        b = {
                                            source: c,
                                            sourceCtrl: a,
                                            sourceCollection: a.rowsObj
                                        };
                                        switch (a.options.selectionMode) {
                                            case "multi-simple":
                                                b.source = a.options.selectedRows;
                                                break;
                                            case "multi-extended":
                                                b.source = a.options.selectedRows
                                        }
                                        u.setData(b)
                                    } else b.dataTransfer ? b.dataTransfer.effectAllowed = "none" : b.originalEvent && b.originalEvent.dataTransfer && (b.originalEvent.dataTransfer.effectAllowed = "none")
                            }
                        }), c.bind("dragover", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                var m = angular.element(this);
                                b.preventDefault();
                                var q = !0;
                                b.dataTransfer ?
                                    q = "none" === b.dataTransfer.effectAllowed ? !1 : !0 : b.originalEvent && b.originalEvent.dataTransfer && (q = "none" === b.originalEvent.dataTransfer.effectAllowed ? !1 : !0);
                                if (q && (c = a.getRowFromChildElem(m))) {
                                    var q = m[0].getBoundingClientRect(),
                                        n = angular.element(l)[0].pageXOffset,
                                        d = angular.element(l)[0].pageYOffset,
                                        e = a.getMousePos(b);
                                    e.x -= q.left + n;
                                    e.y -= q.top + d;
                                    m = u.getDropPos(e, {
                                        x: 0,
                                        y: 0,
                                        width: m[0].offsetWidth,
                                        height: m[0].offsetHeight
                                    });
                                    n = u.getData();
                                    q = a.isDropAllowed(n.source, c, m);
                                    d = {
                                        event: b,
                                        sourceTree: n.sourceCtrl ?
                                            n.sourceCtrl.getCtrlName() : "",
                                        dragRow: n.source,
                                        targetTree: a.getCtrlName(),
                                        targetRow: c,
                                        isDropAllowed: q,
                                        dropPos: m,
                                        mousePos: a.getMousePos(b)
                                    };
                                    d = a.callDragOver(d);
                                    if (q && !1 !== d) {
                                        d = a.getMousePos(b);
                                        b = d.y + 16;
                                        d = d.x + 20;
                                        e = a.getDropMarkWindow();
                                        e.empty();
                                        var f = "iui-drop-marker-move-in";
                                        switch (m) {
                                            case 1:
                                                f = "iui-drop-marker-move-up";
                                                break;
                                            case 2:
                                                f = "iui-drop-marker-move-down"
                                        }
                                        e.append("<span class='" + f + "'></span><span class='iui-drop-marker-title'>" + c[a.options.rowFields.text] + "</span>");
                                        a.updateDropMarkElem(a.getDropMarkWindow(), {
                                            top: b,
                                            left: d
                                        });
                                        a.dropMark(q);
                                        u.setData({
                                            source: n.source,
                                            sourceList: n.sourceList,
                                            target: c,
                                            dropPos: m
                                        })
                                    } else b.dataTransfer ? b.dataTransfer.dropEffect = "none" : b.originalEvent && b.originalEvent.dataTransfer && (b.originalEvent.dataTransfer.dropEffect = "none"), a.dropMark()
                                }
                            }
                        }), c.bind("drop", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                var m = angular.element(this);
                                b.preventDefault();
                                ra();
                                a.dropMark();
                                c = !0;
                                b.dataTransfer ? c = "none" === b.dataTransfer.effectAllowed ? !1 : !0 : b.originalEvent &&
                                    b.originalEvent.dataTransfer && (c = "none" === b.originalEvent.dataTransfer.effectAllowed ? !1 : !0);
                                if (c) {
                                    var q = a.getRowFromChildElem(m);
                                    if (q) {
                                        var m = u.getData(),
                                            n = m.source;
                                        n || (n = a.getDnDSource(b));
                                        if (c = a.isDropAllowed(n, q, m.dropPos)) {
                                            a.toggle(q, !0);
                                            var d = a.getMousePos(b);
                                            n && (c = {
                                                event: b,
                                                sourceTree: m.sourceCtrl ? m.sourceCtrl.getCtrlName() : "",
                                                dragRow: n,
                                                targetTree: a.getCtrlName(),
                                                targetRow: q,
                                                targetCell: a.getCellAt(d.x, d.y),
                                                isDropAllowed: c,
                                                dropPos: m.dropPos,
                                                mousePos: d
                                            }, !1 !== a.callDragDrop(c) && (a.drop(m), k.$$phase ||
                                                k.$apply()))
                                        }
                                    }
                                }
                                u.clearData();
                                b.stopPropagation()
                            }
                        }), c.bind("dragenter", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                b.preventDefault();
                                if (a.options.autoExpand) var m = e(function() {
                                    Ha || (Ha = e(function() {
                                        Ha && a.toggle(c, !0)
                                    }, 750));
                                    e.cancel(m)
                                }, 1);
                                var q = u.getData();
                                q.source || (q.source = a.getDnDSource(b));
                                q = {
                                    event: b,
                                    sourceTree: q.sourceCtrl ? q.sourceCtrl.getCtrlName() : "",
                                    dragRow: q.source,
                                    targetTree: a.getCtrlName(),
                                    targetRow: q.target,
                                    mousePos: a.getMousePos(b)
                                };
                                a.callDragEnter(q);
                                b.stopPropagation()
                            }
                        }),
                        c.bind("dragleave", function(b) {
                            a.hoverRow = null;
                            var c = a.getRowFromChildElem(this);
                            c && a.isRowEnabled(c) && (b.preventDefault(), ra(), c = u.getData(), c.source || (c.source = a.getDnDSource(b)), c = {
                                event: b,
                                sourceTree: c.sourceCtrl ? c.sourceCtrl.getCtrlName() : "",
                                dragRow: c.source,
                                targetTree: a.getCtrlName(),
                                targetRow: c.target,
                                mousePos: a.getMousePos(b)
                            }, a.callDragLeave(c), b.stopPropagation())
                        }), c.bind("touchstart", function(c) {
                            var m = a.getRowFromChildElem(this);
                            if (m && a.isRowEnabled(m) && (c.preventDefault(), (m = a.getTouchData(c)) &&
                                    0 < m.length)) {
                                kc = !0;
                                var q = e(function() {
                                    kc = !1;
                                    e.cancel(q)
                                }, 750);
                                Pb = ib({
                                    x: m[0].pageX,
                                    y: m[0].pageY
                                });
                                a.closeFilterWindow();
                                m = Pb;
                                if ((m = a.getRowAt(m.x, m.y)) && a.isRowEnabled(m)) {
                                    var n = angular.element(this);
                                    a.mouseButtonStatus(!0);
                                    Da = m;
                                    var f = a.getRowCurrentIndex(m),
                                        g = parseInt(a.getIndexFromElem(this), 10),
                                        h = a.getCell(f, g),
                                        k = a.getCellType(h, g),
                                        l = null,
                                        p = a.options.editorSettings;
                                    n[0].focus();
                                    a.updateFocus(f, g);
                                    h && (l = a.getColumnById(h[a.options.cellFields.cid]));
                                    !l && 0 <= g && g < a.columnList.length && (l = a.columnList[g]);
                                    var t = "click" == a.options.editorSettings.activate;
                                    l && l[a.options.columnFields.editorSettings] && (p = l[a.options.columnFields.editorSettings], t = void 0 != p.activate ? "click" == p.activate : t);
                                    h && h != d ? a.closeEditor(d) : a.closeEditor();
                                    switch (k) {
                                        case "checkbox":
                                            break;
                                        case "combobox":
                                            a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey);
                                            h && 0 != h[a.options.cellFields.allowEdit] && l && t ? Kb(angular.element(this), p, f, g) : a.removeDropDownList();
                                            break;
                                        case "incell":
                                            a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey);
                                            !b && h && 0 != h[a.options.cellFields.allowEdit] &&
                                                t && a.openInCellEditor(n, h, l);
                                            break;
                                        case "dropdown":
                                            a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey);
                                            !b && h && 0 != h[a.options.cellFields.allowEdit] && t && a.openDropDownEditor(n, h, l);
                                            break;
                                        default:
                                            a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey), a.removeDropDownList(), h && 0 != h[a.options.cellFields.allowEdit] && t && vb(c, angular.element(this))
                                    }
                                }
                            }
                        }), c.bind("touchmove", function(b) {
                            var c, m, q = a.getRowFromChildElem(this);
                            if (q && a.isRowEnabled(q) && (q = a.getTouchData(b)) && 0 < q.length) {
                                gb = ib({
                                    x: q[0].pageX,
                                    y: q[0].pageY
                                });
                                var q = Math.abs(gb.x - Pb.x),
                                    n = Math.abs(gb.y - Pb.y),
                                    d = p[0].getBoundingClientRect();
                                if (u.hitTest(gb.x, gb.y, d)) {
                                    if (b.preventDefault(), F && F.css("display", "block"), !kc)
                                        if (!hb && (2 < q || 2 < n) && Da && a.isRowEnabled(Da))
                                            if (angular.element(this), a.labelEditStatus()) b.preventDefault();
                                            else {
                                                hb = !0;
                                                u.clearData();
                                                if ((q = a.getTouchData(b)) && 0 < q.length && (ib({
                                                        x: q[0].pageX,
                                                        y: q[0].pageY
                                                    }), Da && a.isRowEnabled(Da) && (Mb(), a.isDragAllowed(Da)))) {
                                                    a.dragDropStatus(!0);
                                                    a.addDropMark();
                                                    q = {
                                                        source: Da,
                                                        sourceCtrl: a,
                                                        sourceCollection: a.rowsObj
                                                    };
                                                    switch (a.options.selectionMode) {
                                                        case "multi-simple":
                                                            q.source = a.options.selectedRows;
                                                            break;
                                                        case "multi-extended":
                                                            q.source = a.options.selectedRows
                                                    }
                                                    u.setData(q);
                                                    if (q = a.getCellElemFromRow(Da))
                                                        if (q = a.getContentElement(q)) F.empty(), F.append(q.clone()), F.css("display", "none"), p.append(F)
                                                }
                                                b.stopPropagation()
                                            } else if (hb && (angular.element(this), b.preventDefault(), (n = a.getTouchData(b)) && 0 < n.length)) {
                                        var q = cd(),
                                            e = ib({
                                                x: n[0].pageX,
                                                y: n[0].pageY
                                            });
                                        if (n = a.getRowAt(e.x, e.y)) {
                                            var f = a.getCellElemFromRow(n);
                                            if (f) {
                                                var d =
                                                    f[0].getBoundingClientRect(),
                                                    f = u.getDropPos({
                                                        x: e.x - d.left,
                                                        y: e.y - d.top
                                                    }, {
                                                        x: 0,
                                                        y: 0,
                                                        width: f[0].offsetWidth,
                                                        height: f[0].offsetHeight
                                                    }),
                                                    d = u.getData(),
                                                    g = a.isDropAllowed(d.source, n, f);
                                                b = {
                                                    event: b,
                                                    sourceTree: d.sourceCtrl ? d.sourceCtrl.getCtrlName() : "",
                                                    dragRow: d.source,
                                                    targetTree: a.getCtrlName(),
                                                    targetRow: n,
                                                    isDropAllowed: g,
                                                    dropPos: f,
                                                    mousePos: e
                                                };
                                                m = p[0].getBoundingClientRect();
                                                c = e.x - m.left;
                                                m = e.y - m.top;
                                                F.css("top", m - 16 + "px");
                                                F.css("left", c + "px");
                                                F.css("display", "block");
                                                b = a.callDragOver(b);
                                                if (g && 0 != b) {
                                                    b = e.y + q.y +
                                                        16;
                                                    q = e.x + q.x + 20;
                                                    e = a.getDropMarkWindow();
                                                    e.empty();
                                                    c = "iui-drop-marker-move-in";
                                                    switch (f) {
                                                        case 1:
                                                            c = "iui-drop-marker-move-up";
                                                            break;
                                                        case 2:
                                                            c = "iui-drop-marker-move-down"
                                                    }
                                                    e.append("<span class='" + c + "'></span><span class='iui-drop-marker-title'>" + n[a.options.rowFields.text] + "</span>");
                                                    a.updateDropMarkElem(a.getDropMarkWindow(), {
                                                        top: b,
                                                        left: q
                                                    });
                                                    a.dropMark(g);
                                                    u.setData({
                                                        source: d.source,
                                                        sourceList: d.sourceList,
                                                        target: n,
                                                        dropPos: f
                                                    })
                                                } else a.dropMark(), F && F.css("display", "none")
                                            }
                                        } else d = p[0].getBoundingClientRect(),
                                            n = d.top + C, d = d.bottom - N, H && A && (d -= A[0].offsetHeight), !a.options.allowDrop || e.y < n || e.y > d ? (a.dropMark(), F && F.css("display", "none")) : (m = p[0].getBoundingClientRect(), c = e.x - m.left, m = e.y - m.top, F.css("top", m - 16 + "px"), F.css("left", c + "px"), F.css("display", "block"), n = u.getData(), d = {
                                                source: n.source,
                                                sourceCtrl: n.sourceCtrl,
                                                target: null,
                                                dropPos: -1
                                            }, u.setData(d), b = {
                                                event: b,
                                                sourceTree: n.sourceCtrl ? n.sourceCtrl.getCtrlName() : "",
                                                dragRow: n.source,
                                                targetTree: a.getCtrlName(),
                                                targetRow: null,
                                                isDropAllowed: a.options.allowDrop,
                                                dropPos: -1,
                                                mousePos: e
                                            }, b = a.callDragOver(b), 0 == b ? a.dropMark() : (b = e.y + q.y + 16, q = e.x + q.x + 20, e = a.getDropMarkWindow(), e.empty(), e.append("<span class='iui-drop-marker-move-end'></span><span class='iui-drop-marker-title'>" + (k.name ? k.name : "TreeGrid") + "</span>"), a.updateDropMarkElem(a.getDropMarkWindow(), {
                                                top: b,
                                                left: q
                                            }), a.dropMark(!0)))
                                    }
                                } else b.preventDefault(), a.dropMark(), a.cancelScrollTimer(), F && F.css("display", "none")
                            }
                        }), c.bind("touchend", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                if ((c =
                                        a.getTouchData(b)) && 0 < c.length) {
                                    var c = ib({
                                            x: c[0].pageX,
                                            y: c[0].pageY
                                        }),
                                        m = p[0].getBoundingClientRect();
                                    if (u.hitTest(c.x, c.y, m))
                                        if (hb) {
                                            angular.element(this);
                                            b.preventDefault();
                                            ra();
                                            a.dropMark();
                                            ub();
                                            if ((c = a.getTouchData(b)) && 0 < c.length) {
                                                var c = ib({
                                                        x: c[0].pageX,
                                                        y: c[0].pageY
                                                    }),
                                                    q = a.getRowAt(c.x, c.y);
                                                if (q) {
                                                    var m = u.getData(),
                                                        n = m.source,
                                                        d = a.isDropAllowed(n, q, m.dropPos);
                                                    d && (a.toggle(q, !0), n && (c = {
                                                        event: b,
                                                        sourceTree: m.sourceCtrl ? m.sourceCtrl.getCtrlName() : "",
                                                        dragRow: n,
                                                        targetTree: a.getCtrlName(),
                                                        targetRow: q,
                                                        isDropAllowed: d,
                                                        dropPos: m.dropPos,
                                                        mousePos: c
                                                    }, c = a.callDragDrop(c), !1 !== c && (a.drop(m), k.$$phase || k.$apply())))
                                                } else a.dropMark(), q = p[0].getBoundingClientRect(), m = q.top + C, q = q.bottom - N, H && A && (q -= A[0].offsetHeight), c.y >= m && c.y <= q && (m = u.getData(), m.source && (c = {
                                                    event: b,
                                                    sourceTree: m.sourceCtrl ? m.sourceCtrl.getCtrlName() : "",
                                                    dragRow: m.source,
                                                    targetTree: a.getCtrlName(),
                                                    targetRow: null,
                                                    isDropAllowed: a.options.allowDrop,
                                                    dropPos: -1,
                                                    mousePos: c
                                                }, c = a.callDragDrop(c), !1 !== c && (a.drop(m), k.$$phase || k.$apply())))
                                            }
                                            u.clearData();
                                            a.dragDropStatus(!1);
                                            b.stopPropagation()
                                        } else a.mouseButtonStatus(!1), (c = a.getRowFromChildElem(this)) && a.isRowEnabled(c) && a.updateSelection(b, c, b.shiftKey), Mb()
                                }
                                c = hb;
                                a.removeDropMark();
                                ub();
                                gb = {
                                    x: 0,
                                    y: 0
                                };
                                hb = !1;
                                Da = null;
                                c && b.stopPropagation()
                            }
                        }), c.bind("dblclick", function(c) {
                            var m = a.getRowFromChildElem(this);
                            if (m && a.isRowEnabled(m)) {
                                var q = angular.element(this);
                                c.preventDefault();
                                if (1 === c.which) {
                                    var n = a.getRowCurrentIndex(m),
                                        d = parseInt(a.getIndexFromElem(this), 10),
                                        e = a.getCell(n, d),
                                        f = a.getCellType(e, d),
                                        g = null,
                                        h = a.options.editorSettings;
                                    e && (g = a.getColumnById(e[a.options.cellFields.cid]));
                                    !g && 0 <= d && d < a.columnList.length && (g = a.columnList[d]);
                                    var k = "dblclick" == a.options.editorSettings.activate;
                                    g && g[a.options.columnFields.editorSettings] && (h = g[a.options.columnFields.editorSettings], k = void 0 != h.activate ? "dblclick" == h.activate : k);
                                    switch (f) {
                                        case "checkbox":
                                            break;
                                        case "combobox":
                                            e && 0 != e[a.options.cellFields.allowEdit] && g && k ? Kb(angular.element(this), h, n, d) : a.removeDropDownList();
                                            break;
                                        case "incell":
                                            !b && e && 0 != e[a.options.cellFields.allowEdit] &&
                                                k && a.openInCellEditor(q, e, g);
                                            break;
                                        case "dropdown":
                                            !b && e && 0 != e[a.options.cellFields.allowEdit] && k && a.openDropDownEditor(q, e, g);
                                            break;
                                        default:
                                            a.removeDropDownList(), e && 0 != e[a.options.cellFields.allowEdit] && k && vb(c, angular.element(this), 0)
                                    }
                                    0 != a.callRowDblClick(m, a.getMousePos(c)) && "checkbox" != f && "checkbox" != f && e && !k && (a.toggle(m), a.updateFocus(n, d))
                                }
                                c.stopPropagation()
                            }
                        }), c.bind("mouseenter", function(c) {
                            if (!na) {
                                var m = a.getRowFromChildElem(this);
                                if (m && a.isRowEnabled(m) && !ma) {
                                    var q = a.getRowCurrentIndex(m),
                                        n = parseInt(a.getIndexFromElem(this), 10);
                                    if (q = a.getCell(q, n))
                                        if (a.hoverCell = q, a.refreshHover(m), a.callCellHover(c, q), c = angular.element(this), q && 0 != q[a.options.cellFields.allowEdit]) switch (n = a.getCellType(q, n), n) {
                                            case "combobox":
                                                ab || ec(c);
                                                break;
                                            case "incell":
                                                b && q == d || Jb(c, n);
                                                break;
                                            case "dropdown":
                                                b && q != d || Jb(c, n);
                                                break;
                                            default:
                                                Ia(), sb()
                                        } else Ia()
                                }
                            }
                        }), c.bind("mouseleave", function(b) {
                            if (!na && (a.hoverCell = null, (b = a.getRowFromChildElem(this)) && a.isRowEnabled(b))) {
                                b = a.getRowCurrentIndex(b);
                                var c = parseInt(a.getIndexFromElem(this),
                                    10);
                                a.getCell(b, c) && (Ia(), sb())
                            }
                        }), c.bind("keydown", function(c) {
                            var m = a.getRowFromChildElem(this);
                            if (m && a.isRowEnabled(m)) {
                                var q = !0,
                                    n = angular.element(this);
                                a.callKeyDown(c, m);
                                var d = a.getRowCurrentIndex(m),
                                    e = parseInt(a.getIndexFromElem(this), 10),
                                    f = a.getCell(d, e),
                                    g = a.getCellType(f, e),
                                    h = a.getColumnById(f[a.options.cellFields.cid]);
                                !h && 0 <= e && e < a.columnList.length && (h = a.columnList[e]);
                                switch (c.keyCode) {
                                    case 9:
                                        Vc(c, m, d, e);
                                        break;
                                    case 13:
                                        switch (g) {
                                            case "checkbox":
                                                dd(f, e);
                                                break;
                                            case "combobox":
                                                f && 0 != f[a.options.cellFields.allowEdit] ?
                                                    h && Kb(angular.element(this), h[a.options.columnFields.editorSettings], d, e) : a.removeDropDownList();
                                                break;
                                            case "incell":
                                                !b && f && 0 != f[a.options.cellFields.allowEdit] && a.openInCellEditor(n, f, h);
                                                break;
                                            case "dropdown":
                                                !b && f && 0 != f[a.options.cellFields.allowEdit] && a.openDropDownEditor(n, f, h);
                                                break;
                                            default:
                                                f && 0 != f[a.options.cellFields.allowEdit] && vb(c, angular.element(this), 0)
                                        }
                                        break;
                                    case 16:
                                        a.updateSelectionStatus("shift");
                                        break;
                                    case 17:
                                        a.updateSelectionStatus("ctrl");
                                        break;
                                    case 27:
                                        q = !1;
                                        break;
                                    case 33:
                                        Wc(c, d,
                                            e);
                                        break;
                                    case 34:
                                        Xc(c, d, e);
                                        break;
                                    case 35:
                                        Yc(c, d, e);
                                        break;
                                    case 36:
                                        Zc(c, d, e);
                                        break;
                                    case 37:
                                        $c(c, m, d, e);
                                        break;
                                    case 32:
                                        ad(c, m, f, e);
                                        break;
                                    case 38:
                                        ic(c, d, e);
                                        break;
                                    case 39:
                                        bd(c, m, d, e);
                                        break;
                                    case 40:
                                        jc(c, d, e);
                                        break;
                                    default:
                                        (c.ctrlKey || c.metaKey) && a.updateSelectionStatus("ctrl"), c.shiftKey && a.updateSelectionStatus("shift")
                                }
                                q && c.stopPropagation()
                            }
                        }), c.bind("keyup", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                switch (b.keyCode) {
                                    case 16:
                                        a.multiSelection(!1);
                                        break;
                                    case 17:
                                        a.multiSelection(!1);
                                        break;
                                    default:
                                        b.ctrlKey || b.metaKey || a.multiSelection(!1), b.shiftKey || a.multiSelection(!1)
                                }
                                a.callKeyUp(b, c);
                                b.stopPropagation()
                            }
                        }), c.bind("keypress", function(b) {
                            var c = a.getRowFromChildElem(this);
                            c && a.isRowEnabled(c) && (a.callKeyPress(b, c), b.stopPropagation())
                        }), c.bind("click", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                if (1 === b.which) {
                                    var m = a.getRowCurrentIndex(c),
                                        q = parseInt(a.getIndexFromElem(this), 10),
                                        m = a.getCell(m, q);
                                    a.callCellClick(b, c, m, a.getMousePos(b));
                                    a.callRowClick(b,
                                        c, a.getMousePos(b))
                                }
                                b.stopPropagation()
                            }
                        }), c.bind("mousedown", function(c) {
                            a.closeFilterWindow();
                            var m = a.getRowFromChildElem(this);
                            if (m && a.isRowEnabled(m)) {
                                var q = angular.element(this);
                                a.mouseButtonStatus(!0);
                                switch (c.which) {
                                    case 1:
                                        var n = a.getRowCurrentIndex(m),
                                            e = parseInt(a.getIndexFromElem(this), 10),
                                            f = a.getCell(n, e),
                                            g = a.getCellType(f, e),
                                            h = null,
                                            k = a.options.editorSettings;
                                        f && (h = a.getColumnById(f[a.options.cellFields.cid]));
                                        !h && 0 <= e && e < a.columnList.length && (h = a.columnList[e]);
                                        var l = "click" == a.options.editorSettings.activate;
                                        h && h[a.options.columnFields.editorSettings] && (k = h[a.options.columnFields.editorSettings], l = void 0 != k.activate ? "click" == k.activate : l);
                                        f && f != d ? a.closeEditor(d) : a.closeEditor();
                                        switch (g) {
                                            case "checkbox":
                                                break;
                                            case "combobox":
                                                a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey);
                                                f && 0 != f[a.options.cellFields.allowEdit] && h && l ? Kb(angular.element(this), k, n, e) : a.removeDropDownList();
                                                break;
                                            case "dropdown":
                                                a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey);
                                                !b && f && 0 != f[a.options.cellFields.allowEdit] && l && a.openDropDownEditor(q,
                                                    f, h);
                                                break;
                                            case "incell":
                                                a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey);
                                                !b && f && 0 != f[a.options.cellFields.allowEdit] && l && a.openInCellEditor(q, f, h);
                                                break;
                                            default:
                                                if ("image" == g ? 0 != k.allowSelection : 1) a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey), a.removeDropDownList(), f && 0 != f[a.options.cellFields.allowEdit] && l && vb(c, angular.element(this))
                                        }
                                        break;
                                    case 3:
                                        a.rowSelection(m, c.shiftKey, c.ctrlKey, c.metaKey), a.callRowRightClick(m, a.getMousePos(c))
                                }
                                c.stopPropagation()
                            }
                        }), c.bind("mouseup", function(b) {
                            a.mouseButtonStatus(!1);
                            if (1 == b.which) {
                                var c = a.getRowFromChildElem(this);
                                if (c && a.isRowEnabled(c)) {
                                    var m = a.getRowCurrentIndex(c),
                                        q = parseInt(a.getIndexFromElem(this), 10),
                                        m = a.getCell(m, q),
                                        n = a.getCellType(m, q),
                                        d = null,
                                        e = a.options.editorSettings;
                                    m && (d = a.getColumnById(m[a.options.cellFields.cid]));
                                    !d && 0 <= q && q < a.columnList.length && (d = a.columnList[q]);
                                    d && d[a.options.columnFields.editorSettings] && (e = d[a.options.columnFields.editorSettings]);
                                    ("image" == n ? 0 != e.allowSelection : 1) && a.updateSelection(b, c, b.shiftKey)
                                }
                                Mb()
                            }
                        }), c.bind("focus",
                            function(c) {
                                var m = a.getRowFromChildElem(this);
                                if (m && a.isRowEnabled(m)) {
                                    var q = a.getRowCurrentIndex(m),
                                        n = parseInt(a.getIndexFromElem(this), 10),
                                        q = a.getCell(q, n);
                                    a.callGotFocus(c, m, q);
                                    if (q && 0 != q[a.options.cellFields.allowEdit]) switch (c = angular.element(this), n = a.getCellType(q, n), n) {
                                        case "combobox":
                                            ab || ec(c);
                                            break;
                                        case "incell":
                                            b || Jb(c, n);
                                            break;
                                        case "dropdown":
                                            b || Jb(c, n);
                                            break;
                                        default:
                                            Ia()
                                    } else Ia()
                                }
                            }), c.bind("blur", function(b) {
                            var c = a.getRowFromChildElem(this);
                            if (c && a.isRowEnabled(c)) {
                                var m = a.getRowCurrentIndex(c),
                                    q = parseInt(a.getIndexFromElem(this), 10),
                                    m = a.getCell(m, q);
                                a.callLostFocus(b, c, m)
                            }
                        }))
                },
                Sc = function(a) {
                    a && a.unbind("blur click dragstart dragover drop dragenter dragleave dblclick focus keydown keypress keyup mouseenter mouseleave mousemove mousedown mouseup touchstart touchmove touchend")
                };
            a.getTopRow = function() {
                return a.isRowIndexInRange(y - 1) ? a.currentList[y] : 0 < a.currentList.length ? a.currentList[0] : null
            };
            a.getFooterElem = function(a) {
                switch (a) {
                    case "left":
                        return ka;
                    case "right":
                        return Y
                }
                return ta
            };
            a.getHeaderElem =
                function(a) {
                    switch (a) {
                        case "left":
                            return Z;
                        case "right":
                            return R
                    }
                    return ea
                };
            a.getRowElems = function(a) {
                switch (a) {
                    case "left":
                        return Ja ? Ja.find("tr") : null;
                    case "right":
                        return Ka ? Ka.find("tr") : null
                }
                return fa ? fa.find("tr") : null
            };
            var ed = function(b) {
                    var c = "";
                    b.icon ? c = b.icon : a.options.rowIcon && (c = a.options.rowIcon);
                    return c
                },
                Vc = function(b, c, n, r) {
                    var d = a.currentList.length;
                    0 < d && (b.shiftKey ? g.isEqual(c[a.options.rowFields.id], a.currentList[0][a.options.rowFields.id]) || ic(b, n, r) : g.isEqual(c[a.options.rowFields.id],
                        a.currentList[d - 1][a.options.rowFields.id]) || jc(b, n, r))
                },
                jc = function(b, c, n) {
                    b.preventDefault();
                    focusDelayTime = 0;
                    var r = c,
                        d = y + ga - 2,
                        d = d < a.currentList.length - 1 ? d : a.currentList.length - 1;
                    r >= d && J && (a.setScrollPos({
                        x: a.scrollPos.x,
                        y: a.scrollPos.y + Math.floor(p[0].clientHeight / 4)
                    }), focusDelayTime = 1);
                    if (r = a.getNextRow(r)) {
                        c = a.getRowCurrentIndex(r);
                        c > d && J && (a.ensureVisible(r, "bottom"), focusDelayTime = 100);
                        a.rowSelection(r, b.shiftKey, b.ctrlKey, b.metaKey);
                        var f = e(function() {
                            a.updateFocus(c, n);
                            e.cancel(f)
                        }, focusDelayTime)
                    }
                },
                ic = function(b, c, n) {
                    b.preventDefault();
                    focusDelayTime = 0;
                    var d = y,
                        d = 0 < d ? d : 0;
                    c == d && J && (a.setScrollPos({
                        x: a.scrollPos.x,
                        y: a.scrollPos.y - Math.floor(p[0].clientHeight / 4)
                    }), focusDelayTime = 1);
                    var f = a.getPrevRow(c);
                    if (f) {
                        c = a.getRowCurrentIndex(f);
                        c < d && J && (a.ensureVisible(f, "bottom"), focusDelayTime = 100);
                        a.rowSelection(f, b.shiftKey, b.ctrlKey);
                        var g = e(function() {
                            a.updateFocus(c, n);
                            e.cancel(g)
                        }, focusDelayTime)
                    }
                },
                bd = function(b, c, n, d) {
                    b.preventDefault();
                    if ((void 0 === d || 0 <= d && d == a.options.expandColIndex) && !a.isRowExpanded(c) &&
                        c[a.options.rowFields.rows] && 0 < c[a.options.rowFields.rows].length) a.toggle(c, !0), a.updateFocus(n, d);
                    else if (0 <= d) {
                        focusDelayTime = 0;
                        var f = d + 1;
                        b = a.columnList.length - 1;
                        f === b && (focusDelayTime = 1);
                        if (0 <= f && f <= b) {
                            b = g.getPageRect(p);
                            c = a.getElemFromCell(n, f);
                            c = g.getPageRect(c);
                            c.left + c.width > b.left + b.width && (b = a.scrollPos, b.x += c.width, a.setScrollPos(b));
                            var h = e(function() {
                                a.updateFocus(n, f);
                                e.cancel(h)
                            }, focusDelayTime)
                        }
                    }
                },
                $c = function(b, c, n, d) {
                    b.preventDefault();
                    if ((void 0 === d || 0 <= d && d == a.options.expandColIndex) &&
                        a.isRowExpanded(c) && c[a.options.rowFields.rows] && 0 < c[a.options.rowFields.rows].length) a.toggle(c, !1), a.updateFocus(n, d);
                    else if (0 <= d) {
                        focusDelayTime = 0;
                        var f = 1 < d ? d - 1 : 0;
                        if (0 <= f) {
                            b = g.getPageRect(p);
                            c = a.getElemFromCell(n, f);
                            c = g.getPageRect(c);
                            c.left < b.left && (b = a.scrollPos, b.x -= c.width, a.setScrollPos(b));
                            var h = e(function() {
                                a.updateFocus(n, f);
                                e.cancel(h)
                            }, focusDelayTime)
                        }
                    }
                },
                Wc = function(b, c, n) {
                    b.preventDefault();
                    var d = c - ga,
                        d = 0 < d ? d : 0;
                    if (d !== c) {
                        focusDelayTime = 1;
                        var f = a.getPrevRow(d + 1);
                        if (f) {
                            a.scrollTo(f);
                            a.rowSelection(f, b.shiftKey, b.ctrlKey, b.metaKey);
                            k.$apply();
                            var g = e(function() {
                                a.updateFocus(a.getRowCurrentIndex(f), n);
                                e.cancel(g)
                            }, focusDelayTime)
                        }
                    }
                },
                Xc = function(b, c, n) {
                    b.preventDefault();
                    var d = c + ga;
                    a.options.showHeader && d--;
                    a.options.showFooter && d--;
                    d = d < a.currentList.length - 1 ? d : a.currentList.length - 1;
                    if (d !== c) {
                        focusDelayTime = 1;
                        var f = a.getNextRow(d - 1);
                        if (f) {
                            a.scrollTo(f, "bottom");
                            a.rowSelection(f, b.shiftKey, b.ctrlKey, b.metaKey);
                            k.$apply();
                            var g = e(function() {
                                a.updateFocus(a.getRowCurrentIndex(f),
                                    n);
                                e.cancel(g)
                            }, focusDelayTime)
                        }
                    }
                },
                Yc = function(b, c, n) {
                    b.preventDefault();
                    a.setScrollPos({
                        x: a.scrollPos.x,
                        y: K.y
                    });
                    var d = a.getLastRow();
                    if (d) {
                        a.rowSelection(d, b.shiftKey, b.ctrlKey, b.metaKey);
                        var f = e(function() {
                            a.updateFocus(a.getRowCurrentIndex(d), n);
                            e.cancel(f)
                        }, 1)
                    }
                },
                Zc = function(b, c, n) {
                    b.preventDefault();
                    a.setScrollPos({
                        x: a.scrollPos.x,
                        y: 0
                    });
                    var d = a.getFirstRow();
                    if (d) {
                        a.rowSelection(d, b.shiftKey, b.ctrlKey, b.metaKey);
                        var f = e(function() {
                            a.updateFocus(a.getRowCurrentIndex(d), n);
                            e.cancel(f)
                        }, 1)
                    }
                },
                dd =
                function(b, c) {
                    if (b && 0 != b[a.options.cellFields.allowEdit]) {
                        var n = a.getColumnById(b[a.options.cellFields.cid]);
                        !n && 0 <= c && c < a.columnList.length && (n = a.columnList[c]);
                        if (n) {
                            var d = b[a.options.cellFields.value];
                            if ((n = n[a.options.columnFields.editorSettings]) && 1 == n.threeState) switch (g.isString(d) || (d = "unchecked"), d) {
                                case "checked":
                                    d = "unchecked";
                                    break;
                                case "indeterminate":
                                    d = "checked";
                                    break;
                                default:
                                    d = "indeterminate"
                            } else d = g.isBoolean(d) ? !d : !0;
                            b[a.options.cellFields.value] = d;
                            k.$apply()
                        }
                    }
                },
                ad = function(b, c, n,
                    d) {
                    b.preventDefault();
                    dd(n, d);
                    a.rowSelection(c, b.shiftKey, b.ctrlKey, b.metaKey, c[a.options.rowFields.selected]);
                    k.$apply()
                },
                fa = null,
                ua = angular.element('<div class="iui-treegrid-block iui-treegrid-block-top"></div>'),
                ea = null,
                Ea = angular.element('<div class="iui-treegrid-block iui-treegrid-block-left"></div>'),
                P = 0,
                jb = 0,
                Z = null,
                ka = null,
                Ja = null,
                va = angular.element('<div class="iui-treegrid-block iui-treegrid-block-right"></div>'),
                oa = 0,
                kb = 0,
                R = null,
                Y = null,
                Ka = null,
                pa = angular.element('<div class="iui-treegrid-block iui-treegrid-block-bottom"></div>'),
                ta = null,
                y = 0,
                v = null,
                x = null,
                D = 100,
                S = 0,
                ga = 0,
                La = 0,
                Qb = 0,
                C = 0,
                N = 0,
                lb = 0,
                Rb = !1,
                na = !1,
                yb = 9,
                zb = 9,
                Sb = 0,
                wa = 0,
                Ma = 0,
                Wa = 1,
                Tb = 0,
                Ub = 0,
                Na = 0,
                mb = 0,
                Vb = 1,
                M = null,
                T = null,
                H = !1,
                J = !1;
            this.scrollMousePos = null;
            var K = {
                    x: 0,
                    y: 0
                },
                bb = [];
            k.verScrollVisibility = !1;
            k.$watch("verScrollVisibility", function(b, c) {
                b != c && a.updateCurrentLayout(!0)
            });
            a.getColumnWidth = function(b) {
                var c = 100;
                b && b[a.options.columnFields.width] && (c = b[a.options.columnFields.width], g.isPercent(c) ? (b = p[0].clientWidth - 2 * a.columnList.length, J && I && (b -= I[0].offsetWidth),
                    c = Math.floor(parseInt(c, 10) / 100 * b)) : g.isString && (c = parseInt(c, 10)));
                return c
            };
            var Ab = function(b) {
                    var c = 0;
                    if ((b = a.getRowElems(b)) && 0 < b.length && (b = angular.element(b[0])) && (b = b.find("td")) && 0 < b.length)
                        for (var n = 0; n < b.length; n++) var d = angular.element(b[n]),
                            c = c + d[0].offsetWidth;
                    return c
                },
                Jd = function() {
                    var b = 0;
                    if (a.options.showHeader || a.options.showFooter) {
                        var c = a.options.showHeader ? a.getHeaderElem() : a.getFooterElem();
                        if (c && (c = c.find("td")) && 0 < c.length)
                            for (var n = 0; n < c.length; n++) var d = angular.element(c[n]),
                                b = b + d[0].offsetWidth;
                        a.isThereLeftFixedColumns && (Z ? P = Z[0].offsetWidth : ka && (P = ka[0].offsetWidth), b += P);
                        a.isThereRightFixedColumns && (R ? oa = R[0].offsetWidth : Y && (oa = Y[0].offsetWidth), b += oa)
                    } else 0 < a.currentList.length && (fa && (b += Ab()), a.isThereLeftFixedColumns && (b += Ab("left")), a.isThereRightFixedColumns && (b += Ab("right")));
                    return b
                };
            a.updateScrollVisibility = function() {
                var a = e(function() {
                    H || (A.css("display", "none"), K.x = 0);
                    J || (I.css("display", "none"), K.y = 0);
                    H && J || ya.css("display", "none");
                    e.cancel(a)
                }, 1)
            };
            p.append(A);
            p.append(I);
            p.append(ya);
            a.updateScrollVisibility();
            var Bb = 0,
                Cb = 999;
            a.updateViewSize = function(b) {
                var c = e(function() {
                    lb = 0;
                    var b = p[0].clientWidth;
                    J && I && (b -= I[0].offsetWidth);
                    H = !1;
                    0 < a.columnList.length && (lb += Jd(), lb > b && (A.unbind("mousedown"), A.css("display", "block"), A.bind("mousedown", function(b) {
                        if (a.options.enabled) {
                            a.removeDropDownList();
                            a.closeFilterWindow();
                            a.closeEditor(null, null, !0);
                            b = g.getClientMousePos(b, this);
                            var c = Math.floor(p[0].clientWidth);
                            M && (b.x < M[0].offsetLeft ? a.setScrollPos({
                                x: a.scrollPos.x -
                                    c,
                                y: a.scrollPos.y
                            }) : b.x > M[0].offsetLeft + M[0].offsetWidth && a.setScrollPos({
                                x: a.scrollPos.x + c,
                                y: a.scrollPos.y
                            }))
                        }
                    }), M = angular.element(A.children().eq(0)), H = !0, M.bind("mousedown", function(b) {
                        a.options.enabled && (a.removeDropDownList(), a.closeFilterWindow(), a.closeEditor(null, null, !0), 1 === b.which && (X.scrollMousePos = a.getMousePos(b), Rb = !0));
                        b.stopPropagation()
                    })));
                    J = !1;
                    k.verScrollVisibility = !1;
                    0 < a.currentList.length && (b = 0, a.options.paging.enabled && U && (b = U[0].offsetHeight), b = p[0].clientHeight - b - (C + N), H &&
                        A && (b -= A[0].offsetHeight), D = 0 < S ? Math.floor(b / S) + 1 : 0 < C ? Math.floor(b / C) : 100, D < a.currentList.length + 1 && (I.unbind("mousedown"), I.css("display", "block"), I.bind("mousedown", function(b) {
                            if (a.options.enabled) {
                                a.removeDropDownList();
                                a.closeFilterWindow();
                                a.closeEditor(null, null, !0);
                                b = g.getClientMousePos(b, this);
                                var c = Math.floor(p[0].clientHeight);
                                T && (b.y < T[0].offsetTop ? (a.setScrollPos({
                                    x: a.scrollPos.x,
                                    y: a.scrollPos.y - c
                                }), Ob(!1, c)) : b.y > T[0].offsetTop + T[0].offsetHeight && (a.setScrollPos({
                                    x: a.scrollPos.x,
                                    y: a.scrollPos.y +
                                        c
                                }), Ob(!0, c)))
                            }
                        }), T = angular.element(I.children().eq(0)), J = !0, k.verScrollVisibility = !0, T.bind("mousedown", function(b) {
                            if (a.options.enabled && (a.removeDropDownList(), a.closeFilterWindow(), a.closeEditor(null, null, !0), 1 === b.which)) {
                                X.scrollMousePos = a.getMousePos(b);
                                na = !0;
                                Bb = 0;
                                Cb = 999;
                                for (var c = 0, m = !1, q = !1, n = a.scrollPos.x + La - (P + oa), d = 0; d < a.columnList.length; d++)
                                    if (!a.isColumnFixed(a.columnList[d])) {
                                        var e = a.getColumnWidth(a.columnList[d]) + 4,
                                            c = c + e;
                                        !m && c >= a.scrollPos.x && (Bb = d, m = !0);
                                        !q && c >= n && (Cb = d, q = !0);
                                        if (m &&
                                            q) break
                                    }
                            }
                            b.stopPropagation()
                        })));
                    H || (A.unbind("mousedown"), K.x = 0);
                    J || (I.unbind("mousedown"), K.y = 0);
                    H && J && A.css("display", "block");
                    e.cancel(c);
                    !H && 0 < a.scrollPos.x && a.setScrollPos({
                        x: 0,
                        y: a.scrollPos.y
                    });
                    !J && 0 < a.scrollPos.y && a.setScrollPos({
                        x: a.scrollPos.x,
                        y: 0
                    })
                }, 1)
            };
            a.updateScrollView = function() {
                lc()
            };
            var lc = function() {
                var b = e(function() {
                    var c = 0;
                    a.options.paging.enabled && U && (c = U[0].offsetHeight);
                    La = p[0].offsetWidth - 2;
                    Qb = p[0].offsetHeight - 2 - c;
                    H && (Qb -= A[0].offsetHeight);
                    J && (La -= I[0].offsetWidth);
                    W.css("width",
                        La + "px");
                    W.css("height", Qb + "px");
                    H && (A.css("left", "0px"), A.css("bottom", c + "px"), A.css("width", La - 2 + "px"));
                    var n = 2;
                    a.options.paging.enabled && U && (n = 4);
                    J && (I.css("top", "0px"), I.css("right", "0px"), I.css("height", Qb - n + "px"));
                    H && J && (ya.css("left", "auto"), ya.css("right", "0px"));
                    var d = e(function() {
                        H && La < lb && (wa = 2, Ma = A[0].clientWidth - 4, Sb = 0, Ma > wa && (Sb = Ma - wa), yb = Math.floor(Sb * La / lb), 9 > yb && (yb = 9), M.css("width", yb + "px"), K.x = lb - La, Wa = K.x / (Sb - yb - 2));
                        var b = a.currentList.length + 1;
                        J && 0 < a.currentList.length && D < b &&
                            (Na = 2, mb = I[0].clientHeight - 4, Tb = 0, mb > Na && (Tb = mb - Na), zb = Math.floor(Tb * D / b), 9 > zb && (zb = 9), T.css("height", zb + "px"), Vb = (b - D + 1) / (Tb - zb - 2), K.y = Math.floor((b - D + 1) * S), 0 > K.y && (K.y = 0), 0 == y ? T.css("top", Na + "px") : y + D - 1 == a.currentList.length && T.css("top", mb - T[0].offsetHeight + "px"));
                        a.isThereLeftFixedColumns && (Z ? P = Z[0].offsetWidth : ka ? P = ka[0].offsetWidth : 0 < a.currentList.length && (P = Ab("left")), jb = p[0].clientHeight - c - C - N, H && (jb -= A[0].offsetHeight), Ea.css("top", C + "px"), Ea.css("width", P + "px"), Ea.css("height", jb + "px"),
                            ea && ea.css("left", P + "px"), fa && fa.css("left", P + "px"), ta && ta.css("left", P + "px"));
                        a.isThereRightFixedColumns && (R ? oa = R[0].offsetWidth : Y ? oa = Y[0].offsetWidth : 0 < a.currentList.length && (oa = Ab("right")), kb = p[0].clientHeight - c - C - N, H && (kb -= A[0].offsetHeight), b = 0, J && (b = I[0].offsetWidth), R && R.css("right", b + "px"), va.css("top", C + "px"), va.css("right", b + "px"), va.css("width", oa + "px"), va.css("height", kb + "px"), Y && Y.css("right", b + "px"));
                        b = c;
                        H && A && (b += A[0].offsetHeight);
                        pa.css("bottom", b + "px");
                        b = a.scrollPos.x;
                        void 0 != b &&
                            (0 > b && (b = 0), b > K.x && (b = K.x), a.scrollPos.x = b, b = !1 !== a.options.rtl ? Math.floor(a.scrollPos.x / Wa) - (Ma - M[0].offsetWidth - wa) : Math.floor(a.scrollPos.x / Wa) + wa, H && M && M.css("left", b + "px"), mc());
                        e.cancel(d)
                    }, 1);
                    e.cancel(b)
                }, 5)
            };
            a.updateColumnWidth = function() {
                if (a.options.fillSpace) {
                    for (var b = 0, c = 0; c < a.columnList.length; c++) b += a.getColumnWidth(a.columnList[c]) + 4;
                    if (b < p[0].clientWidth) {
                        for (var b = (p[0].clientWidth - b) / a.columnList.length, n, c = 0; c < a.columnList.length; c++) n = a.getColumnWidth(a.columnList[c]) + b, a.columnList[c][a.options.columnFields.width] =
                            n;
                        return !0
                    }
                }
                return !1
            };
            k.onCellValueChanging = function(b, c, n) {
                var d = c + y,
                    e = a.getCell(d, n);
                if (e && 0 == e[a.options.cellFields.allowEdit]) return !1;
                var e = !0,
                    f = a.getColumnObject(n),
                    g = "label",
                    h = null;
                f && (g = f[a.options.columnFields.editorType], h = f[a.options.columnFields.editorSettings]);
                switch (g) {
                    case "checkbox":
                        b = h && 1 == h.threeState ? b.checkState : b.checked;
                        e = a.callCellValueChanging(a.getRowObject(d), a.getCellObject(d, n), b);
                        break;
                    case "combobox":
                        e = a.callCellValueChanging(a.getRowObject(c), a.getCellObject(c, n), b.item)
                }
                return e
            };
            k.onCellValueChanged = function(b, c, n) {
                var d = c + y,
                    e = a.getColumnObject(n),
                    f = "label",
                    g = null;
                e && (f = e[a.options.columnFields.editorType], g = e[a.options.columnFields.editorSettings]);
                switch (f) {
                    case "checkbox":
                        b = g && 1 == g.threeState ? b.checkState : b.checked;
                        a.callCellValueChanged(a.getRowObject(d), a.getCellObject(d, n), b);
                        break;
                    case "combobox":
                        if (d = a.getCell(c, n)) d[a.options.cellFields.value] = b.item, k.$apply(), "optimal" == a.options.displayMode && a.updateView();
                        a.removeDropDownList(!0);
                        a.updateFocus(c, n);
                        a.callCellValueChanged(a.getRowObject(c),
                            a.getCellObject(c, n), b.item)
                }
            };
            k.onEditorClick = function(b, c, d) {
                c += y;
                var e = a.getColumnObject(d),
                    f = "label";
                e && (f = e[a.options.columnFields.editorType]);
                switch (f) {
                    case "checkbox":
                        a.callCellClick(b, a.getRowObject(c), a.getCellObject(c, d), a.getMousePos(b))
                }
            };
            a.setDefaultCellValue = function(b, c, d) {
                if (void 0 == b[a.options.cellFields.value]) {
                    var e = void 0;
                    switch (c) {
                        case "checkbox":
                            e = d && 1 == d.threeState ? "unchecked" : !1;
                            break;
                        case "image":
                            e = ""
                    }
                    void 0 != e && (b[a.options.cellFields.value] = e)
                }
            };
            a.getColumnTemplateUrl =
                function(b, c) {
                    return c ? b[a.options.columnFields.templateSettings].footer ? b[a.options.columnFields.templateSettings].footer.url : null : b[a.options.columnFields.templateSettings].header ? b[a.options.columnFields.templateSettings].header.url : null
                };
            var nb = function(b, c) {
                    c = void 0 == c ? "none" : c;
                    for (var d = '<table cellpadding="0" cellspacing="0" style="position:absolute;', d = (b ? d + 'bottom:0;">' : d + 'top:0;">') + "<tr>", e, f = 0; f < a.columnList.length; f++) e = a.columnList[f][a.options.columnFields.fixed], e = void 0 == e ? "none" :
                        e, e == c && (b ? (d += '<td iui-class="{{data[' + f + '].style.footer.general}}" data-index="' + f + '" data-element="column-footer">', d += '<div iui-class="{{data[' + f + '].style.footer.cell}}" data-element="column-footer-cell"') : (d += '<td iui-class="{{data[' + f + '].style.header.general}}" data-index="' + f + '" data-element="column-header">', d += '<div iui-class="{{data[' + f + '].style.header.cell}}" data-element="column-header-cell"'), d += ' iui-contextmenu menu-items="data[' + f + "].column." + a.options.columnFields.contextMenu + '"',
                            b ? (d += ' iui-style="overflow:hidden;width:{{data[' + f + "].width}}px;text-align:{{data[" + f + "].footerAlignment}};", d = f == a.options.expandColIndex ? d + ("padding-left:{{data[" + f + '].indent}}px;">') : d + '">', a.columnList[f][a.options.columnFields.templateSettings] && a.getColumnTemplateUrl(a.columnList[f], !0) ? (d += '<iui-item-content obj="data[' + f + "].column." + a.options.columnFields.templateSettings + '.footer.templateObj" template-url="{{data[' + f + "].column." + a.options.columnFields.templateSettings + '.footer.url}}"', d +=
                                ' data-element="footer-template-content" ng-cloak></iui-item-content>') : a.columnList[f][a.options.columnFields.footerContent] ? d += a.columnList[f][a.options.columnFields.footerContent] : a.columnList[f][a.options.columnFields.footerTemplate] ? d += '<div ng-include="' + a.columnList[f][a.options.columnFields.footerTemplate] + '" style="margin:0;padding:0"></div>' : (d += '<span iui-class="{{data[' + f + '].style.footer.content}}" data-element="cell-content"', d += ' iui-tooltip="data[' + f + "].column." + a.options.columnFields.footerTooltip +
                                '">', d += "{{data[" + f + "].column." + a.options.columnFields.footerText + "}}</span>")) : (d += ' iui-style="overflow:hidden;width:{{data[' + f + "].width}}px;text-align:{{data[" + f + "].headerAlignment}};", d = f == a.options.expandColIndex ? d + ("padding-left:{{data[" + f + '].indent}}px;">') : d + '">', d += '<span iui-class="{{data[' + f + '].style.header.content}}" data-element="cell-content"', d += ' iui-tooltip="data[' + f + "].column." + a.options.columnFields.headerTooltip + '">', d += "{{data[" + f + "].column." + a.options.columnFields.headerText +
                                "}}</span>", d += '<span iui-class="{{data[' + f + '].style.filtering}}" data-index="' + f + '" data-element="filter-button" ng-show="data[' + f + '].showFiltering"></span>', d += '<span iui-class="{{data[' + f + '].style.sorting}}" data-index="' + f + '" data-element="sort-button" ng-show="data[' + f + '].showSorting"></span>'), d += "</div>", d += "</td>");
                    return d + "</tr></table>"
                },
                ob = function(b, c, d) {
                    if ("optimal" == a.options.displayMode) {
                        c = void 0 == c ? "none" : c;
                        var e = '<tr class="iui-treegrid-row" data-index="' + b + '" data-fixed="undefined"';
                        d && (e += ' style="position:absolute;top:-9999px"');
                        for (var e = e + ">", f = 0; f < a.columnList.length; f++) d = a.columnList[f][a.options.columnFields.fixed], d = void 0 == d ? "none" : d, d == c && (e += '<td class="iui-treegrid-row-cell" data-element="cell" data-index="' + f + '">', e += "<div", e += ' class="iui-treegrid-row-cell-content" data-element="cell-content"', e += ' iui-contextmenu menu-items="data[' + b + "].row." + a.options.rowFields.contextMenu + '" menu-update="{{data[' + b + '].updateContextMenu}}"', e += ' style="width:0px;text-align:left;opacity:0;',
                            0 < a.options.rowHeight && (e += "height:" + a.options.rowHeight + "px;"), e = f == a.options.expandColIndex ? e + 'padding-left:0px;">' : e + '">', e += fd(b, f), e += "</div>", e += "</td>");
                        return e + "</tr>"
                    }
                    c = void 0 == c ? "none" : c;
                    e = '<tr iui-class="{{data[' + b + '].style}}" data-index="{{data[' + b + '].index}}" tabindex="{{data[' + b + '].tabindex}}"';
                    d && (e += ' style="position:absolute;top:-9999px"');
                    e += ">";
                    for (f = 0; f < a.columnList.length; f++) d = a.columnList[f][a.options.columnFields.fixed], d = void 0 == d ? "none" : d, d == c && (e += '<td iui-class="{{data[' +
                        b + "].cells[" + f + '].style.cell}}" data-element="cell" data-index="' + f + '" draggable="{{data[' + b + '].draggable}}" tabindex="{{data[' + b + "].cells[" + f + '].tabindex}}">', e += '<div ng-show="data[' + b + '].visible"', e += ' iui-class="{{data[' + b + "].cells[" + f + '].style.content}}" data-element="cell-content"', e += ' iui-contextmenu menu-items="data[' + b + "].row." + a.options.rowFields.contextMenu + '" menu-update="{{data[' + b + '].updateContextMenu}}"', e += ' iui-style="width:{{data[' + b + "].cells[" + f + "].width}}px;text-align:{{data[" +
                        b + "].cells[" + f + "].alignment}};", 0 < a.options.rowHeight && (e += "height:" + a.options.rowHeight + "px;"), e = f == a.options.expandColIndex ? e + ("padding-left:{{data[" + b + "].cells[" + f + '].indent}}px;">') : e + '">', e += fd(b, f), e += "</div>", e += "</td>");
                    return e + "</tr>"
                },
                fd = function(b, c) {
                    if ("optimal" == a.options.displayMode) {
                        var d = "";
                        c === a.options.expandColIndex && (d += '<span data-element="expandbox"></span><span data-element="icon"></span>');
                        var e = a.columnList[c][a.options.columnFields.editorSettings],
                            f = Oa(c);
                        switch (a.columnList[c][a.options.columnFields.editorType]) {
                            case "checkbox":
                                d +=
                                    '<iui-checkbox name="cb-' + g.getUniqueId(4) + '"';
                                e && 1 == e.threeState ? (d += ' check-state="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.value + '"', d = d + (' checkstate-changing="onCellValueChanging(e, ' + b + ", " + c + ')"') + (' checkstate-changed="onCellValueChanged(e, ' + b + ", " + c + ')"') + ' three-state="true"') : (d += ' checked="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.value + '"', d = d + (' checked-changing="onCellValueChanging(e, ' + b + ", " + c + ')"') + (' checked-changed="onCellValueChanged(e, ' + b + ", " +
                                    c + ')"'));
                                d += ' click="onEditorClick(e, ' + b + ", " + c + ')"';
                                e && e.style && (d += ' control-style="data[' + b + "].cells[" + c + '].editorStyle"');
                                d = d + (' enabled="data[' + b + "].cells[" + c + '].enabled"') + (' style="vertical-align:middle;" iui-show="{{data[' + b + "].cells[" + c + '].visible}}"') + (' iui-tooltip="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">');
                                d += "</iui-checkbox>";
                                break;
                            case "combobox":
                                d = d + ('<span iui-class="{{data[' + b + "].cells[" + c + '].style.label}}" data-element="content"') + (' iui-tooltip="data[' +
                                    b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">');
                                d += "{{data[" + b + "].cells[" + c + "].related." + a.options.cellFields.value + ".text}}";
                                d += "</span>";
                                break;
                            case "image":
                                d += '<img data-element="image" style="vertical-align:middle" ng-src="{{data[' + b + "].cells[" + c + "].related." + a.options.cellFields.value + '}}"  iui-show="{{data[' + b + "].cells[" + c + '].visible}}" show-default="true"';
                                d += ' iui-tooltip="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">';
                                break;
                            default:
                                f && "" != f ? d += '<iui-item-content obj="data[' +
                                    b + "].cells[" + c + "].related." + a.options.cellFields.templateObj + '" template-url="{{data[' + b + "].cells[" + c + '].templateUrl}}" iui-show="{{data[' + b + "].cells[" + c + '].templateVisible}}" data-element="template-content"></iui-item-content>' : (d = d + '<span class="iui-treegrid-row-cell-label" data-element="content"' + (' iui-tooltip="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">'), d += ".</span>")
                        }
                        return d
                    }
                    d = "";
                    c === a.options.expandColIndex && (d = d + ('<span iui-class="{{data[' + b + '].expandBox}}" data-element="expandbox"></span>') +
                        ('<span iui-class="{{data[' + b + '].icon}}" data-element="icon" ng-show="data[' + b + '].iconVisible"></span>'));
                    e = a.columnList[c][a.options.columnFields.editorSettings];
                    f = Oa(c);
                    switch (a.columnList[c][a.options.columnFields.editorType]) {
                        case "checkbox":
                            d += '<iui-checkbox name="cb-' + g.getUniqueId(4) + '"';
                            e && 1 == e.threeState ? (d += ' check-state="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.value + '"', d = d + (' checkstate-changing="onCellValueChanging(e, ' + b + ", " + c + ')"') + (' checkstate-changed="onCellValueChanged(e, ' +
                                b + ", " + c + ')"') + ' three-state="true"') : (d += ' checked="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.value + '"', d = d + (' checked-changing="onCellValueChanging(e, ' + b + ", " + c + ')"') + (' checked-changed="onCellValueChanged(e, ' + b + ", " + c + ')"'));
                            d += ' click="onEditorClick(e, ' + b + ", " + c + ')"';
                            e && e.style && (d += ' control-style="data[' + b + "].cells[" + c + '].editorStyle"');
                            d = d + (' enabled="data[' + b + "].cells[" + c + '].enabled"') + (' style="vertical-align:middle;" iui-show="{{data[' + b + "].cells[" + c + '].visible}}"') + (' iui-tooltip="data[' +
                                b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">');
                            d += "</iui-checkbox>";
                            break;
                        case "combobox":
                            d = d + ('<span iui-class="{{data[' + b + "].cells[" + c + '].style.label}}" data-element="content"') + (' iui-tooltip="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">');
                            d += "{{data[" + b + "].cells[" + c + "].related." + a.options.cellFields.value + ".text}}";
                            d += "</span>";
                            break;
                        case "image":
                            d += '<img data-element="image" style="vertical-align:middle" ng-src="{{data[' + b + "].cells[" + c + "].related." + a.options.cellFields.value +
                                '}}"  iui-show="{{data[' + b + "].cells[" + c + '].visible}}" show-default="true"';
                            d += ' iui-tooltip="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">';
                            break;
                        default:
                            f && "" != f ? d += '<iui-item-content obj="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.templateObj + '" template-url="{{data[' + b + "].cells[" + c + '].templateUrl}}" iui-show="{{data[' + b + "].cells[" + c + '].templateVisible}}" data-element="template-content"></iui-item-content>' : (d = d + ('<span iui-class="{{data[' + b + "].cells[" + c + '].style.label}}" data-element="content"') +
                                (' iui-tooltip="data[' + b + "].cells[" + c + "].related." + a.options.cellFields.tooltip + '">'), d += "{{data[" + b + "].cells[" + c + "].related." + a.options.cellFields.text + "}}", d += "</span>")
                    }
                    return d
                },
                Kd = function() {
                    S = 0;
                    if (0 < a.options.rowHeight) {
                        var b = {
                            top: 0,
                            bottom: 0
                        };
                        if (a.options.controlStyle && a.options.controlStyle.row && a.options.controlStyle.row.cell && a.options.controlStyle.row.cell.content) {
                            var d = angular.element('<div class="' + a.options.controlStyle.row.cell.content + '" style="position:absolute;top:-9999999px;">Temp</div>');
                            p.append(d);
                            b = g.getPadding(d[0]);
                            d.remove()
                        }
                        S = a.options.rowHeight + b.top + b.bottom + 3
                    } else if (0 < a.currentList.length && x) {
                        for (var b = [], f = [], d = [], r = [], h = [], k = [], l = 0, ba = 0; ba < a.currentList.length && 10 > ba; ba++) b.push(ob(ba, "none", !0)), f.push(c(b[ba])(x)), p.append(f[ba]), a.isThereLeftFixedColumns && (d.push(ob(ba, "left", !0)), r.push(c(d[ba])(x)), p.append(r[ba])), a.isThereRightFixedColumns && (h.push(ob(ba, "right", !0)), k.push(c(h[ba])(x)), p.append(k[ba])), l++;
                        if (0 < l) var t = e(function() {
                            for (var b = 0, c = 0, d = 0, m = 0; m < l; m++) b +=
                                f[m][0].offsetHeight, f[m].remove(), a.isThereLeftFixedColumns && (c += r[m][0].offsetHeight, r[m].remove()), a.isThereRightFixedColumns && (d += k[m][0].offsetHeight, k[m].remove());
                            S = Math.floor(Math.max(Math.max(b, c), d) / l);
                            e.cancel(t)
                        }, 1)
                    }
                },
                E = null,
                nc = 0,
                oc = 0,
                U = angular.element('<div class="iui-pagination-panel"></div>'),
                Ld = function() {
                    E && E.$destroy();
                    U.empty();
                    U.remove();
                    oc = nc = 0;
                    if (a.options.paging.showControlPanel) {
                        E = k.$new();
                        E.currentPage = 0;
                        E.minPages = 0;
                        E.numPages = a.pageList.length;
                        0 < E.numPages && 0 == E.currentPage &&
                            (E.currentPage = 1);
                        E.onFirstPage = function() {
                            a.options.enabled && (a.firstPage(), E.currentPage = a.currentPageNumber)
                        };
                        E.onLastPage = function() {
                            a.options.enabled && (a.lastPage(), E.currentPage = a.currentPageNumber)
                        };
                        E.onNextPage = function() {
                            a.options.enabled && (a.nextPage(), E.currentPage = a.currentPageNumber)
                        };
                        E.onPrevPage = function() {
                            a.options.enabled && (a.prevPage(), E.currentPage = a.currentPageNumber)
                        };
                        E.$watch("currentPage", function(b, c) {
                            a.options.enabled && b != c && 1 <= b && b <= a.pageList.length && a.setCurrentPage(b)
                        });
                        nc = p[0].clientWidth;
                        var b = "iui-pagination-panel-button";
                        a.options.enabled || (b += " iui-pagination-panel-button-disabled");
                        for (var d = "", e = 0; 6 > e; e++) switch (e) {
                            case 0:
                                d += '<span class="' + b + ' iui-pagination-first" ng-click="onFirstPage()"></span>';
                                break;
                            case 1:
                                d += '<span class="' + b + ' iui-pagination-prev" ng-click="onPrevPage()"></span>';
                                break;
                            case 2:
                                d += '<input class="iui-pagination-panel-input" ng-model="currentPage" type="number" ng-attr-min="{{minPages}}" ng-attr-max="{{numPages}}" />';
                                break;
                            case 3:
                                d +=
                                    '<span class="iui-pagination-panel-label"> / {{numPages}}</span>';
                                break;
                            case 4:
                                d += '<span class="' + b + ' iui-pagination-next" ng-click="onNextPage()"></span>';
                                break;
                            case 5:
                                d += '<span class="' + b + ' iui-pagination-last" ng-click="onLastPage()"></span>'
                        }
                        b = c(d)(E);
                        U.append(b);
                        p.append(U);
                        U.css("width", nc + "px");
                        b && (g.getMargin(b[0]), d = g.getPadding(U[0]), oc = b[0].offsetHeight + (d.top + d.bottom) - 2, U.css("height", oc + "px"));
                        a.updatePaginationPanel()
                    }
                };
            a.updatePaginationPanel = function() {
                var b = 1;
                a.options.enabled ||
                    (b = .5);
                if (U) {
                    var c = U.find("span"),
                        d;
                    if (c && 0 < c.length)
                        for (var e = 0; e < c.length; e++) d = angular.element(c[e]), d.css("opacity", b);
                    (c = U.find("input")) && 0 < c.length && (d = angular.element(c[0]), a.options.enabled ? d.removeAttr("disabled") : d.attr("disabled", "true"))
                }
            };
            a.resetPageNumber = function() {
                a.currentPageNumber = 1;
                E && (E.currentPage = 0 < E.numPages ? 1 : 0)
            };
            a.updatePageNumber = function() {
                a.currentPageNumber > a.pageList.length && (0 == a.pageList.length ? a.resetPageNumber() : (a.currentPageNumber = a.pageList.length, E && (E.currentPage =
                    a.currentPageNumber)))
            };
            var Xa = angular.element('<div class="iui-treegrid-block" style="position:absolute;top:-9999999px"></div>'),
                ha = angular.element('<div class="iui-treegrid-block iui-treegrid-block-top" style="position:absolute;top:-9999999px"></div>'),
                la = angular.element('<div class="iui-treegrid-block iui-treegrid-block-bottom" style="position:absolute;top:-9999999px"></div>'),
                Pa = angular.element('<div class="iui-treegrid-block iui-treegrid-block-left" style="position:absolute;top:-9999999px"></div>'),
                Qa = angular.element('<div class="iui-treegrid-block iui-treegrid-block-right" style="position:absolute;top:-9999999px"></div>'),
                gd = function() {
                    Xa && (Xa.empty(), Xa.remove());
                    ha && (ha.empty(), ha.remove());
                    la && (la.empty(), la.remove());
                    Pa && (Pa.empty(), Pa.remove());
                    Qa && (Qa.empty(), Qa.remove())
                },
                Md = function() {
                    if (1 < a.updateStatus) L("end");
                    else var b = e(function() {
                        if (0 < a.columnList.length && 1 == a.updateStatus) {
                            v = k.$new();
                            v.data = hd();
                            a.refreshColumns();
                            v.$apply();
                            var d;
                            for (d = N = C = 0; d < a.columnList.length; d++) {
                                var f = {
                                    columnID: void 0 != a.columnList[d][a.options.columnFields.id] ? a.columnList[d][a.options.columnFields.id] : d,
                                    avgItemHeight: 0
                                };
                                switch (a.columnList[d][a.options.columnFields.editorType]) {
                                    case "combobox":
                                        Cd(a.columnList[d].editorSettings, d, f);
                                        bb.push(f);
                                        break;
                                    default:
                                        bb.push(f)
                                }
                            }
                            a.options.showHeader && (p.append(ha), aa && (ua.css("opacity", V.opacity), ha.css("opacity", V.opacity)), d = nb(), ea = angular.element(c(d)(v)), ha.append(ea), a.isThereLeftFixedColumns && (d = nb(!1, "left"), Z = c(d)(v), ha.append(Z), Z.css("z-index",
                                "2"), Z.addClass("iui-treegrid-column-header-left")), a.isThereRightFixedColumns && (d = nb(!1, "right"), R = c(d)(v), ha.append(R), R.css("right", "0"), R.css("z-index", "1"), R.addClass("iui-treegrid-column-header-right")));
                            a.options.showFooter && (p.append(la), aa && (pa.css("opacity", V.opacity), la.css("opacity", V.opacity)), d = nb(!0), ta = c(d)(v), la.append(ta), a.isThereLeftFixedColumns && (d = nb(!0, "left"), ka = c(d)(v), la.append(ka), ka.css("z-index", "2"), ka.addClass("iui-treegrid-column-footer-left")), a.isThereRightFixedColumns &&
                                (d = nb(!0, "right"), Y = c(d)(v), la.append(Y), Y.css("right", "0"), Y.css("z-index", "1"), Y.addClass("iui-treegrid-column-footer-right")));
                            var r, g;
                            d = -1;
                            for (f = 0; f < a.columnList.length; f++)
                                if (g = r = null, a.columnList[f][a.options.columnFields.templateSettings] && a.getColumnTemplateUrl(a.columnList[f]) ? (r = a.columnList[f][a.options.columnFields.templateSettings].header, d = 1) : a.columnList[f][a.options.columnFields.headerContent] ? (r = a.columnList[f][a.options.columnFields.headerContent], d = 2) : a.columnList[f][a.options.columnFields.headerTemplate] &&
                                    (r = a.columnList[f][a.options.columnFields.headerTemplate], d = 3), a.columnList[f][a.options.columnFields.templateSettings] && a.getColumnTemplateUrl(a.columnList[f], !0) ? g = a.columnList[f][a.options.columnFields.templateSettings].footer : a.columnList[f][a.options.columnFields.footerContent] ? g = a.columnList[f][a.options.columnFields.footerContent] : a.columnList[f][a.options.columnFields.footerTemplate] && (g = a.columnList[f][a.options.columnFields.footerTemplate]), (r || g) && (g = a.getElemFromColumn(a.columnList[f],
                                        a.columnList[f][a.options.columnFields.fixed])) && r && r && (g = a.getChildElement(g, "column-header-cell"))) switch (g.empty(), d) {
                                    case 1:
                                        v && (r = '<iui-item-content obj="data[' + f + "].column." + a.options.columnFields.templateSettings + '.header.templateObj" template-url="{{data[' + f + "].column." + a.options.columnFields.templateSettings + '.header.url}}" draggable="{{data[' + f + '].draggable}}"', r += ' data-element="header-template-content" ng-cloak></iui-item-content>', g.append(c(r)(v)));
                                        break;
                                    case 2:
                                        g.append(c(r)(k.$parent));
                                        break;
                                    case 3:
                                        r = '<div ng-include="' + r + '"', a.columnList[f][a.options.columnFields.headerTemplateModel] && (r += ' onload="' + a.columnList[f][a.options.columnFields.headerTemplateModel] + '"'), r += ' style="margin:0;padding:0"></div>', g.append(c(r)(k.$parent))
                                }
                                qa(40);
                            L("rows")
                        } else qa(70), L("scroll");
                        e.cancel(b)
                    }, 1)
                },
                Nd = function() {
                    if (1 < a.updateStatus) L("end");
                    else var b = e(function() {
                        var d = 0;
                        a.options.paging.enabled && U && (d = U[0].offsetHeight);
                        if (0 < a.columnList.length) {
                            var f = 0;
                            if (a.options.showHeader && ea) {
                                C = ea[0].offsetHeight;
                                a.isThereLeftFixedColumns && Z ? C = Z[0].offsetHeight : a.isThereRightFixedColumns && R && (C = R[0].offsetHeight);
                                var r = 0,
                                    g = ea.find("td");
                                if (g && 0 < g.length)
                                    for (var h = 0; h < g.length; h++) var l = angular.element(g[h]),
                                        r = r + l[0].offsetWidth;
                                r > p[0].clientWidth && (r = angular.element('<div class="iui-scrollbar-horizontal"><div class="iui-scroll-button-thumb-horizontal"></div></div>'), r.css("bottom", "-9999px"), p.append(r), f = r[0].offsetHeight, r.remove());
                                ha.css("width", p[0].clientWidth + "px");
                                ha.css("height", C + "px");
                                a.isThereLeftFixedColumns &&
                                    (P = Z[0].offsetWidth, jb = p[0].clientHeight - C - N, ea.css("left", P + "px"));
                                a.isThereRightFixedColumns && (oa = R[0].offsetWidth, kb = p[0].clientHeight - C - N)
                            }
                            a.options.showFooter && (N = ta[0].offsetHeight, a.isThereLeftFixedColumns && ka ? N = ka[0].offsetHeight : a.isThereRightFixedColumns && Y && (N = Y[0].offsetHeight), la.css("width", p[0].clientWidth + "px"), la.css("height", N + "px"), a.isThereLeftFixedColumns && (P = ka[0].offsetWidth, jb = p[0].clientHeight - C - N, ta.css("left", P + "px")), a.isThereRightFixedColumns && (oa = Y[0].offsetWidth, kb =
                                p[0].clientHeight - C - N));
                            id();
                            if (0 < a.currentList.length) {
                                x = k.$new();
                                x.data = pc();
                                a.refreshRows();
                                x.$apply();
                                Kd();
                                var ba = e(function() {
                                    Tc();
                                    fa && fa.remove();
                                    Ja && Ja.remove();
                                    Ka && Ka.remove();
                                    var b = p[0].clientHeight - d - (C + N) - f;
                                    D = 0 < S ? Math.floor(b / S) + 1 : 0 < C ? Math.floor(b / C) + 1 : 100;
                                    ga = 0;
                                    for (var b = "", m = 0; m < D; m++) b += ob(m), ga++;
                                    if (0 < ga) {
                                        fa = angular.element('<table cellpadding="0" cellspacing="0" style="position:absolute;top:' + C + 'px;"></table>');
                                        fa.append(c(b)(x));
                                        Xa.append(fa);
                                        if (a.isThereLeftFixedColumns) {
                                            fa.css("left",
                                                P + "px");
                                            b = "";
                                            for (m = ga = 0; m < D; m++) b += ob(m, "left"), ga++;
                                            0 < ga && (Ja = angular.element('<table class="iui-treegrid-rows-left" cellpadding="0" cellspacing="0" style="position:absolute;"></table>'), Ja.append(c(b)(x)), Pa.append(Ja), p.append(Pa), aa && (Ea.css("opacity", V.opacity), Pa.css("opacity", V.opacity)))
                                        }
                                        if (a.isThereRightFixedColumns) {
                                            b = "";
                                            for (m = ga = 0; m < D; m++) b += ob(m, "right"), ga++;
                                            0 < ga && (Ka = angular.element('<table class="iui-treegrid-rows-right" cellpadding="0" cellspacing="0" style="position:absolute;"></table>'),
                                                Ka.append(c(b)(x)), Qa.append(Ka), p.append(Qa), aa && (va.css("opacity", V.opacity), Qa.css("opacity", V.opacity)))
                                        }
                                    }
                                    qa(70);
                                    L("scroll");
                                    e.cancel(ba)
                                }, 1)
                            } else qa(70), L("scroll")
                        } else qa(70), L("scroll");
                        e.cancel(b)
                    }, 1)
                },
                Od = function() {
                    switch (V.type) {
                        case "circular":
                            1 == a.updateStatus && (jd(), pb = 0, Ra = !0, a.callLoadComplete());
                            break;
                        case "linear":
                            kd(!1);
                            break;
                        default:
                            pb = 0, Ra = !0, 1 == a.updateStatus && a.callLoadComplete()
                    }
                    a.updateActive = !1;
                    a.updateStatus--;
                    if (0 < a.updateStatus) qb = a.updateActive = !0, 1 == a.updateStatus ? L("start") :
                        L("end");
                    else if (qc()) var b = e(function() {
                        "optimal" == a.options.displayMode && a.updateGridElements();
                        a.updateView();
                        a.callUpdateComplete();
                        e.cancel(b)
                    }, 1);
                    else "optimal" == a.options.displayMode && (a.updateGridElements(), a.updateView()), a.callUpdateComplete()
                },
                Db = [],
                Eb = [],
                Fb = [];
            a.updateGridElements = function() {
                if ("optimal" == a.options.displayMode) {
                    var b = 0,
                        c = "none";
                    Db.length = 0;
                    Eb.length = 0;
                    Fb.length = 0;
                    for (var d = Db; 3 > b;) {
                        if ((c = a.getRowElems(c)) && 0 < c.length)
                            for (var e, f, g = 0; g < c.length; g++) {
                                e = angular.element(c[g]);
                                f = {
                                    rowElem: e,
                                    cellList: []
                                };
                                if (g < D) {
                                    e = e.find("td");
                                    for (var h = 0; h < e.length; h++) {
                                        var k = angular.element(e[h]),
                                            l = a.getContentElement(k);
                                        if (l) {
                                            var p = h;
                                            k[0].attributes && k[0].attributes["data-index"] && (p = parseInt(k[0].attributes["data-index"].value, 10));
                                            k = {
                                                cell: k,
                                                block: l,
                                                expandBox: null,
                                                icon: null,
                                                content: null
                                            };
                                            p == a.options.expandColIndex && (k.expandBox = angular.element(a.getContentElement(l, "expandbox")), k.icon = angular.element(a.getContentElement(l, "icon")));
                                            var t = "content";
                                            switch (a.columnList[p][a.options.columnFields.editorType]) {
                                                case "checkbox":
                                                    t =
                                                        "checkbox";
                                                    break;
                                                case "image":
                                                    t = "image";
                                                    break;
                                                default:
                                                    (p = Oa(p)) && "" != p && (t = "template-content")
                                            }
                                            k.content = angular.element(a.getContentElement(l, t));
                                            f.cellList.push(k)
                                        }
                                    }
                                }
                                d.push(f)
                            }
                        b++;
                        1 == b ? (c = "left", d = Eb) : (c = "right", d = Fb)
                    }
                }
            };
            var L = function(b) {
                    if (qb && !Ya) switch (b) {
                        case "start":
                            1 < a.updateStatus ? L("end") : (a.updateColumnList(), a.options.paging.enabled && a.updatePageList(), a.updateCurrentList(), qa(10), L("init"));
                            break;
                        case "init":
                            1 < a.updateStatus ? L("end") : (bb.length = 0, Nc(), Rb || na || lc(), gd(), ta = ea = fa = null,
                                jb = P = 0, Ja = Z = null, kb = oa = 0, Ka = R = null, v && v.$destroy(), x && x.$destroy(), a.options.paging.enabled && Ld(), p.append(Xa), qa(20), L("columns"));
                            break;
                        case "columns":
                            Md();
                            break;
                        case "rows":
                            ha ? a.options.showHeader && ha.find("td").length < a.columnList.length ? e(function() {
                                L(b)
                            }, 1) : Nd() : e(function() {
                                L(b)
                            }, 1);
                            break;
                        case "scroll":
                            1 < a.updateStatus ? L("end") : (1 == a.updateStatus && (Xa && (W.empty(), W.append(Xa.children())), ha && (ua.empty(), ua.append(ha.children()), a.options.showHeader && (ua.css("width", p[0].clientWidth + "px"), ua.css("height",
                                C + "px")), p.append(ua)), la && (pa.empty(), pa.append(la.children()), a.options.showFooter && (pa.css("width", p[0].clientWidth + "px"), pa.css("height", N + "px")), p.append(pa)), Pa && (Ea.empty(), Ea.append(Pa.children()), p.append(Ea)), Qa && (va.empty(), va.append(Qa.children()), p.append(va)), a.updateViewSize(), a.updateViewSize(), a.updateScrollVisibility(), a.updateScrollView()), qa(80, "complete"), L("complete"));
                            break;
                        case "complete":
                            1 < a.updateStatus ? L("end") : (gd(), qa(90), L("events"));
                            break;
                        case "events":
                            1 < a.updateStatus ||
                                (a.allowEvents = !0, a.options.showHeader && (ea && hc(ea), a.isThereLeftFixedColumns && Z && hc(Z), a.isThereRightFixedColumns && R && hc(R)), 0 < a.currentList.length && Hd(), qa(100));
                            L("end");
                            break;
                        case "end":
                            Od()
                    } else e(function() {
                        L(b)
                    }, 1)
                },
                ld = 5,
                Wb = 0,
                Za = 0,
                Xb = 0,
                md = 0,
                Ya = !1,
                Yb = !1,
                V = {
                    type: "none",
                    speed: "normal",
                    opacity: 0
                },
                rc = null,
                aa = !1,
                Ra = !1,
                kd = function(b) {
                    var c = f(function() {
                        b ? Za++ : Za--;
                        Xb = (p[0].clientHeight - Za) / 2 + 2;
                        Gb.css("height", Za + "px");
                        Fa.css("top", Xb + "px");
                        b && Za >= ld ? (aa = !0, qa(0), Ra = Ya = !1, f.cancel(c)) : !b && 0 >= Za && (Fa &&
                            Fa.remove(), pb = 0, Ra = !0, a.callLoadComplete(), f.cancel(c))
                    }, 20)
                },
                jd = function() {
                    rc && f.cancel(rc);
                    xa && xa.remove()
                };
            a.beginLoad = function(a) {
                if (!Ya) switch (Ya = !0, V = a ? {
                    type: void 0 != a.type ? a.type : "none",
                    speed: void 0 != a.speed ? a.speed : "normal",
                    opacity: void 0 != a.opacity ? a.opacity : 0
                } : {
                    type: "none",
                    speed: "normal",
                    opacity: 0
                }, sc(V.opacity), V.type) {
                    case "circular":
                        jd();
                        p.append(xa);
                        xa.css("top", (p[0].clientHeight - xa[0].offsetHeight) / 2 + "px");
                        xa.css("left", (p[0].clientWidth - xa[0].offsetWidth) / 2 + "px");
                        aa = !0;
                        Ra = Ya = !1;
                        var b = 0,
                            c = 3;
                        switch (V.speed) {
                            case "veryfast":
                                c = 7;
                                break;
                            case "fast":
                                c = 5;
                                break;
                            case "slow":
                                c = 2;
                                break;
                            case "veryslow":
                                c = 1
                        }
                        rc = f(function() {
                            b += c;
                            360 < b && (b = 0);
                            var a = "rotate(" + b + "deg)";
                            xa.css("-ms-transform", a);
                            xa.css("-webkit-transform", a);
                            xa.css("transform", a)
                        }, 1);
                        break;
                    case "linear":
                        a = angular.element('<div class="iui-load-block-progress" style="position:absolute;left:-9999px"></div>');
                        p.append(a);
                        ld = parseInt(getComputedStyle(a[0]).height, 10);
                        a.remove();
                        Gb.css("width", "0px");
                        Gb.css("height", "0px");
                        p.append(Fa);
                        pb = 0;
                        Wb = Math.floor(.5 * p[0].clientWidth);
                        Za = 0;
                        Xb = p[0].clientHeight / 2 + 2;
                        md = (p[0].clientWidth - Wb) / 2;
                        Fa.css("width", Wb + "px");
                        Fa.css("top", Xb + "px");
                        Fa.css("left", md + "px");
                        Fa.css("opacity", "1");
                        kd(!0);
                        break;
                    default:
                        aa = !0, Ra = Ya = !1
                }
            };
            a.endLoad = function(b) {
                if (!Yb)
                    if (Yb = !0, b = a.options.loadRows.indexOf(b), 0 <= b && a.options.loadRows.splice(b, 1), aa) {
                        aa = !1;
                        var c = 3,
                            d = V.opacity,
                            e = f(function() {
                                Ra && (10 < c || 1 <= d ? (sc(1), Yb = Ya = Ra = !1, V = {
                                    type: "none",
                                    speed: "normal"
                                }, f.cancel(e)) : (d += c / 10, sc(d), c += 3))
                            }, 1)
                    } else Yb = !1
            };
            var sc =
                function(a) {
                    ua && ua.css("opacity", a);
                    pa && pa.css("opacity", a);
                    Ea && Ea.css("opacity", a);
                    W && W.css("opacity", a);
                    va && va.css("opacity", a);
                    A && A.css("opacity", a);
                    I && I.css("opacity", a);
                    ya && ya.css("opacity", a)
                },
                Gb = angular.element('<div class="iui-load-block-progress"></div>'),
                Fa = angular.element('<div class="iui-load-block"></div>');
            Fa.append(Gb);
            var pb = 0,
                qb = !1,
                xa = angular.element('<div class="iui-load-circular"></div>'),
                qa = function(a) {
                    if (aa && "linear" == V.type) {
                        qb = !1;
                        var b = Math.floor(Wb * a / 100),
                            c = pb;
                        a = 10;
                        switch (V.speed) {
                            case "veryfast":
                                a =
                                    2;
                                break;
                            case "fast":
                                a = 5;
                                break;
                            case "slow":
                                a = 15;
                                break;
                            case "veryslow":
                                a = 20
                        }
                        var d = b > c ? Math.floor((b - c) / a) : 1,
                            d = 0 < d ? d : 1,
                            e = f(function() {
                                c += d;
                                Gb.css("width", c + "px");
                                c >= b && (pb = b, qb = !0, f.cancel(e))
                            }, 1)
                    } else qb = !0
                };
            a.updateStatus = 0;
            a.updateActive = !1;
            a.updateLayout = function(b) {
                b = !0;
                for (var c = p.parent();
                    "body" != c[0].tagName.toLowerCase();) {
                    if ("none" == getComputedStyle(c[0]).display) {
                        b = !1;
                        break
                    }
                    c = c.parent()
                }
                b && a.allowUpdate && (a.updateStatus++, a.updateActive || (a.updateActive = !0, a.allowEvents = !1, p.removeClass("iui-treegrid-block-rtl"),
                    a.options.rtl && p.addClass("iui-treegrid-block-rtl"), W.removeClass("iui-treegrid-block-shift-left iui-treegrid-block-rtl"), W.addClass($a()), S = 0, D = 100, N = C = 0, qb = !0, L("start")))
            };
            a.updateCurrentLayout = function(b) {
                if (a.allowUpdate)
                    if (0 == a.currentList.length) a.updateLayout();
                    else {
                        a.options.paging.enabled && (a.updatePageList(), E && (E.minPages = 0 < a.pageList.length ? 1 : 0, E.numPages = a.pageList.length), a.updatePageNumber());
                        a.updateCurrentList();
                        a.updateView();
                        var c = e(function() {
                            a.updateViewSize();
                            a.updateViewSize();
                            b || a.updateScrollVisibility();
                            a.updateScrollView();
                            e.cancel(c)
                        }, 1)
                    }
            };
            var Pd = function(b, c) {
                    var d = a.options.enabled && a.options.allowColumnReorder && b[a.options.columnFields.allowDrag],
                        e = b[a.options.columnFields.headerAlignment],
                        f = b[a.options.columnFields.footerAlignment],
                        g = a.isFilteringAllowed(b),
                        h = a.isSortingAllowed() && b == a.sortColumn,
                        k = a.getColumnWidth(b),
                        k = 0 <= k ? k : 0,
                        l = tc(b);
                    k < l.min && (k = l.min);
                    k > l.max && (k = l.max);
                    return {
                        draggable: d,
                        headerAlignment: e,
                        footerAlignment: f,
                        index: c,
                        indent: 0,
                        column: b,
                        showFiltering: g,
                        showSorting: h,
                        style: {
                            header: {},
                            footer: {}
                        },
                        width: k
                    }
                },
                nd = function(b, c) {
                    var d = 0;
                    if (c == a.options.expandColIndex) {
                        var e, f = a.columnList[a.options.expandColIndex],
                            d = a.getColumnWidth(f),
                            h = d - a.indentList[b],
                            h = 0 <= h ? h : 0;
                        e = {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        };
                        (f = a.getElemFromColumn(f, f[a.options.columnFields.fixed])) && (f = a.getChildElement(f, "column-header-cell")) && (e = g.getPadding(f[0]));
                        e = e.left + a.indentList[b];
                        0 == h && (e = d);
                        d = e
                    }
                    return d
                },
                uc = function(b, c, d) {
                    var e = c;
                    d && (d = a.columnList[c][a.options.columnFields.id]) &&
                        (e = a.getCellIndexById(a.currentList[b][a.options.rowFields.cells], c, d));
                    return e
                },
                od = function(b) {
                    return a.columnList[b][a.options.columnFields.contentAlignment] ? a.columnList[b][a.options.columnFields.contentAlignment] : "left"
                },
                pd = function(b, c) {
                    var d = a.columnList[c],
                        e = a.getColumnWidth(d),
                        d = tc(d);
                    e < d.min && (e = d.min);
                    e > d.max && (e = d.max);
                    c == a.options.expandColIndex && (e -= a.indentList[b]);
                    return 0 <= e ? e : 0
                },
                vc = function(b, c) {
                    return 1 == a.options.allowFocus && 1 == a.options.allowCellFocus && a.isRowEnabled(a.currentList[b]) &&
                        0 <= c ? a.getTabIndex().toString() + (b + 1).toString() + c.toString() : ""
                },
                qd = function(b) {
                    return 1 == a.options.allowFocus && 0 == a.options.allowCellFocus && a.isRowEnabled(a.currentList[b]) ? a.getTabIndex().toString() + (b + 1).toString() : ""
                },
                rd = function(b, c) {
                    if (0 <= c) {
                        var d = a.currentList[b][a.options.rowFields.cells];
                        if (c < d.length) return d[c]
                    }
                    return {}
                },
                Oa = function(b) {
                    return a.columnList[b][a.options.columnFields.cellTemplateUrl] ? a.columnList[b][a.options.columnFields.cellTemplateUrl] : ""
                },
                Qd = function(b, c, d) {
                    for (var e = [], f = 0; f < a.columnList.length; f++) {
                        var g = uc(c, f, d),
                            h = d ? rd(c, g) : {},
                            k = od(f),
                            l = a.columnList[f][a.options.columnFields.editorSettings],
                            l = l && l.style ? l.style : null,
                            p;
                        if (d) a: {
                            if (0 <= g && (p = a.currentList[c][a.options.rowFields.cells], g < p.length)) {
                                p = 1 == a.options.enabled && p[g][a.options.cellFields.enabled];
                                break a
                            }
                            p = 1 == a.options.enabled
                        } else p = !1;
                        var t = d ? nd(c, f) : 0,
                            u = g,
                            x = d ? vc(c, f) : "",
                            y = Oa(f),
                            A;
                        if (d) {
                            var v = c;
                            A = g;
                            var z = Oa(f),
                                v = rd(v, A);
                            A = 0 <= A && z && "" != z && v && void 0 != v[a.options.cellFields.templateObj] && null != v[a.options.cellFields.templateObj] ?
                                !0 : !1
                        } else A = !1;
                        if (d) a: {
                            if (0 <= g && (z = a.currentList[c][a.options.rowFields.cells], g < z.length)) {
                                z = z[g][a.options.cellFields.text];
                                break a
                            }
                            z = ""
                        } else z = "";
                        if (d) a: {
                            if (0 <= g && (v = a.currentList[c][a.options.rowFields.cells], g < v.length)) {
                                v = v[g][a.options.cellFields.value];
                                break a
                            }
                            v = null
                        } else v = null;
                        g = {
                            related: h,
                            alignment: k,
                            editorStyle: l,
                            enabled: p,
                            indent: t,
                            index: u,
                            style: {},
                            tabindex: x,
                            templateUrl: y,
                            templateVisible: A,
                            text: z,
                            value: v,
                            visible: d ? 0 <= g ? !0 : !1 : !1,
                            width: d ? pd(c, f) : 0
                        };
                        e.push(g)
                    }
                    return {
                        cells: e,
                        expandBox: d ?
                            Oc(b) : "",
                        draggable: d ? a.isRowEnabled(b) && a.isDragAllowed(b) : !1,
                        icon: d ? ed(b) : "",
                        iconVisible: d ? 0 != a.options.showIcons && (b.icon || a.options.rowIcon) : !1,
                        index: c,
                        row: d ? b : {},
                        style: {},
                        tabindex: d ? qd(c) : "",
                        updateContextMenu: d ? null != b[a.options.rowFields.contextMenu] : !1,
                        visible: d
                    }
                },
                hd = function() {
                    for (var b = [], c = 0; c < a.columnList.length; c++) b.push(Pd(a.columnList[c], c));
                    return b
                },
                pc = function() {
                    for (var b = [], c = y; c < y + D; c++) b.push(Qd(a.currentList[c], c, c < a.currentList.length));
                    return b
                },
                id = function() {
                    for (var b = 0; b <
                        a.columnList.length; b++)
                        if (a.isFilteringAllowed(a.columnList[b])) {
                            var c = a.getElemFromColumn(a.columnList[b], a.columnList[b][a.options.columnFields.fixed]);
                            c && (c = a.getChildElement(c, "column-header-cell")) && (c = a.getContentElement(c, "filter-button")) && (c.css("top", (C - parseInt(getComputedStyle(c[0]).height, 10)) / 2 - 1 + "px"), c.css("right", "2px"))
                        }
                    a.isSortingAllowed() && a.sortColumn && (b = a.getElemFromColumn(a.sortColumn, a.sortColumn[a.options.columnFields.fixed])) && (c = a.getChildElement(b, "column-header-cell")) &&
                        (c = a.getContentElement(c, "sort-button")) && (c.css("top", (C - parseInt(getComputedStyle(c[0]).height, 10)) / 2 - 1 + "px"), a.isFilteringAllowed(a.sortColumn) ? c.css("right", "22px") : c.css("right", "2px"))
                };
            a.getRowScope = function() {
                return x
            };
            var td = function() {
                    if (v && x && (a.allowEvents = !1, wc(!1), 0 < a.columnList.length && (v.data = hd(), x.data = pc(), a.options.selectedRow && !a.isRowEnabled(a.options.selectedRow) && (a.options.selectedRow[a.options.rowFields.selected] = !1, a.options.selectedRow = null, a.updateSelectionList()), a.refresh(null,
                            null, !1), v.$apply(), x.$apply(), id(), a.allowEvents = !0, 0 >= a.options.rowHeight && qc() && (a.isThereLeftFixedColumns || a.isThereRightFixedColumns))))
                        for (var b = y; 0 <= b && b < y + D && b < a.currentList.length; b++) sd(a.currentList[b])
                },
                xc = function(b, c) {
                    var d = 0;
                    if (b && x) {
                        var e = a.getElemFromRow(b, c);
                        e && (d = e[0].offsetHeight)
                    }
                    return d
                },
                qc = function() {
                    for (var b = !1, c = 0; c < a.columnList.length; c++) {
                        var d = Oa(c);
                        if (d && "" != d) {
                            b = !0;
                            break
                        }
                    }
                    return b
                },
                yc = function(b, c) {
                    var d = a.getElemFromRow(b, c);
                    if (d && (d = d.find("td")) && 0 < d.length)
                        for (var e =
                                0; e < d.length; e++) {
                            var f = angular.element(d[e]);
                            (f = a.getContentElement(f)) && f.css("height", "auto")
                        }
                },
                zc = function(b, c, d) {
                    if ((b = a.getElemFromRow(b, c)) && (b = b.find("td")) && 0 < b.length)
                        for (c = 0; c < b.length; c++) {
                            var e = angular.element(b[c]),
                                e = a.getContentElement(e),
                                f = g.getBorderWidth(e[0]),
                                h = g.getPadding(e[0]);
                            e && e.css("height", d - (f.top + f.bottom) - (h.top + h.bottom) - 2.85 + "px")
                        }
                },
                sd = function(a) {
                    yc(a, "none");
                    yc(a, "left");
                    yc(a, "right");
                    var b = xc(a),
                        c = xc(a, "left"),
                        d = xc(a, "right"),
                        b = Math.max(Math.max(b, c), d);
                    zc(a, "none",
                        b);
                    zc(a, "left", b);
                    zc(a, "right", b)
                };
            a.updateView = function(b, c) {
                if (b) td(), a.updateCurrentView(c);
                else var d = e(function() {
                    td();
                    a.updateCurrentView(c);
                    e.cancel(d)
                }, 1)
            };
            a.updateVerticalScrollView = function() {
                if (x && (a.allowEvents = !1, wc(!1), x.data = pc(), a.refresh(null, null, !1, !0), x.$apply(), a.updateCurrentView(!0), a.allowEvents = !0, 0 >= a.options.rowHeight && qc() && (a.isThereLeftFixedColumns || a.isThereRightFixedColumns)))
                    for (var b = y; 0 <= b && b < y + D && b < a.currentList.length; b++) sd(a.currentList[b])
            };
            a.updateCurrentView =
                function(b) {
                    if ("optimal" == a.options.displayMode)
                        for (var c = 0, d = "none", e = Db; 3 > c;) {
                            var f = 0,
                                g = a.columnList.length,
                                h = 0;
                            if ("none" == d && b)
                                for (var f = Bb, g = Cb, k = 0; k < f && k < a.columnList.length; k++) a.isColumnFixed(a.columnList[k]) || h++;
                            if (e && 0 < e.length)
                                for (k = 0; k < e.length; k++)
                                    if (k < D && k < a.currentList.length && k + y < a.currentList.length) {
                                        var l = a.currentList[k + y];
                                        e[k].rowElem && (e[k].rowElem.attr("data-index", k + y), e[k].rowElem.attr("tabindex", qd(k + y)));
                                        for (var p = h, t = f; t <= g && t < a.columnList.length; t++) {
                                            var u = a.columnList[t][a.options.columnFields.fixed] ?
                                                a.columnList[t][a.options.columnFields.fixed] : "none";
                                            if (u == d && p < e[k].cellList.length) {
                                                e[k].cellList[p].block.css("width", pd(k + y, t) + "px");
                                                e[k].cellList[p].block.css("text-align", od(t));
                                                e[k].cellList[p].block.css("opacity", 1);
                                                e[k].cellList[p].cell.attr("draggable", a.isRowEnabled(l) && a.isDragAllowed(l));
                                                e[k].cellList[p].cell.attr("tabindex", vc(k + y, t));
                                                var u = "",
                                                    v = uc(k + y, t, !0);
                                                0 <= v && v < a.currentList[k + y][a.options.rowFields.cells].length && (t == a.options.expandColIndex && (e[k].cellList[p].block.css("padding-left",
                                                    nd(k + y, t) + "px"), e[k].cellList[p].expandBox && (e[k].cellList[p].expandBox.removeAttr("class"), e[k].cellList[p].expandBox.addClass(Oc(l))), e[k].cellList[p].icon && (e[k].cellList[p].icon.removeAttr("class"), e[k].cellList[p].icon.addClass(ed(l)))), u = l[a.options.rowFields.cells][v][a.options.cellFields.text], "combobox" == a.columnList[t][a.options.columnFields.editorType] && (u = l[a.options.rowFields.cells][v][a.options.cellFields.value] ? l[a.options.rowFields.cells][v][a.options.cellFields.value].text : ""));
                                                if (e[k].cellList[p].content) switch (a.columnList[t][a.options.columnFields.editorType]) {
                                                    case "checkbox":
                                                        break;
                                                    case "image":
                                                        break;
                                                    default:
                                                        (v = Oa(t)) && "" != v || e[k].cellList[p].content.html(u)
                                                }
                                                p++
                                            }
                                        }
                                    } else
                                        for (e[k].rowElem && (e[k].rowElem.attr("data-index", k + y), e[k].rowElem.attr("tabindex", "")), p = h, t = f; t <= g && t < a.columnList.length; t++)
                                            if (u = a.columnList[t][a.options.columnFields.fixed] ? a.columnList[t][a.options.columnFields.fixed] : "none", u == d && p < e[k].cellList.length) {
                                                v = t;
                                                e[k].cellList[p].block.css("width", "0px");
                                                e[k].cellList[p].cell.attr("draggable", !1);
                                                e[k].cellList[p].cell.attr("tabindex", "");
                                                v == a.options.expandColIndex &&
                                                    (e[k].cellList[p].block.css("padding-left", "0px"), e[k].cellList[p].expandBox && e[k].cellList[p].expandBox.removeAttr("class"), e[k].cellList[p].icon && e[k].cellList[p].icon.removeAttr("class"));
                                                if (e[k].cellList[p].content) {
                                                    switch (a.columnList[v][a.options.columnFields.editorType]) {
                                                        case "checkbox":
                                                            break;
                                                        case "image":
                                                            break;
                                                        default:
                                                            (v = Oa(t)) && "" != v || e[k].cellList[p].content.html("")
                                                    }
                                                    e[k].cellList[p].content.attr("draggable", !1);
                                                    e[k].cellList[p].content.attr("tabindex", vc(k + y, t))
                                                }
                                                p++
                                            }
                            c++;
                            1 == c ? (d = "left",
                                e = Eb) : (d = "right", e = Fb)
                        }
                };
            var Ac = function(b, c, d) {
                    var e = {
                        cell: "",
                        content: "",
                        general: "",
                        label: ""
                    };
                    switch (c) {
                        case "column":
                            d ? (c = a.defaultStyle.column.footer.normal, a.options.controlStyle.column.footer.normal != c && (c += " " + a.options.controlStyle.column.footer.normal), e.general = c, e.cell = "iui-treegrid-column-footer-cell", c = a.defaultStyle.column.footer.content, a.options.controlStyle.column.footer.content != c && (c += " " + a.options.controlStyle.column.footer.content)) : (c = a.defaultStyle.column.header.normal, a.options.controlStyle.column.header.normal !=
                                c && (c += " " + a.options.controlStyle.column.header.normal), e.general = c, e.cell = "iui-treegrid-column-header-cell", c = a.defaultStyle.column.header.content, a.options.controlStyle.column.header.content != c && (c += " " + a.options.controlStyle.column.header.content));
                            e.content = c;
                            break;
                        case "row":
                            c = a.defaultStyle.row.general.normal;
                            a.options.controlStyle.row.general.normal != c && (c += " " + a.options.controlStyle.row.general.normal);
                            e.general = c;
                            break;
                        case "cell":
                            c = a.defaultStyle.row.cell.normal;
                            a.options.controlStyle.row.cell.normal !=
                                c && (c += " " + a.options.controlStyle.row.cell.normal);
                            switch (a.options.gridLines) {
                                case "none":
                                    c = b == y + D - 1 || b == a.currentList.length - 1 ? c + " iui-treegrid-lines-horizontal" : c + " iui-treegrid-lines-none";
                                    break;
                                case "horizontal":
                                    c += " iui-treegrid-lines-horizontal";
                                    break;
                                case "vertical":
                                    c = b == y + D - 1 || b == a.currentList.length - 1 ? c + " iui-treegrid-lines-both" : c + " iui-treegrid-lines-vertical";
                                    break;
                                default:
                                    c += " iui-treegrid-lines-both"
                            }
                            e.general = c;
                            c = a.defaultStyle.row.cell.content;
                            a.options.controlStyle.row.cell.content !=
                                c && (c += " " + a.options.controlStyle.row.cell.content);
                            e.content = c;
                            e.label = a.getDefaultCellLabelClass()
                    }
                    return e
                },
                ud = function(b) {
                    var c = "";
                    a.isFilteringAllowed(b) && (b = a.getObjState(b), c = "iui-filtering", "selected" == b ? c += " iui-filtering-selected" : "hovered" == b && (c += " iui-filtering-hovered"));
                    return c
                },
                vd = function(b) {
                    var c = "";
                    a.isSortingAllowed() && b == a.sortColumn && (b = a.getObjState(b), "ascending" == a.options.sorting ? (c = "iui-sort-ascending", "selected" == b ? c += " iui-sort-ascending-selected" : "hovered" == b && (c += " iui-sort-ascending-hovered")) :
                        (c = "iui-sort-descending", "selected" == b ? c += " iui-sort-descending-selected" : "hovered" == b && (c += " iui-sort-descending-hovered")));
                    return c
                },
                Sa = function(b, c, d, e) {
                    var f = a.getObjState(b);
                    d = Ac(d, b.type, e);
                    switch (b.type) {
                        case "column":
                            e ? (c = a.getCurrentColumnStyle(b, "footer", f), c != a.options.controlStyle.column.footer.normal && (d.general += " " + c), b = a.getCurrentColumnStyle(b, "footer", "content"), b != a.options.controlStyle.column.footer.content && (d.content += " " + b)) : (c = a.getCurrentColumnStyle(b, "header", f), c != a.options.controlStyle.column.header.normal &&
                                (d.general += " " + c), b = a.getCurrentColumnStyle(b, "header", "content"), b != a.options.controlStyle.column.header.content && (d.content += " " + b));
                            break;
                        case "row":
                            b = a.getCurrentRowStyle(b, f);
                            b != a.options.controlStyle.row.general.normal && (d.general += " " + b);
                            break;
                        case "cell":
                            e = a.getCurrentCellStyle(c, b, f), e != a.options.controlStyle.row.cell.normal && (d.general += " " + e), b = a.getCurrentCellStyle(c, b, "content"), b != a.options.controlStyle.row.cell.content && (d.content += " " + b)
                    }
                    return d
                },
                Bc = function(a, b, c) {
                    x.data[a].cells[b].style.cell =
                        c.general;
                    x.data[a].cells[b].style.content = c.content;
                    x.data[a].cells[b].style.label = c.label
                },
                wd = function(b) {
                    if (x && (b -= y, 0 <= b && b < x.data.length && x.data[b].visible)) {
                        x.data[b].style = a.defaultStyle.row.general.normal;
                        for (var c = 0; c < a.columnList.length; c++) x.data[b].cells[c].style.cell = a.defaultStyle.row.cell.normal + " iui-treegrid-cell-empty"
                    }
                };
            a.refreshColumns = function() {
                for (var b = 0; b < a.columnList.length; b++) a.refresh(a.columnList[b], null, !1)
            };
            a.refreshRows = function() {
                for (var b = y; b < y + D; b++) b < a.currentList.length ?
                    a.refresh(a.currentList[b], null, !1) : wd(b)
            };
            a.refreshHover = function(b) {
                "optimal" == a.options.displayMode ? a.refresh(b, null, null, !0) : a.refresh(b)
            };
            a.refresh = function(b, c, d, e) {
                "optimal" == a.options.displayMode ? a.refreshOptimal(b, c, d, e) : a.refreshNormal(b, c, d)
            };
            a.refreshNormal = function(b, c, d) {
                if (b) switch (b.type) {
                    case "column":
                        v && (c = a.getColumnCurrentIndex(b), 0 <= c && c < v.data.length && (1 == a.options.showHeader && (v.data[c].style.header = Sa(b)), 1 == a.options.showFooter && (v.data[c].style.footer = Sa(b, null, -1, !0)), v.data[c].style.filtering =
                            ud(b), v.data[c].style.sorting = vd(b), void 0 == d && v && v.$apply()));
                        break;
                    case "row":
                        if (x) {
                            c = a.getRowCurrentIndex(b);
                            var e = c - y;
                            if (0 <= e && e < x.data.length && x.data[e].visible) {
                                x.data[e].style = Sa(b).general;
                                for (var f = Ac(c, "cell"), g = 0; g < a.columnList.length && g < x.data[e][a.options.rowFields.cells].length; g++) {
                                    var h = x.data[e].cells[g].index;
                                    if (0 <= h) {
                                        var k = b[a.options.rowFields.cells];
                                        h < k.length ? (h = Sa(k[h], b, c), Bc(e, g, h)) : Bc(e, g, f)
                                    } else Bc(e, g, f)
                                }
                                void 0 == d && x && x.$apply()
                            }
                        }
                } else {
                    for (g = 0; g < a.columnList.length; g++) a.refresh(a.columnList[g],
                        null, !1);
                    for (b = y; b < y + D; b++) b < a.currentList.length ? a.refresh(a.currentList[b], null, !1) : wd(b);
                    1 == d && x && x.$apply()
                }
            };
            a.refreshOptimal = function(b, c, d, e) {
                if (b) switch (b.type) {
                    case "column":
                        v && (c = a.getColumnCurrentIndex(b), 0 <= c && c < v.data.length && (1 == a.options.showHeader && (v.data[c].style.header = Sa(b)), 1 == a.options.showFooter && (v.data[c].style.footer = Sa(b, null, -1, !0)), v.data[c].style.filtering = ud(b), v.data[c].style.sorting = vd(b), void 0 == d && v && v.$apply()));
                        break;
                    case "row":
                        a.refreshCurrentView(b, e)
                } else {
                    for (b =
                        0; b < a.columnList.length; b++) a.refresh(a.columnList[b], null, !1);
                    for (b = y; b < y + D; b++) b < a.currentList.length ? a.refreshCurrentView(a.currentList[b]) : xd(b - y)
                }
            };
            var xd = function(b, c) {
                    for (var d = 0, e = "none", f = Db; 3 > d;) {
                        var g = b,
                            h = 0,
                            k = a.columnList.length,
                            l = 0;
                        if ("none" == e && c)
                            for (var h = Bb, k = Cb, p = 0; p < h && p < a.columnList.length; p++) a.isColumnFixed(a.columnList[p]) || l++;
                        if (f && 0 < f.length && 0 <= g && g < f.length && x)
                            for (Hb(f[g].rowElem, a.defaultStyle.row.general.normal); h <= k && h < a.columnList.length; h++)(a.columnList[h][a.options.columnFields.fixed] ?
                                a.columnList[h][a.options.columnFields.fixed] : "none") == e && l < f[g].cellList.length && (Hb(f[g].cellList[l].cell, a.defaultStyle.row.cell.normal + " iui-treegrid-cell-empty"), l++);
                        d++;
                        1 == d ? (e = "left", f = Eb) : (e = "right", f = Fb)
                    }
                },
                Hb = function(a, b) {
                    a && (a.removeAttr("class"), a.addClass(b))
                };
            a.refreshCurrentView = function(b, c) {
                for (var d = 0, e = "none", f = Db; 3 > d;) {
                    var g = b,
                        h = c;
                    if (g) switch (g.type) {
                        case "row":
                            if (x && f && 0 < f.length) {
                                var k = a.getRowCurrentIndex(g),
                                    l = k - y;
                                if (0 <= l && l < f.length && l < x.data.length && x.data[l].visible) {
                                    Hb(f[l].rowElem,
                                        Sa(g).general);
                                    var p = 0,
                                        t = a.columnList.length,
                                        u = 0;
                                    if ("none" == e && h)
                                        for (p = Bb, t = Cb, h = 0; h < p && h < a.columnList.length; h++) a.isColumnFixed(a.columnList[h]) || u++;
                                    for (; p <= t && p < a.columnList.length; p++)(a.columnList[p][a.options.columnFields.fixed] ? a.columnList[p][a.options.columnFields.fixed] : "none") == e && u < f[l].cellList.length && (h = uc(k, p, !0), 0 <= h && h < a.currentList[k][a.options.rowFields.cells].length ? Hb(f[l].cellList[u].cell, Sa(a.currentList[k][a.options.rowFields.cells][h], g, k).general) : Hb(f[l].cellList[u].cell,
                                        Ac(k, "cell").general), u++)
                                }
                            }
                    } else
                        for (g = y; g < y + D; g++) g < a.currentList.length ? a.refreshCurrentView(a.currentList[g], !0) : xd(g, !0);
                    d++;
                    1 == d ? (e = "left", f = Eb) : (e = "right", f = Fb)
                }
            };
            a.moveColumn = function(b, c) {
                if (b && 0 != a.callColumnPosChanging(b)) {
                    var d = a.columnList[0];
                    0 <= a.options.expandColIndex && a.options.expandColIndex < a.columnList.length && (d = a.columnList[a.options.expandColIndex]);
                    var e = a.getColumnCurrentIndex(b),
                        f = a.getColumnRealIndex(e),
                        g = -1,
                        h = a.getFullColumnList();
                    switch (c) {
                        case "first":
                            g = 0;
                            break;
                        case "left":
                            (e =
                                fc(e - 1, b[a.options.columnFields.fixed], !0)) && (g = a.getColumnRealIndex(a.getColumnCurrentIndex(e)));
                            break;
                        case "right":
                            (e = gc(e + 1, b[a.options.columnFields.fixed], !0)) && (g = a.getColumnRealIndex(a.getColumnCurrentIndex(e)));
                            break;
                        case "last":
                            g = h.length - 1
                    }
                    0 <= g && g < h.length && f != g && (f < g ? "first" != c && "left" != c || g-- : f > g && ("last" != c && "right" != c || g++), a.columnsObj.moveObject(f, g), a.updateColumnList(), d = a.getColumnCurrentIndex(d), d != a.options.expandColIndex ? (a.options.expandColIndex = d, a.updateLayout()) : a.updateView(),
                        a.callColumnPosChanged(O, a.hoverColumn))
                }
            };
            a.moveRow = function(b, c, d, e) {
                if (b) {
                    a.allowUpdate = !1;
                    var f = -1;
                    switch (d) {
                        case "first":
                            f = 0;
                            break;
                        case "at":
                            f = e
                    }
                    if (Array.isArray(b)) {
                        e = [];
                        for (var g = 0; g < b.length; g++) {
                            for (var h = !1, k = a.getParent(b[g]); k;) {
                                if (0 <= b.indexOf(k)) {
                                    h = !0;
                                    break
                                }
                                k = a.getParent(k)
                            }
                            h || e.push(b[g])
                        }
                        if (0 < e.length)
                            if (b = a.getObjCurrentIndex(e[0]), g = a.getObjCurrentIndex(e[e.length - 1]), b <= g)
                                for (g = 0; g < e.length; g++) Cc(e[g], c, f, d);
                            else
                                for (g = e.length - 1; 0 <= g; g--) Cc(e[g], c, f, d)
                    } else Cc(b, c, f, d);
                    a.allowUpdate = !0;
                    a.updateCurrentLayout();
                    a.callChange()
                }
            };
            var Cc = function(b, c, d, e) {
                    a.rowsObj.removeAt(b, -1, null, a.objIsRemoved) && ("first" == e || "last" == e || "at" == e ? a.rowsObj.insertAt(b, d, c, a.rowIsAdded) : "before" == e ? a.rowsObj.insertByRef(b, c, !1, a.rowIsAdded) : "after" == e && a.rowsObj.insertByRef(b, c, !0, a.rowIsAdded))
                },
                Ca = "none",
                Q = !1,
                Zb = -1,
                Ca = "none",
                $b = 0,
                ac = 0;
            k.$watch(function() {
                return p[0].offsetWidth
            }, function(b, c) {
                100 == D ? a.updateLayout() : b != c && (ua && ua.css("width", p[0].clientWidth + "px"), pa && pa.css("width", p[0].clientWidth +
                    "px"), a.updateCurrentLayout())
            });
            var Ba = null;
            k.$watch(function() {
                return p[0].offsetHeight
            }, function(b, c) {
                b != c && (Ba && (e.cancel(Ba), Ba = null), Ba = e(function() {
                    a.updateLayout();
                    e.cancel(Ba);
                    Ba = null
                }, 250))
            });
            a.isColumnWithFixedWidth = function(b) {
                var c = a.columnList;
                return c && 0 <= b && b < c.length ? c[b][a.options.columnFields.fixedWidth] ? c[b][a.options.columnFields.fixedWidth] : !1 : !1
            };
            a.setColumnResizingParams = function(b, c, d) {
                0 <= b && b < a.columnList.length && (Zb = b, Ca = c, ac = d, $b = a.getColumnWidth(a.columnList[b]))
            };
            var yd =
                function(b) {
                    return b && 0 != b[a.options.columnFields.visible] ? !0 : !1
                };
            a.isColumnFixed = function(b) {
                return !b || "left" != b[a.options.columnFields.fixed] && "right" != b[a.options.columnFields.fixed] ? !1 : !0
            };
            var fc = function(b, c, d) {
                    var e = null;
                    c = void 0 == c ? "none" : c;
                    for (var f = b; 0 <= f; f--)
                        if (!d || d && yd(a.columnList[f]))
                            if (b = a.columnList[f][a.options.columnFields.fixed], b = void 0 == b ? "none" : b, b == c) {
                                e = a.columnList[f];
                                break
                            }
                    return e
                },
                gc = function(b, c, d) {
                    var e = null;
                    c = void 0 == c ? "none" : c;
                    for (var f = b; f < a.columnList.length; f++)
                        if (!d ||
                            d && yd(a.columnList[f]))
                            if (b = a.columnList[f][a.options.columnFields.fixed], b = void 0 == b ? "none" : b, b == c) {
                                e = a.columnList[f];
                                break
                            }
                    return e
                },
                Uc = function(b, c) {
                    if (0 <= b && b < a.columnList.length) {
                        var d = a.columnList[b];
                        if (d) switch (columnFixedType = d[a.options.columnFields.fixed], c) {
                            case "left":
                                if ("right" != columnFixedType) {
                                    if (!fc(b - 1, d[a.options.columnFields.fixed])) return !1
                                } else if (!columnFixedType || "none" == columnFixedType) return 0 < b;
                                break;
                            case "right":
                                if ("right" == columnFixedType && !gc(b + 1, d[a.options.columnFields.fixed])) return !1
                        }
                    }
                    return !0
                };
            a.resizeColumn = function(b, c, d) {
                0 > c && (c = 0);
                var e;
                if (e = a.getHeaderElem(d)) e = angular.element(e.find("tr")), a.resizeColumnCells(e, b, c, 1, d);
                if (e = a.getRowElems(d)) {
                    var f = {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        },
                        h = a.getElemFromColumn(a.columnList[b], a.columnList[b][a.options.columnFields.fixed]);
                    h && (h = a.getChildElement(h, "column-header-cell")) && (f = g.getPadding(h[0]));
                    for (h = 0; h < e.length; h++) angular.element(e[h]), a.resizeColumnCells(angular.element(e[h]), b, c, 0, d, !0, f)
                }
                if (e = a.getFooterElem(d)) e = angular.element(e.find("tr")),
                    a.resizeColumnCells(e, b, c, 2, d);
                0 <= b && b < a.columnList.length && a.callColumnSizeChanged(a.columnList[b])
            };
            a.resizeColumnCells = function(b, c, d, e, f, g, h) {
                if (b) {
                    var k = -1;
                    g && (k = a.getRowCurrentIndex(a.getRowFromElem(b)));
                    b = 0;
                    0 <= k && (b = a.indentList[k]);
                    switch (e) {
                        case 1:
                            e = a.getElemFromColumnCell(c, f);
                            break;
                        case 2:
                            e = a.getElemFromColumnCell(c, f, !0);
                            break;
                        default:
                            e = a.getElemFromCell(k, c, f)
                    }
                    e && 0 < e.children().length && (e = e.children().eq(0)) && (h = h ? h.left + b : b, f = d, 0 <= k && c == a.options.expandColIndex && (f -= h), f = 0 <= f ? f : 0, e.css("width",
                        f + "px"), c == a.options.expandColIndex && (0 == f ? e.css("padding-left", d + "px") : e.css("padding-left", h + "px")))
                }
            };
            var Gc = function(b) {
                    a.dropMark()
                },
                Hc = function(a) {
                    fb()
                },
                Ic = function(b) {
                    a.removeDropMark();
                    a.dragIcon && angular.element(a.dragIcon).remove();
                    a.cancelScrollTimer();
                    a.dragDropStatus(!1)
                };
            angular.element(l).bind("dragenter", Gc);
            angular.element(l).bind("dragover", Hc);
            angular.element(l).bind("dragend", Ic);
            var da = angular.element('<div class="iui-treegrid-column-reorder-mark"><span></span></div>'),
                sa = angular.element('<div class="iui-treegrid-column-reorder-tooltip"><span></span></div>'),
                Pc = function(b) {
                    var c = "initial";
                    ma && O && (!a.hoverColumn || O == a.hoverColumn || a.hoverColumn && 0 == a.hoverColumn.allowDrop || a.hoverColumn && O[a.options.columnFields.fixed] != a.hoverColumn[a.options.columnFields.fixed]) && (c = "not-allowed", b && sa && sa.css("display", "none"));
                    p.css("cursor", c);
                    document.body.style.cursor = c
                },
                tc = function(b) {
                    return b ? {
                        min: g.isFieldAvailable(b[a.options.columnFields.minWidth], 0),
                        max: g.isFieldAvailable(b[a.options.columnFields.maxWidth], 9999999)
                    } : {
                        min: 0,
                        max: 9999999
                    }
                },
                Kc = function(b) {
                    if (0 ===
                        b.button && 0 <= Zb && "none" != Ca) {
                        var c = a.getMousePos(b),
                            d = Zb,
                            e = a.columnList;
                        if (0 <= d && d < e.length) {
                            var f = $b + c.x - ac;
                            "right" == e[d][a.options.columnFields.fixed] && (f = $b - (c.x - ac));
                            f = 0 <= f ? f : 0;
                            c = tc(e[d]);
                            f >= c.min && f <= c.max && (e[d][a.options.columnFields.width] = f, a.resizeColumn(d, f, e[d][a.options.columnFields.fixed]), a.updateViewSize(), a.updateScrollVisibility(), lc())
                        }
                    }
                    Rb ? aa || 1 !== b.which || (M[0].getBoundingClientRect(), b = a.getMousePos(b), X.scrollMousePos || (X.scrollMousePos = b), d = M[0].offsetLeft + (b.x - X.scrollMousePos.x),
                        d < wa ? d = wa : d + M[0].offsetWidth > Ma && (d = Ma - M[0].offsetWidth), M.css("left", d + "px"), X.scrollMousePos = b, a.prevScrollPos = {
                            x: a.scrollPos.x,
                            y: a.scrollPos.y
                        }, a.scrollPos.x = !1 !== a.options.rtl ? parseInt((Ma - M[0].offsetLeft - M[0].offsetWidth) * Wa, 10) : parseInt((M[0].offsetLeft - wa) * Wa, 10), mc(), (Dc(a.scrollPos) || a.scrollPos.x != a.prevScrollPos.x) && a.callScrollPosChanged()) : na && (aa || 1 !== b.which || (T[0].getBoundingClientRect(), b = a.getMousePos(b), X.scrollMousePos || (X.scrollMousePos = b), d = T[0].offsetTop + (b.y - X.scrollMousePos.y),
                        d < Na ? d = Na : d + T[0].offsetHeight > mb && (d = mb - T[0].offsetHeight), T.css("top", d + "px"), X.scrollMousePos = b, Ub = d - Na, a.prevScrollPos = {
                            x: a.scrollPos.x,
                            y: a.scrollPos.y
                        }, a.scrollPos.y = Math.floor(Ub * Vb * S), (Dc(a.scrollPos) || a.scrollPos.y != a.prevScrollPos.y) && a.callScrollPosChanged(), newIndex = 0 < S ? Math.floor(a.scrollPos.y / S) : 0, newIndex + D - 1 > a.currentList.length && (newIndex = a.currentList.length - D + 1), 0 > newIndex && (newIndex = 0), newIndex != y && (y = newIndex, a.updateVerticalScrollView())))
                },
                Lc = function(b) {
                    a.removeDropDownList();
                    a.closeEditor(d);
                    a.closeFilterWindow();
                    sb()
                },
                Mc = function(b) {
                    Pc(!0);
                    sa && sa.remove();
                    ma = !1;
                    Zb = -1;
                    Ca = "none";
                    ac = $b = 0;
                    Q = !1;
                    p.css("cursor", "default");
                    a.dropMark();
                    na && a.updateView();
                    fb();
                    X.scrollMousePos = null;
                    na = Rb = !1;
                    p.css("cursor", "default");
                    document.body.style.cursor = "default"
                },
                Jc = function(b) {
                    switch (b.keyCode) {
                        case 16:
                            a.multiSelection(!1);
                            break;
                        case 17:
                            a.multiSelection(!1);
                            break;
                        default:
                            b.ctrlKey || b.metaKey || a.multiSelection(!1), b.shiftKey || a.multiSelection(!1)
                    }
                };
            angular.element(l).bind("mousemove",
                Kc);
            angular.element(l).bind("mousedown", Lc);
            angular.element(l).bind("mouseup", Mc);
            angular.element(l).bind("keyup", Jc);
            var Ec = !1,
                rb = 0,
                bc = null,
                zd = .5;
            a.isScrollBarVisible = function(a) {
                switch (a) {
                    case "horizontal":
                        return H;
                    case "vertical":
                        return J
                }
                return H && J
            };
            a.prevScrollPos = {
                x: 0,
                y: 0
            };
            a.scrollPos = {
                x: 0,
                y: 0
            };
            a.getMaxScrollPos = function() {
                return K
            };
            a.getScrollPos = function() {
                return a.scrollPos
            };
            a.setScrollPos = function(b, c) {
                if (!aa && b) {
                    var d = !0;
                    0 > b.x && (b.x = 0, d = !1);
                    b.x > K.x && (b.x = K.x, d = !1);
                    0 > b.y && (b.y = 0, d = !1);
                    b.y > K.y && (b.y = K.y, d = !1);
                    a.scrollPos = b;
                    Ub = Math.floor(a.scrollPos.y / (S * Vb));
                    var e, f = Na + Ub;
                    e = !1 !== a.options.rtl ? Math.floor(a.scrollPos.x / Wa) - (Ma - M[0].offsetWidth - wa) : Math.floor(a.scrollPos.x / Wa) + wa;
                    H && M && M.css("left", e + "px");
                    J && T && T.css("top", f + "px");
                    mc();
                    wc(!0, c);
                    d && a.callScrollPosChanged()
                }
            };
            var Dc = function(a) {
                    return 0 < a.x && a.x < K.x || 0 < a.y && a.y < K.y
                },
                Ob = function(b, c, d) {
                    Ec || (a.updateFocus(), rb = 0, Ec = !0, bc = f(function() {
                        var d = c,
                            e = a.getScrollPos();
                        d || (0 === rb && (rb = 5), rb += 5 + Vb, zd += .5, d = rb += Math.floor(zd));
                        e.y = b ? e.y + d : e.y - d;
                        a.setScrollPos(e);
                        (0 >= e.y || a.getScrollPos().y < e.y) && fb()
                    }, d ? d : 100))
                },
                fb = function() {
                    bc && (f.cancel(bc), bc = null);
                    Ec = !1;
                    rb = 0
                };
            a.cancelScrollTimer = function() {
                fb()
            };
            a.scrollTo = function(b, c) {
                if (b) {
                    var d = a.getRowCurrentIndex(b);
                    if (a.isRowIndexInRange(d)) {
                        var e;
                        e = d;
                        switch (c) {
                            case "center":
                                e = Math.floor(ga / 2) - 1;
                                e = d > e ? d - e : 0;
                                break;
                            case "bottom":
                                e = ga - 2, a.options.showHeader && e--, a.options.showFooter && e--, e = d > e ? d - e : 0
                        }
                        a.setScrollPos({
                            x: a.scrollPos.x,
                            y: e * S
                        })
                    }
                }
            };
            var mc = function() {
                    var b = a.scrollPos.x;
                    0 > b && (b = 0);
                    b > K.x && (b = K.x);
                    b *= -1;
                    ea && ea.css("left", b + P + "px");
                    ta && ta.css("left", b + P + "px");
                    fa && fa.css("left", b + P + "px")
                },
                wc = function(b, c) {
                    if (!(0 == b && 0 >= S)) {
                        newIndex = 0 < S ? Math.floor(a.scrollPos.y / S) : 0;
                        a.scrollPos.y == K.y && newIndex--;
                        if (a.currentList.length >= D && newIndex + D - 1 > a.currentList.length) {
                            newIndex = a.currentList.length - D + 1;
                            var d = a.getRowElems();
                            d || (d = a.getRowElems("left"));
                            d || (d = a.getRowElems("right"));
                            d && 0 < d.length && (d = angular.element(d[d.length - 1]), d[0].offsetTop + d[0].offsetHeight > p[0].clientHeight -
                                (C + N) && newIndex++)
                        }
                        0 > newIndex && (newIndex = 0);
                        newIndex != y && (y = newIndex, 0 != b && a.updateView(c))
                    }
                };
            p.bind("scroll", function(a) {
                p[0].scrollTop = 0;
                p[0].scrollLeft = 0
            });
            var Ad = function(b, c) {
                if (J) {
                    document.activeElement && document.activeElement.blur();
                    a.removeDropDownList();
                    a.closeEditor(d);
                    a.closeFilterWindow();
                    sb();
                    var e = a.hoverRow;
                    a.hoverRow = null;
                    a.refresh(e);
                    e = Math.floor(p[0].clientHeight / 4);
                    a.prevScrollPos = {
                        x: a.scrollPos.x,
                        y: a.scrollPos.y
                    };
                    a.setScrollPos({
                        x: a.scrollPos.x,
                        y: a.scrollPos.y + e * c * -1
                    }, !0);
                    Dc(a.scrollPos) ||
                        a.scrollPos.y == a.prevScrollPos.y || a.callScrollPosChanged()
                }
            };
            p.bind("mousewheel", function(b) {
                b.preventDefault();
                if (!aa && a.options.enabled) {
                    var c = 0;
                    b.wheelDelta ? c = Math.max(-1, Math.min(1, b.wheelDelta || -b.detail)) : b.originalEvent && (c = Math.max(-1, Math.min(1, b.originalEvent.wheelDelta || -b.originalEvent.detail)));
                    Ad(b, c)
                }
            });
            p.bind("DOMMouseScroll", function(b) {
                b.preventDefault();
                if (!aa && a.options.enabled) {
                    var c = 0;
                    b.detail ? c = Math.max(-1, Math.min(1, -b.detail)) : b.originalEvent && (c = Math.max(-1, Math.min(1, -b.originalEvent.detail)));
                    Ad(b, c)
                }
            });
            var Ib = {
                    x: 0,
                    y: 0
                },
                Ta = {
                    x: 0,
                    y: 0
                };
            p.bind("touchstart", function(b) {
                b.preventDefault();
                a.options.enabled && (b = a.getTouchData(b)) && 0 < b.length && (Ib = {
                    x: b[0].pageX,
                    y: b[0].pageY
                })
            });
            p.bind("touchend", function(b) {
                if (a.options.enabled) {
                    (b = a.getTouchData(b)) && 0 < b.length && (Ta = {
                        x: b[0].pageX,
                        y: b[0].pageY
                    });
                    var c = Ta.x - Ib.x,
                        d = Ta.y - Ib.y;
                    (20 < Math.abs(c) || 20 < Math.abs(d)) && document.activeElement && document.activeElement.blur();
                    var e = !1,
                        g = !1,
                        h = Ib,
                        k = a.scrollPos.x,
                        l = a.scrollPos.y,
                        p = f(function() {
                            var b = a.scrollPos; - 20 > c ? (h.x -= 10, h.x > Ta.x ? b.x += 10 : (b.x = k - c, e = !0)) : 20 < c ? (h.x += 10, h.x < Ta.x ? b.x -= 10 : (b.x = k - c, e = !0)) : e = !0; - 20 > d ? (h.y -= 10, h.y > Ta.y ? b.y += 10 : (b.y = l - d, g = !0)) : 20 < d ? (h.y += 10, h.y < Ta.y ? b.y -= 10 : (b.y = l - d, g = !0)) : g = !0;
                            a.setScrollPos(b);
                            e && g && f.cancel(p)
                        }, 5);
                    Ib = Ta
                }
            });
            angular.isDefined(k.options) ? a.updateOptions(k.options) : (0 == k.allowAnimation && (a.options.allowAnimation = k.allowAnimation), 0 == k.allowCellFocus && (a.options.allowCellFocus = k.allowCellFocus), 1 == k.allowColumnReorder && (a.options.allowColumnReorder = k.allowColumnReorder),
                1 == k.allowDrag && (a.options.allowDrag = k.allowDrag), 0 == k.allowDrop && (a.options.allowDrop = k.allowDrop), 1 == k.allowFilter && (a.options.allowFilter = k.allowFilter), 0 == k.allowFocus && (a.options.allowFocus = k.allowFocus), 0 == k.autoExpand && (a.options.autoExpand = k.autoExpand), angular.isDefined(k.animationSpeed) && 200 !== k.animationSpeed && (a.options.animationSpeed = k.animationSpeed), angular.isDefined(k.controlStyle) && a.updateControlStyle(k.controlStyle), angular.isDefined(k.displayMode) && (a.options.displayMode = k.displayMode),
                angular.isDefined(k.editorSettings) && a.updateEditorSettings(k.editorSettings), angular.isDefined(k.expandingColumnIndex) && (a.options.expandColIndex = k.expandingColumnIndex), angular.isDefined(k.fields) && (a.updateDataFields(k.fields), a.updateData()), 0 == k.enabled && (a.options.enabled = k.enabled), 1 == k.fillSpace && (a.options.fillSpace = k.fillSpace), angular.isDefined(k.gridLines) && (a.options.gridLines = k.gridLines), 1 == k.hoverSelection && (a.options.hoverSelection = k.hoverSelection), angular.isDefined(k.indent) && (a.options.indent =
                    k.indent), angular.isDefined(k.labelEdit) && (a.options.labelEdit = k.labelEdit), angular.isDefined(k.paging) && a.updatePaging(k.paging), angular.isDefined(k.rowHeight) && (a.options.rowHeight = k.rowHeight), angular.isDefined(k.rowIcon) && (a.options.rowIcon = k.rowIcon), 1 == k.rtl && (a.options.rtl = k.rtl), angular.isDefined(k.selectedIndex) && (a.options.selectedIndex = k.selectedIndex), angular.isDefined(k.selectedRow) && (a.options.selectedRow = k.selectedRow), angular.isDefined(k.selectionMode) && (a.options.selectionMode = k.selectionMode), !1 === k.showExpandBoxes && (a.options.showExpandBoxes = k.showExpandBoxes), 0 == k.showFooter && (a.options.showFooter = k.showFooter), 0 == k.showHeader && (a.options.showHeader = k.showHeader), 0 == k.showIcons && (a.options.showIcons = k.showIcons), angular.isDefined(k.sorting) && (a.options.sorting = k.sorting));
            a.updateLayout()
        }
    }
}]);
